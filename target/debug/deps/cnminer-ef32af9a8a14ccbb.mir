// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static cryptonight::LUT1: [u32; 256] = {
    let mut _0: [u32; 256];              // return pointer

    bb0: {                              
        _0 = [const 2774754246u32, const 2222750968u32, const 2574743534u32, const 2373680118u32, const 234025727u32, const 3177933782u32, const 2976870366u32, const 1422247313u32, const 1345335392u32, const 50397442u32, const 2842126286u32, const 2099981142u32, const 436141799u32, const 1658312629u32, const 3870010189u32, const 2591454956u32, const 1170918031u32, const 2642575903u32, const 1086966153u32, const 2273148410u32, const 368769775u32, const 3948501426u32, const 3376891790u32, const 200339707u32, const 3970805057u32, const 1742001331u32, const 4255294047u32, const 3937382213u32, const 3214711843u32, const 4154762323u32, const 2524082916u32, const 1539358875u32, const 3266819957u32, const 486407649u32, const 2928907069u32, const 1780885068u32, const 1513502316u32, const 1094664062u32, const 49805301u32, const 1338821763u32, const 1546925160u32, const 4104496465u32, const 887481809u32, const 150073849u32, const 2473685474u32, const 1943591083u32, const 1395732834u32, const 1058346282u32, const 201589768u32, const 1388824469u32, const 1696801606u32, const 1589887901u32, const 672667696u32, const 2711000631u32, const 251987210u32, const 3046808111u32, const 151455502u32, const 907153956u32, const 2608889883u32, const 1038279391u32, const 652995533u32, const 1764173646u32, const 3451040383u32, const 2675275242u32, const 453576978u32, const 2659418909u32, const 1949051992u32, const 773462580u32, const 756751158u32, const 2993581788u32, const 3998898868u32, const 4221608027u32, const 4132590244u32, const 1295727478u32, const 1641469623u32, const 3467883389u32, const 2066295122u32, const 1055122397u32, const 1898917726u32, const 2542044179u32, const 4115878822u32, const 1758581177u32, const 0u32, const 753790401u32, const 1612718144u32, const 536673507u32, const 3367088505u32, const 3982187446u32, const 3194645204u32, const 1187761037u32, const 3653156455u32, const 1262041458u32, const 3729410708u32, const 3561770136u32, const 3898103984u32, const 1255133061u32, const 1808847035u32, const 720367557u32, const 3853167183u32, const 385612781u32, const 3309519750u32, const 3612167578u32, const 1429418854u32, const 2491778321u32, const 3477423498u32, const 284817897u32, const 100794884u32, const 2172616702u32, const 4031795360u32, const 1144798328u32, const 3131023141u32, const 3819481163u32, const 4082192802u32, const 4272137053u32, const 3225436288u32, const 2324664069u32, const 2912064063u32, const 3164445985u32, const 1211644016u32, const 83228145u32, const 3753688163u32, const 3249976951u32, const 1977277103u32, const 1663115586u32, const 806359072u32, const 452984805u32, const 250868733u32, const 1842533055u32, const 1288555905u32, const 336333848u32, const 890442534u32, const 804056259u32, const 3781124030u32, const 2727843637u32, const 3427026056u32, const 957814574u32, const 1472513171u32, const 4071073621u32, const 2189328124u32, const 1195195770u32, const 2892260552u32, const 3881655738u32, const 723065138u32, const 2507371494u32, const 2690670784u32, const 2558624025u32, const 3511635870u32, const 2145180835u32, const 1713513028u32, const 2116692564u32, const 2878378043u32, const 2206763019u32, const 3393603212u32, const 703524551u32, const 3552098411u32, const 1007948840u32, const 2044649127u32, const 3797835452u32, const 487262998u32, const 1994120109u32, const 1004593371u32, const 1446130276u32, const 1312438900u32, const 503974420u32, const 3679013266u32, const 168166924u32, const 1814307912u32, const 3831258296u32, const 1573044895u32, const 1859376061u32, const 4021070915u32, const 2791465668u32, const 2828112185u32, const 2761266481u32, const 937747667u32, const 2339994098u32, const 854058965u32, const 1137232011u32, const 1496790894u32, const 3077402074u32, const 2358086913u32, const 1691735473u32, const 3528347292u32, const 3769215305u32, const 3027004632u32, const 4199962284u32, const 133494003u32, const 636152527u32, const 2942657994u32, const 2390391540u32, const 3920539207u32, const 403179536u32, const 3585784431u32, const 2289596656u32, const 1864705354u32, const 1915629148u32, const 605822008u32, const 4054230615u32, const 3350508659u32, const 1371981463u32, const 602466507u32, const 2094914977u32, const 2624877800u32, const 555687742u32, const 3712699286u32, const 3703422305u32, const 2257292045u32, const 2240449039u32, const 2423288032u32, const 1111375484u32, const 3300242801u32, const 2858837708u32, const 3628615824u32, const 84083462u32, const 32962295u32, const 302911004u32, const 2741068226u32, const 1597322602u32, const 4183250862u32, const 3501832553u32, const 2441512471u32, const 1489093017u32, const 656219450u32, const 3114180135u32, const 954327513u32, const 335083755u32, const 3013122091u32, const 856756514u32, const 3144247762u32, const 1893325225u32, const 2307821063u32, const 2811532339u32, const 3063651117u32, const 572399164u32, const 2458355477u32, const 552200649u32, const 1238290055u32, const 4283782570u32, const 2015897680u32, const 2061492133u32, const 2408352771u32, const 4171342169u32, const 2156497161u32, const 386731290u32, const 3669999461u32, const 837215959u32, const 3326231172u32, const 3093850320u32, const 3275833730u32, const 2962856233u32, const 1999449434u32, const 286199582u32, const 3417354363u32, const 4233385128u32, const 3602627437u32, const 974525996u32]; // scope 0 at src\cryptonight.rs:297:27: 330:2
        return;                          // scope 0 at src\cryptonight.rs:297:1: 330:3
    }
}

const cryptonight::SlowHashStateInner::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])); // scope 0 at src\cryptonight.rs:45:20: 45:34
        return;                          // scope 0 at src\cryptonight.rs:45:20: 45:34
    }
}

fn cryptonight::mul_sum_xor_dst(_1: *const u8, _2: *mut u8, _3: *mut u8) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let _4: *const u64;              // "a" in scope 1 at src\cryptonight.rs:132:9: 132:10
        scope 3 {
            let _6: *mut u64;            // "c" in scope 3 at src\cryptonight.rs:133:9: 133:10
            scope 5 {
                let _8: *mut u64;        // "dst" in scope 5 at src\cryptonight.rs:134:9: 134:12
                scope 7 {
                    let mut _10: u64;    // "hi" in scope 7 at src\cryptonight.rs:135:9: 135:15
                    scope 9 {
                        let _11: u64;    // "lo" in scope 9 at src\cryptonight.rs:136:9: 136:11
                    }
                    scope 10 {
                    }
                }
                scope 8 {
                }
            }
            scope 6 {
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }
    let mut _5: *const u8;
    let mut _7: *mut u8;
    let mut _9: *mut u8;
    let mut _12: u64;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: *mut u64;
    let mut _18: *mut u64;
    let mut _19: (u64, bool);
    let mut _20: u64;
    let mut _21: (u64, bool);
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: *mut u64;
    let mut _26: *mut u64;
    let mut _27: u64;
    let mut _28: *mut u64;
    let mut _29: *mut u64;
    let mut _30: u64;
    let mut _31: u64;
    let mut _32: *mut u64;
    let mut _33: *mut u64;

    bb0: {                              
        StorageLive(_4);                 // scope 1 at src\cryptonight.rs:132:9: 132:10
        StorageLive(_5);                 // scope 1 at src\cryptonight.rs:132:13: 132:14
        _5 = _1;                         // scope 1 at src\cryptonight.rs:132:13: 132:14
        _4 = _5 as *const u64 (Misc);    // scope 1 at src\cryptonight.rs:132:13: 132:28
        StorageDead(_5);                 // scope 1 at src\cryptonight.rs:132:28: 132:28
        StorageLive(_6);                 // scope 3 at src\cryptonight.rs:133:9: 133:10
        StorageLive(_7);                 // scope 3 at src\cryptonight.rs:133:13: 133:14
        _7 = _2;                         // scope 3 at src\cryptonight.rs:133:13: 133:14
        _6 = _7 as *mut u64 (Misc);      // scope 3 at src\cryptonight.rs:133:13: 133:26
        StorageDead(_7);                 // scope 3 at src\cryptonight.rs:133:26: 133:26
        StorageLive(_8);                 // scope 5 at src\cryptonight.rs:134:9: 134:12
        StorageLive(_9);                 // scope 5 at src\cryptonight.rs:134:15: 134:18
        _9 = _3;                         // scope 5 at src\cryptonight.rs:134:15: 134:18
        _8 = _9 as *mut u64 (Misc);      // scope 5 at src\cryptonight.rs:134:15: 134:30
        StorageDead(_9);                 // scope 5 at src\cryptonight.rs:134:30: 134:30
        StorageLive(_10);                // scope 7 at src\cryptonight.rs:135:9: 135:15
        _10 = const 0u64;                // scope 7 at src\cryptonight.rs:135:18: 135:22
        StorageLive(_11);                // scope 9 at src\cryptonight.rs:136:9: 136:11
        StorageLive(_12);                // scope 9 at src\cryptonight.rs:136:14: 136:34
        StorageLive(_13);                // scope 9 at src\cryptonight.rs:136:21: 136:23
        _13 = (*_4);                     // scope 9 at src\cryptonight.rs:136:21: 136:23
        StorageLive(_14);                // scope 9 at src\cryptonight.rs:136:25: 136:29
        _14 = (*_8);                     // scope 9 at src\cryptonight.rs:136:25: 136:29
        StorageLive(_15);                // scope 9 at src\cryptonight.rs:136:31: 136:33
        _15 = _10;                       // scope 9 at src\cryptonight.rs:136:31: 136:33
        _12 = const cryptonight::mul128(_13, _14, _15) -> bb1; // scope 9 at src\cryptonight.rs:136:14: 136:34
    }

    bb1: {                              
        StorageDead(_15);                // scope 9 at src\cryptonight.rs:136:34: 136:34
        StorageDead(_14);                // scope 9 at src\cryptonight.rs:136:34: 136:34
        StorageDead(_13);                // scope 9 at src\cryptonight.rs:136:34: 136:34
        StorageLive(_16);                // scope 9 at src\cryptonight.rs:136:37: 136:49
        StorageLive(_17);                // scope 9 at src\cryptonight.rs:136:38: 136:49
        StorageLive(_18);                // scope 9 at src\cryptonight.rs:136:38: 136:39
        _18 = _6;                        // scope 9 at src\cryptonight.rs:136:38: 136:39
        _17 = const std::ptr::<impl *mut T>::offset(_18, const 1isize) -> bb2; // scope 9 at src\cryptonight.rs:136:38: 136:49
    }

    bb2: {                              
        StorageDead(_18);                // scope 9 at src\cryptonight.rs:136:49: 136:49
        _16 = (*_17);                    // scope 9 at src\cryptonight.rs:136:37: 136:49
        _19 = CheckedAdd(_12, _16);      // scope 9 at src\cryptonight.rs:136:14: 136:49
        assert(!(_19.1: bool), "attempt to add with overflow") -> bb3; // scope 9 at src\cryptonight.rs:136:14: 136:49
    }

    bb3: {                              
        _11 = (_19.0: u64);              // scope 9 at src\cryptonight.rs:136:14: 136:49
        StorageDead(_16);                // scope 9 at src\cryptonight.rs:136:49: 136:49
        StorageDead(_12);                // scope 9 at src\cryptonight.rs:136:49: 136:49
        StorageDead(_17);                // scope 9 at src\cryptonight.rs:136:50: 136:50
        StorageLive(_20);                // scope 9 at src\cryptonight.rs:137:11: 137:13
        _20 = (*_6);                     // scope 9 at src\cryptonight.rs:137:11: 137:13
        _21 = CheckedAdd(_10, _20);      // scope 9 at src\cryptonight.rs:137:5: 137:13
        assert(!(_21.1: bool), "attempt to add with overflow") -> bb4; // scope 9 at src\cryptonight.rs:137:5: 137:13
    }

    bb4: {                              
        _10 = (_21.0: u64);              // scope 9 at src\cryptonight.rs:137:5: 137:13
        StorageDead(_20);                // scope 9 at src\cryptonight.rs:137:13: 137:13
        StorageLive(_22);                // scope 9 at src\cryptonight.rs:138:10: 138:14
        _22 = (*_8);                     // scope 9 at src\cryptonight.rs:138:10: 138:14
        StorageLive(_23);                // scope 9 at src\cryptonight.rs:138:17: 138:19
        _23 = _10;                       // scope 9 at src\cryptonight.rs:138:17: 138:19
        (*_6) = BitXor(_22, _23);        // scope 9 at src\cryptonight.rs:138:5: 138:19
        StorageDead(_23);                // scope 9 at src\cryptonight.rs:138:19: 138:19
        StorageDead(_22);                // scope 9 at src\cryptonight.rs:138:19: 138:19
        StorageLive(_24);                // scope 9 at src\cryptonight.rs:139:20: 139:34
        StorageLive(_25);                // scope 9 at src\cryptonight.rs:139:21: 139:34
        StorageLive(_26);                // scope 9 at src\cryptonight.rs:139:21: 139:24
        _26 = _8;                        // scope 9 at src\cryptonight.rs:139:21: 139:24
        _25 = const std::ptr::<impl *mut T>::offset(_26, const 1isize) -> bb5; // scope 9 at src\cryptonight.rs:139:21: 139:34
    }

    bb5: {                              
        StorageDead(_26);                // scope 9 at src\cryptonight.rs:139:34: 139:34
        _24 = (*_25);                    // scope 9 at src\cryptonight.rs:139:20: 139:34
        StorageLive(_27);                // scope 9 at src\cryptonight.rs:139:37: 139:39
        _27 = _11;                       // scope 9 at src\cryptonight.rs:139:37: 139:39
        StorageLive(_28);                // scope 9 at src\cryptonight.rs:139:6: 139:17
        StorageLive(_29);                // scope 9 at src\cryptonight.rs:139:6: 139:7
        _29 = _6;                        // scope 9 at src\cryptonight.rs:139:6: 139:7
        _28 = const std::ptr::<impl *mut T>::offset(_29, const 1isize) -> bb6; // scope 9 at src\cryptonight.rs:139:6: 139:17
    }

    bb6: {                              
        StorageDead(_29);                // scope 9 at src\cryptonight.rs:139:17: 139:17
        (*_28) = BitXor(_24, _27);       // scope 9 at src\cryptonight.rs:139:5: 139:39
        StorageDead(_27);                // scope 9 at src\cryptonight.rs:139:39: 139:39
        StorageDead(_24);                // scope 9 at src\cryptonight.rs:139:39: 139:39
        StorageDead(_28);                // scope 9 at src\cryptonight.rs:139:40: 139:40
        StorageDead(_25);                // scope 9 at src\cryptonight.rs:139:40: 139:40
        StorageLive(_30);                // scope 9 at src\cryptonight.rs:140:12: 140:14
        _30 = _10;                       // scope 9 at src\cryptonight.rs:140:12: 140:14
        (*_8) = _30;                     // scope 9 at src\cryptonight.rs:140:5: 140:14
        StorageDead(_30);                // scope 9 at src\cryptonight.rs:140:14: 140:14
        StorageLive(_31);                // scope 9 at src\cryptonight.rs:141:22: 141:24
        _31 = _11;                       // scope 9 at src\cryptonight.rs:141:22: 141:24
        StorageLive(_32);                // scope 9 at src\cryptonight.rs:141:6: 141:19
        StorageLive(_33);                // scope 9 at src\cryptonight.rs:141:6: 141:9
        _33 = _8;                        // scope 9 at src\cryptonight.rs:141:6: 141:9
        _32 = const std::ptr::<impl *mut T>::offset(_33, const 1isize) -> bb7; // scope 9 at src\cryptonight.rs:141:6: 141:19
    }

    bb7: {                              
        StorageDead(_33);                // scope 9 at src\cryptonight.rs:141:19: 141:19
        (*_32) = _31;                    // scope 9 at src\cryptonight.rs:141:5: 141:24
        StorageDead(_31);                // scope 9 at src\cryptonight.rs:141:24: 141:24
        StorageDead(_32);                // scope 9 at src\cryptonight.rs:141:25: 141:25
        _0 = ();                         // scope 0 at src\cryptonight.rs:131:67: 142:2
        StorageDead(_11);                // scope 7 at src\cryptonight.rs:142:2: 142:2
        StorageDead(_10);                // scope 5 at src\cryptonight.rs:142:2: 142:2
        StorageDead(_8);                 // scope 3 at src\cryptonight.rs:142:2: 142:2
        StorageDead(_6);                 // scope 1 at src\cryptonight.rs:142:2: 142:2
        StorageDead(_4);                 // scope 0 at src\cryptonight.rs:142:2: 142:2
        return;                          // scope 0 at src\cryptonight.rs:142:2: 142:2
    }
}

const cryptonight::AES_KEY_SIZE: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 32usize;              // scope 0 at src\cryptonight.rs:25:35: 25:37
        return;                          // scope 0 at src\cryptonight.rs:25:1: 25:38
    }
}

const cryptonight::sub_and_shift_and_mix_add_round_in_place::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 16usize;              // scope 0 at src\cryptonight.rs:172:31: 172:33
        return;                          // scope 0 at src\cryptonight.rs:172:31: 172:33
    }
}

fn oaes::<impl at src\oaes.rs:132:1: 136:2>::default() -> oaes::AesKey {
    let mut _0: oaes::AesKey;            // return pointer
    scope 1 {
    }

    bb0: {                              
        _0 = const std::mem::zeroed() -> bb1; // scope 1 at src\oaes.rs:134:18: 134:48
    }

    bb1: {                              
        return;                          // scope 0 at src\oaes.rs:135:6: 135:6
    }
}

fn oaes::oaes_word_rot_left(_1: &mut [u8; 4]) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let mut _2: [u8; 4];             // "temp" in scope 1 at src\oaes.rs:65:9: 65:17
        scope 3 {
            let _4: ();                  // "_result" in scope 3 at src\oaes.rs:66:5: 68:6
            scope 5 {
                let mut _9: std::ops::Range<usize>; // "iter" in scope 5 at src\oaes.rs:66:5: 68:6
                scope 6 {
                    let mut _11: usize;  // "__next" in scope 6 at src\oaes.rs:66:5: 68:6
                    scope 8 {
                        let _15: usize;  // "val" in scope 8 at src\oaes.rs:66:5: 68:6
                    }
                    scope 9 {
                        let _18: usize;  // "i" in scope 9 at src\oaes.rs:66:9: 66:10
                    }
                    scope 10 {
                    }
                }
                scope 7 {
                }
            }
        }
        scope 4 {
        }
        scope 11 {
            let _41: ();                 // "_result" in scope 11 at src\oaes.rs:70:5: 72:6
            scope 13 {
                let mut _44: std::ops::Range<usize>; // "iter" in scope 13 at src\oaes.rs:70:5: 72:6
                scope 14 {
                    let mut _45: usize;  // "__next" in scope 14 at src\oaes.rs:70:5: 72:6
                    scope 16 {
                        let _49: usize;  // "val" in scope 16 at src\oaes.rs:70:5: 72:6
                    }
                    scope 17 {
                        let _52: usize;  // "i" in scope 17 at src\oaes.rs:70:9: 70:10
                    }
                    scope 18 {
                    }
                }
                scope 15 {
                }
            }
        }
        scope 12 {
        }
    }
    scope 2 {
    }
    let mut _3: ();
    let mut _5: std::ops::Range<usize>;
    let mut _6: std::ops::Range<usize>;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _10: ();
    let mut _12: std::option::Option<usize>;
    let mut _13: &mut std::ops::Range<usize>;
    let mut _14: &mut std::ops::Range<usize>;
    let mut _16: isize;
    let mut _17: usize;
    let mut _19: usize;
    let mut _20: ();
    let mut _21: u8;
    let mut _22: &u8;
    let mut _23: &[u8];
    let mut _24: &[u8; 4];
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: (usize, bool);
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: ();
    let mut _32: u8;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: &mut u8;
    let mut _37: &mut [u8];
    let mut _38: &mut [u8; 4];
    let mut _39: usize;
    let mut _40: (usize, bool);
    let mut _42: std::ops::Range<usize>;
    let mut _43: std::ops::Range<usize>;
    let mut _46: std::option::Option<usize>;
    let mut _47: &mut std::ops::Range<usize>;
    let mut _48: &mut std::ops::Range<usize>;
    let mut _50: isize;
    let mut _51: usize;
    let mut _53: usize;
    let mut _54: ();
    let mut _55: u8;
    let mut _56: usize;
    let mut _57: usize;
    let mut _58: bool;
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: bool;
    let mut _62: ();

    bb0: {                              
        StorageLive(_2);                 // scope 1 at src\oaes.rs:65:9: 65:17
        _2 = [const 0u8; Us64(4)];       // scope 1 at src\oaes.rs:65:20: 65:39
        StorageLive(_4);                 // scope 3 at src\oaes.rs:66:5: 68:6
        StorageLive(_5);                 // scope 3 at src\oaes.rs:66:5: 68:6
        StorageLive(_6);                 // scope 3 at src\oaes.rs:66:14: 66:33
        StorageLive(_7);                 // scope 3 at src\oaes.rs:66:17: 66:33
        _8 = CheckedSub(const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])), const 1usize); // scope 3 at src\oaes.rs:66:17: 66:33
        assert(!(_8.1: bool), "attempt to subtract with overflow") -> bb1; // scope 3 at src\oaes.rs:66:17: 66:33
    }

    bb1: {                              
        _7 = (_8.0: usize);              // scope 3 at src\oaes.rs:66:17: 66:33
        _6 = std::ops::Range<usize> { start: const 0usize, end: _7 }; // scope 3 at src\oaes.rs:66:14: 66:33
        StorageDead(_7);                 // scope 3 at src\oaes.rs:66:33: 66:33
        _5 = const std::iter::IntoIterator::into_iter(_6) -> bb2; // scope 3 at src\oaes.rs:66:5: 68:6
    }

    bb2: {                              
        StorageDead(_6);                 // scope 3 at src\oaes.rs:68:6: 68:6
        StorageLive(_9);                 // scope 5 at src\oaes.rs:66:5: 68:6
        _9 = _5;                         // scope 5 at src\oaes.rs:66:5: 68:6
        goto -> bb3;                     // scope 5 at src\oaes.rs:66:5: 68:6
    }

    bb3: {                              
        StorageLive(_11);                // scope 6 at src\oaes.rs:66:5: 68:6
        StorageLive(_12);                // scope 6 at src\oaes.rs:66:5: 68:6
        StorageLive(_13);                // scope 6 at src\oaes.rs:66:5: 68:6
        StorageLive(_14);                // scope 6 at src\oaes.rs:66:5: 68:6
        _14 = &mut _9;                   // scope 6 at src\oaes.rs:66:5: 68:6
        _13 = _14;                       // scope 6 at src\oaes.rs:66:5: 68:6
        _12 = const std::iter::Iterator::next(_13) -> bb4; // scope 6 at src\oaes.rs:66:5: 68:6
    }

    bb4: {                              
        StorageDead(_13);                // scope 6 at src\oaes.rs:68:6: 68:6
        _16 = discriminant(_12);         // scope 8 at src\oaes.rs:66:5: 68:6
        switchInt(_16) -> [0isize: bb5, 1isize: bb7, otherwise: bb6]; // scope 8 at src\oaes.rs:66:5: 68:6
    }

    bb5: {                              
        _4 = ();                         // scope 8 at src\oaes.rs:66:5: 68:6
        StorageDead(_15);                // scope 6 at src\oaes.rs:68:6: 68:6
        StorageDead(_12);                // scope 6 at src\oaes.rs:68:6: 68:6
        StorageDead(_14);                // scope 6 at src\oaes.rs:68:6: 68:6
        StorageDead(_11);                // scope 5 at src\oaes.rs:68:6: 68:6
        StorageDead(_9);                 // scope 3 at src\oaes.rs:68:6: 68:6
        StorageDead(_5);                 // scope 3 at src\oaes.rs:68:6: 68:6
        StorageLive(_31);                // scope 3 at src\oaes.rs:66:5: 68:6
        _31 = _4;                        // scope 3 at src\oaes.rs:66:5: 68:6
        _3 = _31;                        // scope 3 at src\oaes.rs:66:5: 68:6
        StorageDead(_31);                // scope 3 at src\oaes.rs:68:6: 68:6
        StorageDead(_4);                 // scope 1 at src\oaes.rs:68:6: 68:6
        StorageLive(_32);                // scope 1 at src\oaes.rs:69:30: 69:37
        StorageLive(_33);                // scope 1 at src\oaes.rs:69:35: 69:36
        _33 = const 0usize;              // scope 1 at src\oaes.rs:69:35: 69:36
        _34 = Len((*_1));                // scope 1 at src\oaes.rs:69:30: 69:37
        _35 = Lt(_33, _34);              // scope 1 at src\oaes.rs:69:30: 69:37
        assert(_35, "index out of bounds: the len is {} but the index is {}", _34, _33) -> bb11; // scope 1 at src\oaes.rs:69:30: 69:37
    }

    bb6: {                              
        unreachable;                     // scope 0 at src\oaes.rs:73:2: 73:2
    }

    bb7: {                              
        StorageLive(_15);                // scope 8 at src\oaes.rs:66:5: 68:6
        _15 = ((_12 as Some).0: usize);  // scope 8 at src\oaes.rs:66:5: 68:6
        StorageLive(_17);                // scope 8 at src\oaes.rs:66:5: 68:6
        _17 = _15;                       // scope 8 at src\oaes.rs:66:5: 68:6
        _11 = _17;                       // scope 8 at src\oaes.rs:66:5: 68:6
        StorageDead(_17);                // scope 8 at src\oaes.rs:68:6: 68:6
        StorageDead(_15);                // scope 6 at src\oaes.rs:68:6: 68:6
        StorageDead(_12);                // scope 6 at src\oaes.rs:68:6: 68:6
        StorageDead(_14);                // scope 6 at src\oaes.rs:68:6: 68:6
        StorageLive(_18);                // scope 9 at src\oaes.rs:66:9: 66:10
        StorageLive(_19);                // scope 9 at src\oaes.rs:66:5: 68:6
        _19 = _11;                       // scope 9 at src\oaes.rs:66:5: 68:6
        _18 = _19;                       // scope 9 at src\oaes.rs:66:5: 68:6
        StorageDead(_19);                // scope 9 at src\oaes.rs:68:6: 68:6
        StorageLive(_21);                // scope 9 at src\oaes.rs:67:19: 67:30
        StorageLive(_22);                // scope 9 at src\oaes.rs:67:19: 67:30
        StorageLive(_23);                // scope 9 at src\oaes.rs:67:19: 67:23
        StorageLive(_24);                // scope 9 at src\oaes.rs:67:19: 67:23
        _24 = _1;                        // scope 9 at src\oaes.rs:67:19: 67:23
        _23 = _24 as &[u8] (Unsize);     // scope 9 at src\oaes.rs:67:19: 67:23
        StorageDead(_24);                // scope 9 at src\oaes.rs:67:23: 67:23
        StorageLive(_25);                // scope 9 at src\oaes.rs:67:24: 67:29
        StorageLive(_26);                // scope 9 at src\oaes.rs:67:24: 67:25
        _26 = _18;                       // scope 9 at src\oaes.rs:67:24: 67:25
        _27 = CheckedAdd(_26, const 1usize); // scope 9 at src\oaes.rs:67:24: 67:29
        assert(!(_27.1: bool), "attempt to add with overflow") -> bb8; // scope 9 at src\oaes.rs:67:24: 67:29
    }

    bb8: {                              
        _25 = (_27.0: usize);            // scope 9 at src\oaes.rs:67:24: 67:29
        StorageDead(_26);                // scope 9 at src\oaes.rs:67:29: 67:29
        _22 = const std::ops::Index::index(_23, _25) -> bb9; // scope 9 at src\oaes.rs:67:19: 67:30
    }

    bb9: {                              
        _21 = (*_22);                    // scope 9 at src\oaes.rs:67:19: 67:30
        StorageDead(_25);                // scope 9 at src\oaes.rs:67:30: 67:30
        StorageDead(_23);                // scope 9 at src\oaes.rs:67:30: 67:30
        StorageLive(_28);                // scope 9 at src\oaes.rs:67:14: 67:15
        _28 = _18;                       // scope 9 at src\oaes.rs:67:14: 67:15
        _29 = Len(_2);                   // scope 9 at src\oaes.rs:67:9: 67:16
        _30 = Lt(_28, _29);              // scope 9 at src\oaes.rs:67:9: 67:16
        assert(_30, "index out of bounds: the len is {} but the index is {}", _29, _28) -> bb10; // scope 9 at src\oaes.rs:67:9: 67:16
    }

    bb10: {                             
        _2[_28] = _21;                   // scope 9 at src\oaes.rs:67:9: 67:30
        StorageDead(_21);                // scope 9 at src\oaes.rs:67:30: 67:30
        StorageDead(_22);                // scope 9 at src\oaes.rs:67:31: 67:31
        _20 = ();                        // scope 9 at src\oaes.rs:66:34: 68:6
        _10 = ();                        // scope 5 at src\oaes.rs:66:5: 68:6
        StorageDead(_18);                // scope 6 at src\oaes.rs:68:6: 68:6
        StorageDead(_11);                // scope 5 at src\oaes.rs:68:6: 68:6
        goto -> bb3;                     // scope 5 at src\oaes.rs:66:5: 68:6
    }

    bb11: {                             
        _32 = (*_1)[_33];                // scope 1 at src\oaes.rs:69:30: 69:37
        StorageLive(_36);                // scope 1 at src\oaes.rs:69:5: 69:27
        StorageLive(_37);                // scope 1 at src\oaes.rs:69:5: 69:9
        StorageLive(_38);                // scope 1 at src\oaes.rs:69:5: 69:9
        _38 = &mut _2;                   // scope 1 at src\oaes.rs:69:5: 69:9
        _37 = _38 as &mut [u8] (Unsize); // scope 1 at src\oaes.rs:69:5: 69:9
        StorageDead(_38);                // scope 1 at src\oaes.rs:69:9: 69:9
        StorageLive(_39);                // scope 1 at src\oaes.rs:69:10: 69:26
        _40 = CheckedSub(const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])), const 1usize); // scope 1 at src\oaes.rs:69:10: 69:26
        assert(!(_40.1: bool), "attempt to subtract with overflow") -> bb12; // scope 1 at src\oaes.rs:69:10: 69:26
    }

    bb12: {                             
        _39 = (_40.0: usize);            // scope 1 at src\oaes.rs:69:10: 69:26
        _36 = const std::ops::IndexMut::index_mut(_37, _39) -> bb13; // scope 1 at src\oaes.rs:69:5: 69:27
    }

    bb13: {                             
        StorageDead(_39);                // scope 1 at src\oaes.rs:69:27: 69:27
        StorageDead(_37);                // scope 1 at src\oaes.rs:69:27: 69:27
        (*_36) = _32;                    // scope 1 at src\oaes.rs:69:5: 69:37
        StorageDead(_32);                // scope 1 at src\oaes.rs:69:37: 69:37
        StorageDead(_36);                // scope 1 at src\oaes.rs:69:38: 69:38
        StorageLive(_41);                // scope 11 at src\oaes.rs:70:5: 72:6
        StorageLive(_42);                // scope 11 at src\oaes.rs:70:5: 72:6
        StorageLive(_43);                // scope 11 at src\oaes.rs:70:14: 70:29
        _43 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])) }; // scope 11 at src\oaes.rs:70:14: 70:29
        _42 = const std::iter::IntoIterator::into_iter(_43) -> bb14; // scope 11 at src\oaes.rs:70:5: 72:6
    }

    bb14: {                             
        StorageDead(_43);                // scope 11 at src\oaes.rs:72:6: 72:6
        StorageLive(_44);                // scope 13 at src\oaes.rs:70:5: 72:6
        _44 = _42;                       // scope 13 at src\oaes.rs:70:5: 72:6
        goto -> bb15;                    // scope 13 at src\oaes.rs:70:5: 72:6
    }

    bb15: {                             
        StorageLive(_45);                // scope 14 at src\oaes.rs:70:5: 72:6
        StorageLive(_46);                // scope 14 at src\oaes.rs:70:5: 72:6
        StorageLive(_47);                // scope 14 at src\oaes.rs:70:5: 72:6
        StorageLive(_48);                // scope 14 at src\oaes.rs:70:5: 72:6
        _48 = &mut _44;                  // scope 14 at src\oaes.rs:70:5: 72:6
        _47 = _48;                       // scope 14 at src\oaes.rs:70:5: 72:6
        _46 = const std::iter::Iterator::next(_47) -> bb16; // scope 14 at src\oaes.rs:70:5: 72:6
    }

    bb16: {                             
        StorageDead(_47);                // scope 14 at src\oaes.rs:72:6: 72:6
        _50 = discriminant(_46);         // scope 16 at src\oaes.rs:70:5: 72:6
        switchInt(_50) -> [0isize: bb17, 1isize: bb18, otherwise: bb6]; // scope 16 at src\oaes.rs:70:5: 72:6
    }

    bb17: {                             
        _41 = ();                        // scope 16 at src\oaes.rs:70:5: 72:6
        StorageDead(_49);                // scope 14 at src\oaes.rs:72:6: 72:6
        StorageDead(_46);                // scope 14 at src\oaes.rs:72:6: 72:6
        StorageDead(_48);                // scope 14 at src\oaes.rs:72:6: 72:6
        StorageDead(_45);                // scope 13 at src\oaes.rs:72:6: 72:6
        StorageDead(_44);                // scope 11 at src\oaes.rs:72:6: 72:6
        StorageDead(_42);                // scope 11 at src\oaes.rs:72:6: 72:6
        StorageLive(_62);                // scope 11 at src\oaes.rs:70:5: 72:6
        _62 = _41;                       // scope 11 at src\oaes.rs:70:5: 72:6
        _0 = _62;                        // scope 11 at src\oaes.rs:70:5: 72:6
        StorageDead(_62);                // scope 11 at src\oaes.rs:72:6: 72:6
        StorageDead(_41);                // scope 1 at src\oaes.rs:72:6: 72:6
        StorageDead(_2);                 // scope 0 at src\oaes.rs:73:2: 73:2
        return;                          // scope 0 at src\oaes.rs:73:2: 73:2
    }

    bb18: {                             
        StorageLive(_49);                // scope 16 at src\oaes.rs:70:5: 72:6
        _49 = ((_46 as Some).0: usize);  // scope 16 at src\oaes.rs:70:5: 72:6
        StorageLive(_51);                // scope 16 at src\oaes.rs:70:5: 72:6
        _51 = _49;                       // scope 16 at src\oaes.rs:70:5: 72:6
        _45 = _51;                       // scope 16 at src\oaes.rs:70:5: 72:6
        StorageDead(_51);                // scope 16 at src\oaes.rs:72:6: 72:6
        StorageDead(_49);                // scope 14 at src\oaes.rs:72:6: 72:6
        StorageDead(_46);                // scope 14 at src\oaes.rs:72:6: 72:6
        StorageDead(_48);                // scope 14 at src\oaes.rs:72:6: 72:6
        StorageLive(_52);                // scope 17 at src\oaes.rs:70:9: 70:10
        StorageLive(_53);                // scope 17 at src\oaes.rs:70:5: 72:6
        _53 = _45;                       // scope 17 at src\oaes.rs:70:5: 72:6
        _52 = _53;                       // scope 17 at src\oaes.rs:70:5: 72:6
        StorageDead(_53);                // scope 17 at src\oaes.rs:72:6: 72:6
        StorageLive(_55);                // scope 17 at src\oaes.rs:71:19: 71:26
        StorageLive(_56);                // scope 17 at src\oaes.rs:71:24: 71:25
        _56 = _52;                       // scope 17 at src\oaes.rs:71:24: 71:25
        _57 = Len(_2);                   // scope 17 at src\oaes.rs:71:19: 71:26
        _58 = Lt(_56, _57);              // scope 17 at src\oaes.rs:71:19: 71:26
        assert(_58, "index out of bounds: the len is {} but the index is {}", _57, _56) -> bb19; // scope 17 at src\oaes.rs:71:19: 71:26
    }

    bb19: {                             
        _55 = _2[_56];                   // scope 17 at src\oaes.rs:71:19: 71:26
        StorageLive(_59);                // scope 17 at src\oaes.rs:71:14: 71:15
        _59 = _52;                       // scope 17 at src\oaes.rs:71:14: 71:15
        _60 = Len((*_1));                // scope 17 at src\oaes.rs:71:9: 71:16
        _61 = Lt(_59, _60);              // scope 17 at src\oaes.rs:71:9: 71:16
        assert(_61, "index out of bounds: the len is {} but the index is {}", _60, _59) -> bb20; // scope 17 at src\oaes.rs:71:9: 71:16
    }

    bb20: {                             
        (*_1)[_59] = _55;                // scope 17 at src\oaes.rs:71:9: 71:26
        StorageDead(_55);                // scope 17 at src\oaes.rs:71:26: 71:26
        _54 = ();                        // scope 17 at src\oaes.rs:70:30: 72:6
        _10 = ();                        // scope 13 at src\oaes.rs:70:5: 72:6
        StorageDead(_52);                // scope 14 at src\oaes.rs:72:6: 72:6
        StorageDead(_45);                // scope 13 at src\oaes.rs:72:6: 72:6
        goto -> bb15;                    // scope 13 at src\oaes.rs:70:5: 72:6
    }
}

const oaes::OAES_COL_LEN: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 4usize;               // scope 0 at src\oaes.rs:15:35: 15:36
        return;                          // scope 0 at src\oaes.rs:15:1: 15:37
    }
}

fn keccak::keccak(_1: &[u8], _2: &mut [u8]) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let mut _3: usize;               // "in_len" in scope 1 at src\keccak.rs:110:10: 110:20
        let _4: usize;                   // "md_len" in scope 1 at src\keccak.rs:110:22: 110:28
        scope 3 {
            let mut _10: [u64; 25];      // "st" in scope 3 at src\keccak.rs:112:9: 112:15
            scope 5 {
            }
            scope 6 {
                let mut _11: [u8; 144];  // "temp" in scope 6 at src\keccak.rs:113:9: 113:17
                scope 8 {
                    let _12: *const u8;  // "st8" in scope 8 at src\keccak.rs:115:9: 115:12
                    scope 10 {
                        let _16: *const u64; // "input64" in scope 10 at src\keccak.rs:116:9: 116:16
                        scope 12 {
                            let _19: *const u64; // "temp64" in scope 12 at src\keccak.rs:117:9: 117:15
                            scope 14 {
                                let _23: usize; // "rsiz" in scope 14 at src\keccak.rs:120:9: 120:13
                                scope 16 {
                                    let _31: usize; // "rsizw" in scope 16 at src\keccak.rs:126:9: 126:14
                                    scope 18 {
                                        let mut _34: usize; // "in_i" in scope 18 at src\keccak.rs:129:9: 129:17
                                        scope 20 {
                                            let _41: (); // "_result" in scope 20 at src\keccak.rs:131:9: 135:10
                                            scope 22 {
                                                let mut _45: std::ops::Range<usize>; // "iter" in scope 22 at src\keccak.rs:131:9: 135:10
                                                scope 23 {
                                                    let mut _46: usize; // "__next" in scope 23 at src\keccak.rs:131:9: 135:10
                                                    scope 25 {
                                                        let _50: usize; // "val" in scope 25 at src\keccak.rs:131:9: 135:10
                                                    }
                                                    scope 26 {
                                                        let _53: usize; // "st_i" in scope 26 at src\keccak.rs:131:13: 131:17
                                                        scope 28 {
                                                        }
                                                    }
                                                    scope 27 {
                                                    }
                                                }
                                                scope 24 {
                                                }
                                            }
                                        }
                                        scope 21 {
                                        }
                                        scope 29 {
                                            let _76: (); // "_result" in scope 29 at src\keccak.rs:141:5: 141:47
                                            scope 31 {
                                                let mut _80: std::ops::Range<usize>; // "iter" in scope 31 at src\keccak.rs:141:5: 141:47
                                                scope 32 {
                                                    let mut _81: usize; // "__next" in scope 32 at src\keccak.rs:141:5: 141:47
                                                    scope 34 {
                                                        let _85: usize; // "val" in scope 34 at src\keccak.rs:141:5: 141:47
                                                    }
                                                    scope 35 {
                                                        let _88: usize; // "i" in scope 35 at src\keccak.rs:141:9: 141:10
                                                    }
                                                    scope 36 {
                                                    }
                                                }
                                                scope 33 {
                                                }
                                            }
                                        }
                                        scope 30 {
                                        }
                                        scope 37 {
                                            let _103: (); // "_result" in scope 37 at src\keccak.rs:143:5: 143:66
                                            scope 39 {
                                                let mut _112: std::ops::Range<usize>; // "iter" in scope 39 at src\keccak.rs:143:5: 143:66
                                                scope 40 {
                                                    let mut _113: usize; // "__next" in scope 40 at src\keccak.rs:143:5: 143:66
                                                    scope 42 {
                                                        let _117: usize; // "val" in scope 42 at src\keccak.rs:143:5: 143:66
                                                    }
                                                    scope 43 {
                                                        let _120: usize; // "i" in scope 43 at src\keccak.rs:143:9: 143:10
                                                    }
                                                    scope 44 {
                                                    }
                                                }
                                                scope 41 {
                                                }
                                            }
                                        }
                                        scope 38 {
                                        }
                                        scope 45 {
                                            let _140: (); // "_result" in scope 45 at src\keccak.rs:145:5: 147:6
                                            scope 47 {
                                                let mut _144: std::ops::Range<usize>; // "iter" in scope 47 at src\keccak.rs:145:5: 147:6
                                                scope 48 {
                                                    let mut _145: usize; // "__next" in scope 48 at src\keccak.rs:145:5: 147:6
                                                    scope 50 {
                                                        let _149: usize; // "val" in scope 50 at src\keccak.rs:145:5: 147:6
                                                    }
                                                    scope 51 {
                                                        let _152: usize; // "i" in scope 51 at src\keccak.rs:145:9: 145:10
                                                        scope 53 {
                                                        }
                                                    }
                                                    scope 52 {
                                                    }
                                                }
                                                scope 49 {
                                                }
                                            }
                                        }
                                        scope 46 {
                                        }
                                        scope 54 {
                                            let _168: (); // "_result" in scope 54 at src\keccak.rs:151:5: 153:6
                                            scope 56 {
                                                let mut _172: std::ops::Range<usize>; // "iter" in scope 56 at src\keccak.rs:151:5: 153:6
                                                scope 57 {
                                                    let mut _173: usize; // "__next" in scope 57 at src\keccak.rs:151:5: 153:6
                                                    scope 59 {
                                                        let _177: usize; // "val" in scope 59 at src\keccak.rs:151:5: 153:6
                                                    }
                                                    scope 60 {
                                                        let _180: usize; // "i" in scope 60 at src\keccak.rs:151:9: 151:10
                                                        scope 62 {
                                                        }
                                                    }
                                                    scope 61 {
                                                    }
                                                }
                                                scope 58 {
                                                }
                                            }
                                        }
                                        scope 55 {
                                        }
                                    }
                                    scope 19 {
                                    }
                                }
                                scope 17 {
                                }
                            }
                            scope 15 {
                            }
                        }
                        scope 13 {
                        }
                    }
                    scope 11 {
                    }
                }
                scope 9 {
                }
            }
            scope 7 {
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }
    let mut _5: (usize, usize);
    let mut _6: usize;
    let mut _7: &[u8];
    let mut _8: usize;
    let mut _9: &[u8];
    let mut _13: *const u64;
    let mut _14: &[u64];
    let mut _15: &[u64; 25];
    let mut _17: *const u8;
    let mut _18: &[u8];
    let mut _20: *const u8;
    let mut _21: &[u8];
    let mut _22: &[u8; 144];
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: (usize, bool);
    let mut _30: (usize, bool);
    let mut _32: usize;
    let mut _33: bool;
    let mut _35: ();
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: ();
    let mut _40: ();
    let mut _42: std::ops::Range<usize>;
    let mut _43: std::ops::Range<usize>;
    let mut _44: usize;
    let mut _47: std::option::Option<usize>;
    let mut _48: &mut std::ops::Range<usize>;
    let mut _49: &mut std::ops::Range<usize>;
    let mut _51: isize;
    let mut _52: usize;
    let mut _54: usize;
    let mut _55: ();
    let mut _56: u64;
    let mut _57: *const u64;
    let mut _58: *const u64;
    let mut _59: isize;
    let mut _60: usize;
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: (usize, bool);
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: bool;
    let mut _67: ();
    let mut _68: ();
    let mut _69: &mut [u64; 25];
    let mut _70: &mut [u64; 25];
    let mut _71: usize;
    let mut _72: (usize, bool);
    let mut _73: usize;
    let mut _74: (usize, bool);
    let mut _75: ();
    let mut _77: std::ops::Range<usize>;
    let mut _78: std::ops::Range<usize>;
    let mut _79: usize;
    let mut _82: std::option::Option<usize>;
    let mut _83: &mut std::ops::Range<usize>;
    let mut _84: &mut std::ops::Range<usize>;
    let mut _86: isize;
    let mut _87: usize;
    let mut _89: usize;
    let mut _90: ();
    let mut _91: u8;
    let mut _92: usize;
    let mut _93: usize;
    let mut _94: bool;
    let mut _95: usize;
    let mut _96: usize;
    let mut _97: bool;
    let mut _98: ();
    let mut _99: usize;
    let mut _100: usize;
    let mut _101: bool;
    let mut _102: ();
    let mut _104: std::ops::Range<usize>;
    let mut _105: std::ops::Range<usize>;
    let mut _106: usize;
    let mut _107: usize;
    let mut _108: usize;
    let mut _109: usize;
    let mut _110: (usize, bool);
    let mut _111: (usize, bool);
    let mut _114: std::option::Option<usize>;
    let mut _115: &mut std::ops::Range<usize>;
    let mut _116: &mut std::ops::Range<usize>;
    let mut _118: isize;
    let mut _119: usize;
    let mut _121: usize;
    let mut _122: ();
    let mut _123: &mut u8;
    let mut _124: &mut [u8];
    let mut _125: &mut [u8; 144];
    let mut _126: usize;
    let mut _127: usize;
    let mut _128: usize;
    let mut _129: usize;
    let mut _130: (usize, bool);
    let mut _131: (usize, bool);
    let mut _132: ();
    let mut _133: &mut u8;
    let mut _134: &mut [u8];
    let mut _135: &mut [u8; 144];
    let mut _136: usize;
    let mut _137: usize;
    let mut _138: (usize, bool);
    let mut _139: ();
    let mut _141: std::ops::Range<usize>;
    let mut _142: std::ops::Range<usize>;
    let mut _143: usize;
    let mut _146: std::option::Option<usize>;
    let mut _147: &mut std::ops::Range<usize>;
    let mut _148: &mut std::ops::Range<usize>;
    let mut _150: isize;
    let mut _151: usize;
    let mut _153: usize;
    let mut _154: ();
    let mut _155: u64;
    let mut _156: u64;
    let mut _157: *const u64;
    let mut _158: *const u64;
    let mut _159: isize;
    let mut _160: usize;
    let mut _161: usize;
    let mut _162: usize;
    let mut _163: bool;
    let mut _164: ();
    let mut _165: ();
    let mut _166: &mut [u64; 25];
    let mut _167: &mut [u64; 25];
    let mut _169: std::ops::Range<usize>;
    let mut _170: std::ops::Range<usize>;
    let mut _171: usize;
    let mut _174: std::option::Option<usize>;
    let mut _175: &mut std::ops::Range<usize>;
    let mut _176: &mut std::ops::Range<usize>;
    let mut _178: isize;
    let mut _179: usize;
    let mut _181: usize;
    let mut _182: ();
    let mut _183: u8;
    let mut _184: u8;
    let mut _185: *const u8;
    let mut _186: *const u8;
    let mut _187: isize;
    let mut _188: usize;
    let mut _189: usize;
    let mut _190: usize;
    let mut _191: bool;
    let mut _192: ();

    bb0: {                              
        StorageLive(_5);                 // scope 1 at src\keccak.rs:110:32: 110:55
        StorageLive(_6);                 // scope 1 at src\keccak.rs:110:33: 110:44
        StorageLive(_7);                 // scope 1 at src\keccak.rs:110:33: 110:38
        _7 = _1;                         // scope 1 at src\keccak.rs:110:33: 110:38
        _6 = const std::slice::<impl [T]>::len(_7) -> bb1; // scope 1 at src\keccak.rs:110:33: 110:44
    }

    bb1: {                              
        StorageDead(_7);                 // scope 1 at src\keccak.rs:110:44: 110:44
        StorageLive(_8);                 // scope 1 at src\keccak.rs:110:46: 110:54
        StorageLive(_9);                 // scope 1 at src\keccak.rs:110:46: 110:48
        _9 = _2;                         // scope 1 at src\keccak.rs:110:46: 110:48
        _8 = const std::slice::<impl [T]>::len(_9) -> bb2; // scope 1 at src\keccak.rs:110:46: 110:54
    }

    bb2: {                              
        StorageDead(_9);                 // scope 1 at src\keccak.rs:110:54: 110:54
        _5 = (_6, _8);                   // scope 1 at src\keccak.rs:110:32: 110:55
        StorageDead(_8);                 // scope 1 at src\keccak.rs:110:55: 110:55
        StorageDead(_6);                 // scope 1 at src\keccak.rs:110:55: 110:55
        StorageLive(_3);                 // scope 1 at src\keccak.rs:110:10: 110:20
        _3 = (_5.0: usize);              // scope 1 at src\keccak.rs:110:10: 110:20
        StorageLive(_4);                 // scope 1 at src\keccak.rs:110:22: 110:28
        _4 = (_5.1: usize);              // scope 1 at src\keccak.rs:110:22: 110:28
        StorageDead(_5);                 // scope 1 at src\keccak.rs:110:56: 110:56
        StorageLive(_10);                // scope 3 at src\keccak.rs:112:9: 112:15
        _10 = const std::mem::zeroed() -> bb3; // scope 5 at src\keccak.rs:112:27: 112:50
    }

    bb3: {                              
        StorageLive(_11);                // scope 6 at src\keccak.rs:113:9: 113:17
        _11 = [const 0u8; Us64(144)];    // scope 6 at src\keccak.rs:113:20: 113:30
        StorageLive(_12);                // scope 8 at src\keccak.rs:115:9: 115:12
        StorageLive(_13);                // scope 8 at src\keccak.rs:115:15: 115:26
        StorageLive(_14);                // scope 8 at src\keccak.rs:115:15: 115:17
        StorageLive(_15);                // scope 8 at src\keccak.rs:115:15: 115:17
        _15 = &_10;                      // scope 8 at src\keccak.rs:115:15: 115:17
        _14 = _15 as &[u64] (Unsize);    // scope 8 at src\keccak.rs:115:15: 115:17
        StorageDead(_15);                // scope 8 at src\keccak.rs:115:17: 115:17
        _13 = const std::slice::<impl [T]>::as_ptr(_14) -> bb4; // scope 8 at src\keccak.rs:115:15: 115:26
    }

    bb4: {                              
        StorageDead(_14);                // scope 8 at src\keccak.rs:115:26: 115:26
        _12 = _13 as *const u8 (Misc);   // scope 8 at src\keccak.rs:115:15: 115:39
        StorageDead(_13);                // scope 8 at src\keccak.rs:115:39: 115:39
        StorageLive(_16);                // scope 10 at src\keccak.rs:116:9: 116:16
        StorageLive(_17);                // scope 10 at src\keccak.rs:116:19: 116:33
        StorageLive(_18);                // scope 10 at src\keccak.rs:116:19: 116:24
        _18 = _1;                        // scope 10 at src\keccak.rs:116:19: 116:24
        _17 = const std::slice::<impl [T]>::as_ptr(_18) -> bb5; // scope 10 at src\keccak.rs:116:19: 116:33
    }

    bb5: {                              
        StorageDead(_18);                // scope 10 at src\keccak.rs:116:33: 116:33
        _16 = _17 as *const u64 (Misc);  // scope 10 at src\keccak.rs:116:19: 116:47
        StorageDead(_17);                // scope 10 at src\keccak.rs:116:47: 116:47
        StorageLive(_19);                // scope 12 at src\keccak.rs:117:9: 117:15
        StorageLive(_20);                // scope 12 at src\keccak.rs:117:18: 117:31
        StorageLive(_21);                // scope 12 at src\keccak.rs:117:18: 117:22
        StorageLive(_22);                // scope 12 at src\keccak.rs:117:18: 117:22
        _22 = &_11;                      // scope 12 at src\keccak.rs:117:18: 117:22
        _21 = _22 as &[u8] (Unsize);     // scope 12 at src\keccak.rs:117:18: 117:22
        StorageDead(_22);                // scope 12 at src\keccak.rs:117:22: 117:22
        _20 = const std::slice::<impl [T]>::as_ptr(_21) -> bb6; // scope 12 at src\keccak.rs:117:18: 117:31
    }

    bb6: {                              
        StorageDead(_21);                // scope 12 at src\keccak.rs:117:31: 117:31
        _19 = _20 as *const u64 (Misc);  // scope 12 at src\keccak.rs:117:18: 117:45
        StorageDead(_20);                // scope 12 at src\keccak.rs:117:45: 117:45
        StorageLive(_23);                // scope 14 at src\keccak.rs:120:9: 120:13
        StorageLive(_24);                // scope 14 at src\keccak.rs:121:12: 121:46
        StorageLive(_25);                // scope 14 at src\keccak.rs:121:12: 121:36
        _25 = const std::mem::size_of() -> bb7; // scope 14 at src\keccak.rs:121:12: 121:36
    }

    bb7: {                              
        StorageLive(_26);                // scope 14 at src\keccak.rs:121:40: 121:46
        _26 = _4;                        // scope 14 at src\keccak.rs:121:40: 121:46
        _24 = Eq(_25, _26);              // scope 14 at src\keccak.rs:121:12: 121:46
        StorageDead(_26);                // scope 14 at src\keccak.rs:121:46: 121:46
        StorageDead(_25);                // scope 14 at src\keccak.rs:121:46: 121:46
        switchInt(_24) -> [0u8: bb9, otherwise: bb8]; // scope 14 at src\keccak.rs:121:9: 125:10
    }

    bb8: {                              
        _23 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:8) => cnminer[5424]::keccak[0]::HASH_DATA_AREA[0] }, Slice([])); // scope 14 at src\keccak.rs:122:13: 122:27
        goto -> bb12;                    // scope 14 at src\keccak.rs:121:9: 125:10
    }

    bb9: {                              
        StorageLive(_27);                // scope 14 at src\keccak.rs:124:19: 124:31
        StorageLive(_28);                // scope 14 at src\keccak.rs:124:24: 124:30
        _28 = _4;                        // scope 14 at src\keccak.rs:124:24: 124:30
        _29 = CheckedMul(const 2usize, _28); // scope 14 at src\keccak.rs:124:19: 124:31
        assert(!(_29.1: bool), "attempt to multiply with overflow") -> bb10; // scope 14 at src\keccak.rs:124:19: 124:31
    }

    bb10: {                             
        _27 = (_29.0: usize);            // scope 14 at src\keccak.rs:124:19: 124:31
        StorageDead(_28);                // scope 14 at src\keccak.rs:124:31: 124:31
        _30 = CheckedSub(const 200usize, _27); // scope 14 at src\keccak.rs:124:13: 124:31
        assert(!(_30.1: bool), "attempt to subtract with overflow") -> bb11; // scope 14 at src\keccak.rs:124:13: 124:31
    }

    bb11: {                             
        _23 = (_30.0: usize);            // scope 14 at src\keccak.rs:124:13: 124:31
        StorageDead(_27);                // scope 14 at src\keccak.rs:124:31: 124:31
        goto -> bb12;                    // scope 14 at src\keccak.rs:121:9: 125:10
    }

    bb12: {                             
        StorageDead(_24);                // scope 14 at src\keccak.rs:125:10: 125:10
        StorageLive(_31);                // scope 16 at src\keccak.rs:126:9: 126:14
        StorageLive(_32);                // scope 16 at src\keccak.rs:126:17: 126:21
        _32 = _23;                       // scope 16 at src\keccak.rs:126:17: 126:21
        _33 = Eq(const 8usize, const 0usize); // scope 16 at src\keccak.rs:126:17: 126:25
        assert(!_33, "attempt to divide by zero") -> bb13; // scope 16 at src\keccak.rs:126:17: 126:25
    }

    bb13: {                             
        _31 = Div(_32, const 8usize);    // scope 16 at src\keccak.rs:126:17: 126:25
        StorageDead(_32);                // scope 16 at src\keccak.rs:126:25: 126:25
        StorageLive(_34);                // scope 18 at src\keccak.rs:129:9: 129:17
        _34 = const 0usize;              // scope 18 at src\keccak.rs:129:20: 129:21
        goto -> bb14;                    // scope 18 at src\keccak.rs:130:5: 138:6
    }

    bb14: {                             
        StorageLive(_36);                // scope 18 at src\keccak.rs:130:11: 130:25
        StorageLive(_37);                // scope 18 at src\keccak.rs:130:11: 130:17
        _37 = _3;                        // scope 18 at src\keccak.rs:130:11: 130:17
        StorageLive(_38);                // scope 18 at src\keccak.rs:130:21: 130:25
        _38 = _23;                       // scope 18 at src\keccak.rs:130:21: 130:25
        _36 = Ge(_37, _38);              // scope 18 at src\keccak.rs:130:11: 130:25
        StorageDead(_38);                // scope 18 at src\keccak.rs:130:25: 130:25
        StorageDead(_37);                // scope 18 at src\keccak.rs:130:25: 130:25
        switchInt(_36) -> [0u8: bb15, otherwise: bb16]; // scope 18 at src\keccak.rs:130:5: 138:6
    }

    bb15: {                             
        _35 = ();                        // scope 18 at src\keccak.rs:130:5: 138:6
        StorageDead(_36);                // scope 18 at src\keccak.rs:138:6: 138:6
        StorageLive(_76);                // scope 29 at src\keccak.rs:141:5: 141:47
        StorageLive(_77);                // scope 29 at src\keccak.rs:141:5: 141:47
        StorageLive(_78);                // scope 29 at src\keccak.rs:141:14: 141:23
        StorageLive(_79);                // scope 29 at src\keccak.rs:141:17: 141:23
        _79 = _3;                        // scope 29 at src\keccak.rs:141:17: 141:23
        _78 = std::ops::Range<usize> { start: const 0usize, end: _79 }; // scope 29 at src\keccak.rs:141:14: 141:23
        StorageDead(_79);                // scope 29 at src\keccak.rs:141:23: 141:23
        _77 = const std::iter::IntoIterator::into_iter(_78) -> bb29; // scope 29 at src\keccak.rs:141:5: 141:47
    }

    bb16: {                             
        StorageLive(_41);                // scope 20 at src\keccak.rs:131:9: 135:10
        StorageLive(_42);                // scope 20 at src\keccak.rs:131:9: 135:10
        StorageLive(_43);                // scope 20 at src\keccak.rs:131:21: 131:29
        StorageLive(_44);                // scope 20 at src\keccak.rs:131:24: 131:29
        _44 = _31;                       // scope 20 at src\keccak.rs:131:24: 131:29
        _43 = std::ops::Range<usize> { start: const 0usize, end: _44 }; // scope 20 at src\keccak.rs:131:21: 131:29
        StorageDead(_44);                // scope 20 at src\keccak.rs:131:29: 131:29
        _42 = const std::iter::IntoIterator::into_iter(_43) -> bb17; // scope 20 at src\keccak.rs:131:9: 135:10
    }

    bb17: {                             
        StorageDead(_43);                // scope 20 at src\keccak.rs:135:10: 135:10
        StorageLive(_45);                // scope 22 at src\keccak.rs:131:9: 135:10
        _45 = _42;                       // scope 22 at src\keccak.rs:131:9: 135:10
        goto -> bb18;                    // scope 22 at src\keccak.rs:131:9: 135:10
    }

    bb18: {                             
        StorageLive(_46);                // scope 23 at src\keccak.rs:131:9: 135:10
        StorageLive(_47);                // scope 23 at src\keccak.rs:131:9: 135:10
        StorageLive(_48);                // scope 23 at src\keccak.rs:131:9: 135:10
        StorageLive(_49);                // scope 23 at src\keccak.rs:131:9: 135:10
        _49 = &mut _45;                  // scope 23 at src\keccak.rs:131:9: 135:10
        _48 = _49;                       // scope 23 at src\keccak.rs:131:9: 135:10
        _47 = const std::iter::Iterator::next(_48) -> bb19; // scope 23 at src\keccak.rs:131:9: 135:10
    }

    bb19: {                             
        StorageDead(_48);                // scope 23 at src\keccak.rs:135:10: 135:10
        _51 = discriminant(_47);         // scope 25 at src\keccak.rs:131:9: 135:10
        switchInt(_51) -> [0isize: bb20, 1isize: bb22, otherwise: bb21]; // scope 25 at src\keccak.rs:131:9: 135:10
    }

    bb20: {                             
        _41 = ();                        // scope 25 at src\keccak.rs:131:9: 135:10
        StorageDead(_50);                // scope 23 at src\keccak.rs:135:10: 135:10
        StorageDead(_47);                // scope 23 at src\keccak.rs:135:10: 135:10
        StorageDead(_49);                // scope 23 at src\keccak.rs:135:10: 135:10
        StorageDead(_46);                // scope 22 at src\keccak.rs:135:10: 135:10
        StorageDead(_45);                // scope 20 at src\keccak.rs:135:10: 135:10
        StorageDead(_42);                // scope 20 at src\keccak.rs:135:10: 135:10
        StorageLive(_67);                // scope 20 at src\keccak.rs:131:9: 135:10
        _67 = _41;                       // scope 20 at src\keccak.rs:131:9: 135:10
        _40 = _67;                       // scope 20 at src\keccak.rs:131:9: 135:10
        StorageDead(_67);                // scope 20 at src\keccak.rs:135:10: 135:10
        StorageDead(_41);                // scope 18 at src\keccak.rs:135:10: 135:10
        StorageLive(_69);                // scope 18 at src\keccak.rs:136:17: 136:24
        StorageLive(_70);                // scope 18 at src\keccak.rs:136:17: 136:24
        _70 = &mut _10;                  // scope 18 at src\keccak.rs:136:17: 136:24
        _69 = _70;                       // scope 18 at src\keccak.rs:136:17: 136:24
        _68 = const keccak::keccakf(_69, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:9) => cnminer[5424]::keccak[0]::KECCAK_ROUNDS[0] }, Slice([]))) -> bb26; // scope 18 at src\keccak.rs:136:9: 136:40
    }

    bb21: {                             
        unreachable;                     // scope 0 at src\keccak.rs:154:2: 154:2
    }

    bb22: {                             
        StorageLive(_50);                // scope 25 at src\keccak.rs:131:9: 135:10
        _50 = ((_47 as Some).0: usize);  // scope 25 at src\keccak.rs:131:9: 135:10
        StorageLive(_52);                // scope 25 at src\keccak.rs:131:9: 135:10
        _52 = _50;                       // scope 25 at src\keccak.rs:131:9: 135:10
        _46 = _52;                       // scope 25 at src\keccak.rs:131:9: 135:10
        StorageDead(_52);                // scope 25 at src\keccak.rs:135:10: 135:10
        StorageDead(_50);                // scope 23 at src\keccak.rs:135:10: 135:10
        StorageDead(_47);                // scope 23 at src\keccak.rs:135:10: 135:10
        StorageDead(_49);                // scope 23 at src\keccak.rs:135:10: 135:10
        StorageLive(_53);                // scope 26 at src\keccak.rs:131:13: 131:17
        StorageLive(_54);                // scope 26 at src\keccak.rs:131:9: 135:10
        _54 = _46;                       // scope 26 at src\keccak.rs:131:9: 135:10
        _53 = _54;                       // scope 26 at src\keccak.rs:131:9: 135:10
        StorageDead(_54);                // scope 26 at src\keccak.rs:135:10: 135:10
        StorageLive(_56);                // scope 28 at src\keccak.rs:133:29: 133:68
        StorageLive(_57);                // scope 28 at src\keccak.rs:133:30: 133:68
        StorageLive(_58);                // scope 28 at src\keccak.rs:133:30: 133:37
        _58 = _16;                       // scope 28 at src\keccak.rs:133:30: 133:37
        StorageLive(_59);                // scope 28 at src\keccak.rs:133:45: 133:67
        StorageLive(_60);                // scope 28 at src\keccak.rs:133:45: 133:58
        StorageLive(_61);                // scope 28 at src\keccak.rs:133:46: 133:50
        _61 = _34;                       // scope 28 at src\keccak.rs:133:46: 133:50
        StorageLive(_62);                // scope 28 at src\keccak.rs:133:53: 133:57
        _62 = _53;                       // scope 28 at src\keccak.rs:133:53: 133:57
        _63 = CheckedAdd(_61, _62);      // scope 28 at src\keccak.rs:133:45: 133:58
        assert(!(_63.1: bool), "attempt to add with overflow") -> bb23; // scope 28 at src\keccak.rs:133:45: 133:58
    }

    bb23: {                             
        _60 = (_63.0: usize);            // scope 28 at src\keccak.rs:133:45: 133:58
        StorageDead(_62);                // scope 28 at src\keccak.rs:133:58: 133:58
        StorageDead(_61);                // scope 28 at src\keccak.rs:133:58: 133:58
        _59 = _60 as isize (Misc);       // scope 28 at src\keccak.rs:133:45: 133:67
        StorageDead(_60);                // scope 28 at src\keccak.rs:133:67: 133:67
        _57 = const std::ptr::<impl *const T>::offset(_58, _59) -> bb24; // scope 28 at src\keccak.rs:133:30: 133:68
    }

    bb24: {                             
        StorageDead(_59);                // scope 28 at src\keccak.rs:133:68: 133:68
        StorageDead(_58);                // scope 28 at src\keccak.rs:133:68: 133:68
        _56 = (*_57);                    // scope 28 at src\keccak.rs:133:29: 133:68
        StorageLive(_64);                // scope 28 at src\keccak.rs:133:20: 133:24
        _64 = _53;                       // scope 28 at src\keccak.rs:133:20: 133:24
        _65 = Len(_10);                  // scope 28 at src\keccak.rs:133:17: 133:25
        _66 = Lt(_64, _65);              // scope 28 at src\keccak.rs:133:17: 133:25
        assert(_66, "index out of bounds: the len is {} but the index is {}", _65, _64) -> bb25; // scope 28 at src\keccak.rs:133:17: 133:25
    }

    bb25: {                             
        _10[_64] = BitXor(_10[_64], _56); // scope 28 at src\keccak.rs:133:17: 133:68
        StorageDead(_56);                // scope 28 at src\keccak.rs:133:68: 133:68
        StorageDead(_57);                // scope 28 at src\keccak.rs:133:69: 133:69
        _55 = ();                        // scope 28 at src\keccak.rs:132:13: 134:14
        _39 = ();                        // scope 22 at src\keccak.rs:131:9: 135:10
        StorageDead(_53);                // scope 23 at src\keccak.rs:135:10: 135:10
        StorageDead(_46);                // scope 22 at src\keccak.rs:135:10: 135:10
        goto -> bb18;                    // scope 22 at src\keccak.rs:131:9: 135:10
    }

    bb26: {                             
        StorageDead(_69);                // scope 18 at src\keccak.rs:136:40: 136:40
        StorageDead(_70);                // scope 18 at src\keccak.rs:136:41: 136:41
        StorageLive(_71);                // scope 18 at src\keccak.rs:137:19: 137:23
        _71 = _23;                       // scope 18 at src\keccak.rs:137:19: 137:23
        _72 = CheckedSub(_3, _71);       // scope 18 at src\keccak.rs:137:9: 137:23
        assert(!(_72.1: bool), "attempt to subtract with overflow") -> bb27; // scope 18 at src\keccak.rs:137:9: 137:23
    }

    bb27: {                             
        _3 = (_72.0: usize);             // scope 18 at src\keccak.rs:137:9: 137:23
        StorageDead(_71);                // scope 18 at src\keccak.rs:137:23: 137:23
        StorageLive(_73);                // scope 18 at src\keccak.rs:137:33: 137:37
        _73 = _23;                       // scope 18 at src\keccak.rs:137:33: 137:37
        _74 = CheckedAdd(_34, _73);      // scope 18 at src\keccak.rs:137:25: 137:37
        assert(!(_74.1: bool), "attempt to add with overflow") -> bb28; // scope 18 at src\keccak.rs:137:25: 137:37
    }

    bb28: {                             
        _34 = (_74.0: usize);            // scope 18 at src\keccak.rs:137:25: 137:37
        StorageDead(_73);                // scope 18 at src\keccak.rs:137:37: 137:37
        _39 = ();                        // scope 18 at src\keccak.rs:130:26: 138:6
        goto -> bb14;                    // scope 18 at src\keccak.rs:130:5: 138:6
    }

    bb29: {                             
        StorageDead(_78);                // scope 29 at src\keccak.rs:141:47: 141:47
        StorageLive(_80);                // scope 31 at src\keccak.rs:141:5: 141:47
        _80 = _77;                       // scope 31 at src\keccak.rs:141:5: 141:47
        goto -> bb30;                    // scope 31 at src\keccak.rs:141:5: 141:47
    }

    bb30: {                             
        StorageLive(_81);                // scope 32 at src\keccak.rs:141:5: 141:47
        StorageLive(_82);                // scope 32 at src\keccak.rs:141:5: 141:47
        StorageLive(_83);                // scope 32 at src\keccak.rs:141:5: 141:47
        StorageLive(_84);                // scope 32 at src\keccak.rs:141:5: 141:47
        _84 = &mut _80;                  // scope 32 at src\keccak.rs:141:5: 141:47
        _83 = _84;                       // scope 32 at src\keccak.rs:141:5: 141:47
        _82 = const std::iter::Iterator::next(_83) -> bb31; // scope 32 at src\keccak.rs:141:5: 141:47
    }

    bb31: {                             
        StorageDead(_83);                // scope 32 at src\keccak.rs:141:47: 141:47
        _86 = discriminant(_82);         // scope 34 at src\keccak.rs:141:5: 141:47
        switchInt(_86) -> [0isize: bb32, 1isize: bb33, otherwise: bb21]; // scope 34 at src\keccak.rs:141:5: 141:47
    }

    bb32: {                             
        _76 = ();                        // scope 34 at src\keccak.rs:141:5: 141:47
        StorageDead(_85);                // scope 32 at src\keccak.rs:141:47: 141:47
        StorageDead(_82);                // scope 32 at src\keccak.rs:141:47: 141:47
        StorageDead(_84);                // scope 32 at src\keccak.rs:141:47: 141:47
        StorageDead(_81);                // scope 31 at src\keccak.rs:141:47: 141:47
        StorageDead(_80);                // scope 29 at src\keccak.rs:141:47: 141:47
        StorageDead(_77);                // scope 29 at src\keccak.rs:141:47: 141:47
        StorageLive(_98);                // scope 29 at src\keccak.rs:141:5: 141:47
        _98 = _76;                       // scope 29 at src\keccak.rs:141:5: 141:47
        _75 = _98;                       // scope 29 at src\keccak.rs:141:5: 141:47
        StorageDead(_98);                // scope 29 at src\keccak.rs:141:47: 141:47
        StorageDead(_76);                // scope 18 at src\keccak.rs:141:47: 141:47
        StorageLive(_99);                // scope 18 at src\keccak.rs:142:10: 142:16
        _99 = _3;                        // scope 18 at src\keccak.rs:142:10: 142:16
        _100 = Len(_11);                 // scope 18 at src\keccak.rs:142:5: 142:17
        _101 = Lt(_99, _100);            // scope 18 at src\keccak.rs:142:5: 142:17
        assert(_101, "index out of bounds: the len is {} but the index is {}", _100, _99) -> bb36; // scope 18 at src\keccak.rs:142:5: 142:17
    }

    bb33: {                             
        StorageLive(_85);                // scope 34 at src\keccak.rs:141:5: 141:47
        _85 = ((_82 as Some).0: usize);  // scope 34 at src\keccak.rs:141:5: 141:47
        StorageLive(_87);                // scope 34 at src\keccak.rs:141:5: 141:47
        _87 = _85;                       // scope 34 at src\keccak.rs:141:5: 141:47
        _81 = _87;                       // scope 34 at src\keccak.rs:141:5: 141:47
        StorageDead(_87);                // scope 34 at src\keccak.rs:141:47: 141:47
        StorageDead(_85);                // scope 32 at src\keccak.rs:141:47: 141:47
        StorageDead(_82);                // scope 32 at src\keccak.rs:141:47: 141:47
        StorageDead(_84);                // scope 32 at src\keccak.rs:141:47: 141:47
        StorageLive(_88);                // scope 35 at src\keccak.rs:141:9: 141:10
        StorageLive(_89);                // scope 35 at src\keccak.rs:141:5: 141:47
        _89 = _81;                       // scope 35 at src\keccak.rs:141:5: 141:47
        _88 = _89;                       // scope 35 at src\keccak.rs:141:5: 141:47
        StorageDead(_89);                // scope 35 at src\keccak.rs:141:47: 141:47
        StorageLive(_91);                // scope 35 at src\keccak.rs:141:36: 141:44
        StorageLive(_92);                // scope 35 at src\keccak.rs:141:42: 141:43
        _92 = _88;                       // scope 35 at src\keccak.rs:141:42: 141:43
        _93 = Len((*_1));                // scope 35 at src\keccak.rs:141:36: 141:44
        _94 = Lt(_92, _93);              // scope 35 at src\keccak.rs:141:36: 141:44
        assert(_94, "index out of bounds: the len is {} but the index is {}", _93, _92) -> bb34; // scope 35 at src\keccak.rs:141:36: 141:44
    }

    bb34: {                             
        _91 = (*_1)[_92];                // scope 35 at src\keccak.rs:141:36: 141:44
        StorageLive(_95);                // scope 35 at src\keccak.rs:141:31: 141:32
        _95 = _88;                       // scope 35 at src\keccak.rs:141:31: 141:32
        _96 = Len(_11);                  // scope 35 at src\keccak.rs:141:26: 141:33
        _97 = Lt(_95, _96);              // scope 35 at src\keccak.rs:141:26: 141:33
        assert(_97, "index out of bounds: the len is {} but the index is {}", _96, _95) -> bb35; // scope 35 at src\keccak.rs:141:26: 141:33
    }

    bb35: {                             
        _11[_95] = _91;                  // scope 35 at src\keccak.rs:141:26: 141:44
        StorageDead(_91);                // scope 35 at src\keccak.rs:141:44: 141:44
        _90 = ();                        // scope 35 at src\keccak.rs:141:24: 141:47
        _39 = ();                        // scope 31 at src\keccak.rs:141:5: 141:47
        StorageDead(_88);                // scope 32 at src\keccak.rs:141:47: 141:47
        StorageDead(_81);                // scope 31 at src\keccak.rs:141:47: 141:47
        goto -> bb30;                    // scope 31 at src\keccak.rs:141:5: 141:47
    }

    bb36: {                             
        _11[_99] = const 1u8;            // scope 18 at src\keccak.rs:142:5: 142:21
        StorageLive(_103);               // scope 37 at src\keccak.rs:143:5: 143:66
        StorageLive(_104);               // scope 37 at src\keccak.rs:143:5: 143:66
        StorageLive(_105);               // scope 37 at src\keccak.rs:143:14: 143:36
        StorageLive(_106);               // scope 37 at src\keccak.rs:143:17: 143:36
        StorageLive(_107);               // scope 37 at src\keccak.rs:143:18: 143:31
        StorageLive(_108);               // scope 37 at src\keccak.rs:143:18: 143:22
        _108 = _23;                      // scope 37 at src\keccak.rs:143:18: 143:22
        StorageLive(_109);               // scope 37 at src\keccak.rs:143:25: 143:31
        _109 = _3;                       // scope 37 at src\keccak.rs:143:25: 143:31
        _110 = CheckedSub(_108, _109);   // scope 37 at src\keccak.rs:143:18: 143:31
        assert(!(_110.1: bool), "attempt to subtract with overflow") -> bb37; // scope 37 at src\keccak.rs:143:18: 143:31
    }

    bb37: {                             
        _107 = (_110.0: usize);          // scope 37 at src\keccak.rs:143:18: 143:31
        StorageDead(_109);               // scope 37 at src\keccak.rs:143:31: 143:31
        StorageDead(_108);               // scope 37 at src\keccak.rs:143:31: 143:31
        _111 = CheckedAdd(_107, const 1usize); // scope 37 at src\keccak.rs:143:17: 143:36
        assert(!(_111.1: bool), "attempt to add with overflow") -> bb38; // scope 37 at src\keccak.rs:143:17: 143:36
    }

    bb38: {                             
        _106 = (_111.0: usize);          // scope 37 at src\keccak.rs:143:17: 143:36
        StorageDead(_107);               // scope 37 at src\keccak.rs:143:36: 143:36
        _105 = std::ops::Range<usize> { start: const 0usize, end: _106 }; // scope 37 at src\keccak.rs:143:14: 143:36
        StorageDead(_106);               // scope 37 at src\keccak.rs:143:36: 143:36
        _104 = const std::iter::IntoIterator::into_iter(_105) -> bb39; // scope 37 at src\keccak.rs:143:5: 143:66
    }

    bb39: {                             
        StorageDead(_105);               // scope 37 at src\keccak.rs:143:66: 143:66
        StorageLive(_112);               // scope 39 at src\keccak.rs:143:5: 143:66
        _112 = _104;                     // scope 39 at src\keccak.rs:143:5: 143:66
        goto -> bb40;                    // scope 39 at src\keccak.rs:143:5: 143:66
    }

    bb40: {                             
        StorageLive(_113);               // scope 40 at src\keccak.rs:143:5: 143:66
        StorageLive(_114);               // scope 40 at src\keccak.rs:143:5: 143:66
        StorageLive(_115);               // scope 40 at src\keccak.rs:143:5: 143:66
        StorageLive(_116);               // scope 40 at src\keccak.rs:143:5: 143:66
        _116 = &mut _112;                // scope 40 at src\keccak.rs:143:5: 143:66
        _115 = _116;                     // scope 40 at src\keccak.rs:143:5: 143:66
        _114 = const std::iter::Iterator::next(_115) -> bb41; // scope 40 at src\keccak.rs:143:5: 143:66
    }

    bb41: {                             
        StorageDead(_115);               // scope 40 at src\keccak.rs:143:66: 143:66
        _118 = discriminant(_114);       // scope 42 at src\keccak.rs:143:5: 143:66
        switchInt(_118) -> [0isize: bb42, 1isize: bb43, otherwise: bb21]; // scope 42 at src\keccak.rs:143:5: 143:66
    }

    bb42: {                             
        _103 = ();                       // scope 42 at src\keccak.rs:143:5: 143:66
        StorageDead(_117);               // scope 40 at src\keccak.rs:143:66: 143:66
        StorageDead(_114);               // scope 40 at src\keccak.rs:143:66: 143:66
        StorageDead(_116);               // scope 40 at src\keccak.rs:143:66: 143:66
        StorageDead(_113);               // scope 39 at src\keccak.rs:143:66: 143:66
        StorageDead(_112);               // scope 37 at src\keccak.rs:143:66: 143:66
        StorageDead(_104);               // scope 37 at src\keccak.rs:143:66: 143:66
        StorageLive(_132);               // scope 37 at src\keccak.rs:143:5: 143:66
        _132 = _103;                     // scope 37 at src\keccak.rs:143:5: 143:66
        _102 = _132;                     // scope 37 at src\keccak.rs:143:5: 143:66
        StorageDead(_132);               // scope 37 at src\keccak.rs:143:66: 143:66
        StorageDead(_103);               // scope 18 at src\keccak.rs:143:66: 143:66
        StorageLive(_133);               // scope 18 at src\keccak.rs:144:5: 144:19
        StorageLive(_134);               // scope 18 at src\keccak.rs:144:5: 144:9
        StorageLive(_135);               // scope 18 at src\keccak.rs:144:5: 144:9
        _135 = &mut _11;                 // scope 18 at src\keccak.rs:144:5: 144:9
        _134 = _135 as &mut [u8] (Unsize); // scope 18 at src\keccak.rs:144:5: 144:9
        StorageDead(_135);               // scope 18 at src\keccak.rs:144:9: 144:9
        StorageLive(_136);               // scope 18 at src\keccak.rs:144:10: 144:18
        StorageLive(_137);               // scope 18 at src\keccak.rs:144:10: 144:14
        _137 = _23;                      // scope 18 at src\keccak.rs:144:10: 144:14
        _138 = CheckedSub(_137, const 1usize); // scope 18 at src\keccak.rs:144:10: 144:18
        assert(!(_138.1: bool), "attempt to subtract with overflow") -> bb47; // scope 18 at src\keccak.rs:144:10: 144:18
    }

    bb43: {                             
        StorageLive(_117);               // scope 42 at src\keccak.rs:143:5: 143:66
        _117 = ((_114 as Some).0: usize); // scope 42 at src\keccak.rs:143:5: 143:66
        StorageLive(_119);               // scope 42 at src\keccak.rs:143:5: 143:66
        _119 = _117;                     // scope 42 at src\keccak.rs:143:5: 143:66
        _113 = _119;                     // scope 42 at src\keccak.rs:143:5: 143:66
        StorageDead(_119);               // scope 42 at src\keccak.rs:143:66: 143:66
        StorageDead(_117);               // scope 40 at src\keccak.rs:143:66: 143:66
        StorageDead(_114);               // scope 40 at src\keccak.rs:143:66: 143:66
        StorageDead(_116);               // scope 40 at src\keccak.rs:143:66: 143:66
        StorageLive(_120);               // scope 43 at src\keccak.rs:143:9: 143:10
        StorageLive(_121);               // scope 43 at src\keccak.rs:143:5: 143:66
        _121 = _113;                     // scope 43 at src\keccak.rs:143:5: 143:66
        _120 = _121;                     // scope 43 at src\keccak.rs:143:5: 143:66
        StorageDead(_121);               // scope 43 at src\keccak.rs:143:66: 143:66
        StorageLive(_123);               // scope 43 at src\keccak.rs:143:39: 143:59
        StorageLive(_124);               // scope 43 at src\keccak.rs:143:39: 143:43
        StorageLive(_125);               // scope 43 at src\keccak.rs:143:39: 143:43
        _125 = &mut _11;                 // scope 43 at src\keccak.rs:143:39: 143:43
        _124 = _125 as &mut [u8] (Unsize); // scope 43 at src\keccak.rs:143:39: 143:43
        StorageDead(_125);               // scope 43 at src\keccak.rs:143:43: 143:43
        StorageLive(_126);               // scope 43 at src\keccak.rs:143:44: 143:58
        StorageLive(_127);               // scope 43 at src\keccak.rs:143:44: 143:54
        StorageLive(_128);               // scope 43 at src\keccak.rs:143:44: 143:50
        _128 = _3;                       // scope 43 at src\keccak.rs:143:44: 143:50
        StorageLive(_129);               // scope 43 at src\keccak.rs:143:53: 143:54
        _129 = _120;                     // scope 43 at src\keccak.rs:143:53: 143:54
        _130 = CheckedAdd(_128, _129);   // scope 43 at src\keccak.rs:143:44: 143:54
        assert(!(_130.1: bool), "attempt to add with overflow") -> bb44; // scope 43 at src\keccak.rs:143:44: 143:54
    }

    bb44: {                             
        _127 = (_130.0: usize);          // scope 43 at src\keccak.rs:143:44: 143:54
        StorageDead(_129);               // scope 43 at src\keccak.rs:143:54: 143:54
        StorageDead(_128);               // scope 43 at src\keccak.rs:143:54: 143:54
        _131 = CheckedAdd(_127, const 1usize); // scope 43 at src\keccak.rs:143:44: 143:58
        assert(!(_131.1: bool), "attempt to add with overflow") -> bb45; // scope 43 at src\keccak.rs:143:44: 143:58
    }

    bb45: {                             
        _126 = (_131.0: usize);          // scope 43 at src\keccak.rs:143:44: 143:58
        StorageDead(_127);               // scope 43 at src\keccak.rs:143:58: 143:58
        _123 = const std::ops::IndexMut::index_mut(_124, _126) -> bb46; // scope 43 at src\keccak.rs:143:39: 143:59
    }

    bb46: {                             
        StorageDead(_126);               // scope 43 at src\keccak.rs:143:59: 143:59
        StorageDead(_124);               // scope 43 at src\keccak.rs:143:59: 143:59
        (*_123) = const 0u8;             // scope 43 at src\keccak.rs:143:39: 143:63
        StorageDead(_123);               // scope 43 at src\keccak.rs:143:64: 143:64
        _122 = ();                       // scope 43 at src\keccak.rs:143:37: 143:66
        _39 = ();                        // scope 39 at src\keccak.rs:143:5: 143:66
        StorageDead(_120);               // scope 40 at src\keccak.rs:143:66: 143:66
        StorageDead(_113);               // scope 39 at src\keccak.rs:143:66: 143:66
        goto -> bb40;                    // scope 39 at src\keccak.rs:143:5: 143:66
    }

    bb47: {                             
        _136 = (_138.0: usize);          // scope 18 at src\keccak.rs:144:10: 144:18
        StorageDead(_137);               // scope 18 at src\keccak.rs:144:18: 144:18
        _133 = const std::ops::IndexMut::index_mut(_134, _136) -> bb48; // scope 18 at src\keccak.rs:144:5: 144:19
    }

    bb48: {                             
        StorageDead(_136);               // scope 18 at src\keccak.rs:144:19: 144:19
        StorageDead(_134);               // scope 18 at src\keccak.rs:144:19: 144:19
        (*_133) = BitOr((*_133), const 128u8); // scope 18 at src\keccak.rs:144:5: 144:27
        StorageDead(_133);               // scope 18 at src\keccak.rs:144:28: 144:28
        StorageLive(_140);               // scope 45 at src\keccak.rs:145:5: 147:6
        StorageLive(_141);               // scope 45 at src\keccak.rs:145:5: 147:6
        StorageLive(_142);               // scope 45 at src\keccak.rs:145:14: 145:22
        StorageLive(_143);               // scope 45 at src\keccak.rs:145:17: 145:22
        _143 = _31;                      // scope 45 at src\keccak.rs:145:17: 145:22
        _142 = std::ops::Range<usize> { start: const 0usize, end: _143 }; // scope 45 at src\keccak.rs:145:14: 145:22
        StorageDead(_143);               // scope 45 at src\keccak.rs:145:22: 145:22
        _141 = const std::iter::IntoIterator::into_iter(_142) -> bb49; // scope 45 at src\keccak.rs:145:5: 147:6
    }

    bb49: {                             
        StorageDead(_142);               // scope 45 at src\keccak.rs:147:6: 147:6
        StorageLive(_144);               // scope 47 at src\keccak.rs:145:5: 147:6
        _144 = _141;                     // scope 47 at src\keccak.rs:145:5: 147:6
        goto -> bb50;                    // scope 47 at src\keccak.rs:145:5: 147:6
    }

    bb50: {                             
        StorageLive(_145);               // scope 48 at src\keccak.rs:145:5: 147:6
        StorageLive(_146);               // scope 48 at src\keccak.rs:145:5: 147:6
        StorageLive(_147);               // scope 48 at src\keccak.rs:145:5: 147:6
        StorageLive(_148);               // scope 48 at src\keccak.rs:145:5: 147:6
        _148 = &mut _144;                // scope 48 at src\keccak.rs:145:5: 147:6
        _147 = _148;                     // scope 48 at src\keccak.rs:145:5: 147:6
        _146 = const std::iter::Iterator::next(_147) -> bb51; // scope 48 at src\keccak.rs:145:5: 147:6
    }

    bb51: {                             
        StorageDead(_147);               // scope 48 at src\keccak.rs:147:6: 147:6
        _150 = discriminant(_146);       // scope 50 at src\keccak.rs:145:5: 147:6
        switchInt(_150) -> [0isize: bb52, 1isize: bb53, otherwise: bb21]; // scope 50 at src\keccak.rs:145:5: 147:6
    }

    bb52: {                             
        _140 = ();                       // scope 50 at src\keccak.rs:145:5: 147:6
        StorageDead(_149);               // scope 48 at src\keccak.rs:147:6: 147:6
        StorageDead(_146);               // scope 48 at src\keccak.rs:147:6: 147:6
        StorageDead(_148);               // scope 48 at src\keccak.rs:147:6: 147:6
        StorageDead(_145);               // scope 47 at src\keccak.rs:147:6: 147:6
        StorageDead(_144);               // scope 45 at src\keccak.rs:147:6: 147:6
        StorageDead(_141);               // scope 45 at src\keccak.rs:147:6: 147:6
        StorageLive(_164);               // scope 45 at src\keccak.rs:145:5: 147:6
        _164 = _140;                     // scope 45 at src\keccak.rs:145:5: 147:6
        _139 = _164;                     // scope 45 at src\keccak.rs:145:5: 147:6
        StorageDead(_164);               // scope 45 at src\keccak.rs:147:6: 147:6
        StorageDead(_140);               // scope 18 at src\keccak.rs:147:6: 147:6
        StorageLive(_166);               // scope 18 at src\keccak.rs:148:13: 148:20
        StorageLive(_167);               // scope 18 at src\keccak.rs:148:13: 148:20
        _167 = &mut _10;                 // scope 18 at src\keccak.rs:148:13: 148:20
        _166 = _167;                     // scope 18 at src\keccak.rs:148:13: 148:20
        _165 = const keccak::keccakf(_166, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:9) => cnminer[5424]::keccak[0]::KECCAK_ROUNDS[0] }, Slice([]))) -> bb56; // scope 18 at src\keccak.rs:148:5: 148:36
    }

    bb53: {                             
        StorageLive(_149);               // scope 50 at src\keccak.rs:145:5: 147:6
        _149 = ((_146 as Some).0: usize); // scope 50 at src\keccak.rs:145:5: 147:6
        StorageLive(_151);               // scope 50 at src\keccak.rs:145:5: 147:6
        _151 = _149;                     // scope 50 at src\keccak.rs:145:5: 147:6
        _145 = _151;                     // scope 50 at src\keccak.rs:145:5: 147:6
        StorageDead(_151);               // scope 50 at src\keccak.rs:147:6: 147:6
        StorageDead(_149);               // scope 48 at src\keccak.rs:147:6: 147:6
        StorageDead(_146);               // scope 48 at src\keccak.rs:147:6: 147:6
        StorageDead(_148);               // scope 48 at src\keccak.rs:147:6: 147:6
        StorageLive(_152);               // scope 51 at src\keccak.rs:145:9: 145:10
        StorageLive(_153);               // scope 51 at src\keccak.rs:145:5: 147:6
        _153 = _145;                     // scope 51 at src\keccak.rs:145:5: 147:6
        _152 = _153;                     // scope 51 at src\keccak.rs:145:5: 147:6
        StorageDead(_153);               // scope 51 at src\keccak.rs:147:6: 147:6
        StorageLive(_155);               // scope 51 at src\keccak.rs:146:18: 146:55
        StorageLive(_156);               // scope 53 at src\keccak.rs:146:27: 146:53
        StorageLive(_157);               // scope 53 at src\keccak.rs:146:28: 146:53
        StorageLive(_158);               // scope 53 at src\keccak.rs:146:28: 146:34
        _158 = _19;                      // scope 53 at src\keccak.rs:146:28: 146:34
        StorageLive(_159);               // scope 53 at src\keccak.rs:146:42: 146:52
        StorageLive(_160);               // scope 53 at src\keccak.rs:146:42: 146:43
        _160 = _152;                     // scope 53 at src\keccak.rs:146:42: 146:43
        _159 = _160 as isize (Misc);     // scope 53 at src\keccak.rs:146:42: 146:52
        StorageDead(_160);               // scope 53 at src\keccak.rs:146:52: 146:52
        _157 = const std::ptr::<impl *const T>::offset(_158, _159) -> bb54; // scope 53 at src\keccak.rs:146:28: 146:53
    }

    bb54: {                             
        StorageDead(_159);               // scope 53 at src\keccak.rs:146:53: 146:53
        StorageDead(_158);               // scope 53 at src\keccak.rs:146:53: 146:53
        _156 = (*_157);                  // scope 53 at src\keccak.rs:146:27: 146:53
        _155 = _156;                     // scope 53 at src\keccak.rs:146:27: 146:53
        StorageDead(_156);               // scope 53 at src\keccak.rs:146:53: 146:53
        StorageLive(_161);               // scope 51 at src\keccak.rs:146:12: 146:13
        _161 = _152;                     // scope 51 at src\keccak.rs:146:12: 146:13
        _162 = Len(_10);                 // scope 51 at src\keccak.rs:146:9: 146:14
        _163 = Lt(_161, _162);           // scope 51 at src\keccak.rs:146:9: 146:14
        assert(_163, "index out of bounds: the len is {} but the index is {}", _162, _161) -> bb55; // scope 51 at src\keccak.rs:146:9: 146:14
    }

    bb55: {                             
        _10[_161] = BitXor(_10[_161], _155); // scope 51 at src\keccak.rs:146:9: 146:55
        StorageDead(_155);               // scope 51 at src\keccak.rs:146:55: 146:55
        StorageDead(_157);               // scope 51 at src\keccak.rs:146:56: 146:56
        _154 = ();                       // scope 51 at src\keccak.rs:145:23: 147:6
        _39 = ();                        // scope 47 at src\keccak.rs:145:5: 147:6
        StorageDead(_152);               // scope 48 at src\keccak.rs:147:6: 147:6
        StorageDead(_145);               // scope 47 at src\keccak.rs:147:6: 147:6
        goto -> bb50;                    // scope 47 at src\keccak.rs:145:5: 147:6
    }

    bb56: {                             
        StorageDead(_166);               // scope 18 at src\keccak.rs:148:36: 148:36
        StorageDead(_167);               // scope 18 at src\keccak.rs:148:37: 148:37
        StorageLive(_168);               // scope 54 at src\keccak.rs:151:5: 153:6
        StorageLive(_169);               // scope 54 at src\keccak.rs:151:5: 153:6
        StorageLive(_170);               // scope 54 at src\keccak.rs:151:14: 151:23
        StorageLive(_171);               // scope 54 at src\keccak.rs:151:17: 151:23
        _171 = _4;                       // scope 54 at src\keccak.rs:151:17: 151:23
        _170 = std::ops::Range<usize> { start: const 0usize, end: _171 }; // scope 54 at src\keccak.rs:151:14: 151:23
        StorageDead(_171);               // scope 54 at src\keccak.rs:151:23: 151:23
        _169 = const std::iter::IntoIterator::into_iter(_170) -> bb57; // scope 54 at src\keccak.rs:151:5: 153:6
    }

    bb57: {                             
        StorageDead(_170);               // scope 54 at src\keccak.rs:153:6: 153:6
        StorageLive(_172);               // scope 56 at src\keccak.rs:151:5: 153:6
        _172 = _169;                     // scope 56 at src\keccak.rs:151:5: 153:6
        goto -> bb58;                    // scope 56 at src\keccak.rs:151:5: 153:6
    }

    bb58: {                             
        StorageLive(_173);               // scope 57 at src\keccak.rs:151:5: 153:6
        StorageLive(_174);               // scope 57 at src\keccak.rs:151:5: 153:6
        StorageLive(_175);               // scope 57 at src\keccak.rs:151:5: 153:6
        StorageLive(_176);               // scope 57 at src\keccak.rs:151:5: 153:6
        _176 = &mut _172;                // scope 57 at src\keccak.rs:151:5: 153:6
        _175 = _176;                     // scope 57 at src\keccak.rs:151:5: 153:6
        _174 = const std::iter::Iterator::next(_175) -> bb59; // scope 57 at src\keccak.rs:151:5: 153:6
    }

    bb59: {                             
        StorageDead(_175);               // scope 57 at src\keccak.rs:153:6: 153:6
        _178 = discriminant(_174);       // scope 59 at src\keccak.rs:151:5: 153:6
        switchInt(_178) -> [0isize: bb60, 1isize: bb61, otherwise: bb21]; // scope 59 at src\keccak.rs:151:5: 153:6
    }

    bb60: {                             
        _168 = ();                       // scope 59 at src\keccak.rs:151:5: 153:6
        StorageDead(_177);               // scope 57 at src\keccak.rs:153:6: 153:6
        StorageDead(_174);               // scope 57 at src\keccak.rs:153:6: 153:6
        StorageDead(_176);               // scope 57 at src\keccak.rs:153:6: 153:6
        StorageDead(_173);               // scope 56 at src\keccak.rs:153:6: 153:6
        StorageDead(_172);               // scope 54 at src\keccak.rs:153:6: 153:6
        StorageDead(_169);               // scope 54 at src\keccak.rs:153:6: 153:6
        StorageLive(_192);               // scope 54 at src\keccak.rs:151:5: 153:6
        _192 = _168;                     // scope 54 at src\keccak.rs:151:5: 153:6
        _0 = _192;                       // scope 54 at src\keccak.rs:151:5: 153:6
        StorageDead(_192);               // scope 54 at src\keccak.rs:153:6: 153:6
        StorageDead(_168);               // scope 18 at src\keccak.rs:153:6: 153:6
        StorageDead(_34);                // scope 16 at src\keccak.rs:154:2: 154:2
        StorageDead(_31);                // scope 14 at src\keccak.rs:154:2: 154:2
        StorageDead(_23);                // scope 12 at src\keccak.rs:154:2: 154:2
        StorageDead(_19);                // scope 10 at src\keccak.rs:154:2: 154:2
        StorageDead(_16);                // scope 8 at src\keccak.rs:154:2: 154:2
        StorageDead(_12);                // scope 6 at src\keccak.rs:154:2: 154:2
        StorageDead(_11);                // scope 3 at src\keccak.rs:154:2: 154:2
        StorageDead(_10);                // scope 1 at src\keccak.rs:154:2: 154:2
        StorageDead(_4);                 // scope 0 at src\keccak.rs:154:2: 154:2
        StorageDead(_3);                 // scope 0 at src\keccak.rs:154:2: 154:2
        return;                          // scope 0 at src\keccak.rs:154:2: 154:2
    }

    bb61: {                             
        StorageLive(_177);               // scope 59 at src\keccak.rs:151:5: 153:6
        _177 = ((_174 as Some).0: usize); // scope 59 at src\keccak.rs:151:5: 153:6
        StorageLive(_179);               // scope 59 at src\keccak.rs:151:5: 153:6
        _179 = _177;                     // scope 59 at src\keccak.rs:151:5: 153:6
        _173 = _179;                     // scope 59 at src\keccak.rs:151:5: 153:6
        StorageDead(_179);               // scope 59 at src\keccak.rs:153:6: 153:6
        StorageDead(_177);               // scope 57 at src\keccak.rs:153:6: 153:6
        StorageDead(_174);               // scope 57 at src\keccak.rs:153:6: 153:6
        StorageDead(_176);               // scope 57 at src\keccak.rs:153:6: 153:6
        StorageLive(_180);               // scope 60 at src\keccak.rs:151:9: 151:10
        StorageLive(_181);               // scope 60 at src\keccak.rs:151:5: 153:6
        _181 = _173;                     // scope 60 at src\keccak.rs:151:5: 153:6
        _180 = _181;                     // scope 60 at src\keccak.rs:151:5: 153:6
        StorageDead(_181);               // scope 60 at src\keccak.rs:153:6: 153:6
        StorageLive(_183);               // scope 60 at src\keccak.rs:152:17: 152:51
        StorageLive(_184);               // scope 62 at src\keccak.rs:152:26: 152:49
        StorageLive(_185);               // scope 62 at src\keccak.rs:152:27: 152:49
        StorageLive(_186);               // scope 62 at src\keccak.rs:152:27: 152:30
        _186 = _12;                      // scope 62 at src\keccak.rs:152:27: 152:30
        StorageLive(_187);               // scope 62 at src\keccak.rs:152:38: 152:48
        StorageLive(_188);               // scope 62 at src\keccak.rs:152:38: 152:39
        _188 = _180;                     // scope 62 at src\keccak.rs:152:38: 152:39
        _187 = _188 as isize (Misc);     // scope 62 at src\keccak.rs:152:38: 152:48
        StorageDead(_188);               // scope 62 at src\keccak.rs:152:48: 152:48
        _185 = const std::ptr::<impl *const T>::offset(_186, _187) -> bb62; // scope 62 at src\keccak.rs:152:27: 152:49
    }

    bb62: {                             
        StorageDead(_187);               // scope 62 at src\keccak.rs:152:49: 152:49
        StorageDead(_186);               // scope 62 at src\keccak.rs:152:49: 152:49
        _184 = (*_185);                  // scope 62 at src\keccak.rs:152:26: 152:49
        _183 = _184;                     // scope 62 at src\keccak.rs:152:26: 152:49
        StorageDead(_184);               // scope 62 at src\keccak.rs:152:49: 152:49
        StorageLive(_189);               // scope 60 at src\keccak.rs:152:12: 152:13
        _189 = _180;                     // scope 60 at src\keccak.rs:152:12: 152:13
        _190 = Len((*_2));               // scope 60 at src\keccak.rs:152:9: 152:14
        _191 = Lt(_189, _190);           // scope 60 at src\keccak.rs:152:9: 152:14
        assert(_191, "index out of bounds: the len is {} but the index is {}", _190, _189) -> bb63; // scope 60 at src\keccak.rs:152:9: 152:14
    }

    bb63: {                             
        (*_2)[_189] = _183;              // scope 60 at src\keccak.rs:152:9: 152:51
        StorageDead(_183);               // scope 60 at src\keccak.rs:152:51: 152:51
        StorageDead(_185);               // scope 60 at src\keccak.rs:152:52: 152:52
        _182 = ();                       // scope 60 at src\keccak.rs:151:24: 153:6
        _39 = ();                        // scope 56 at src\keccak.rs:151:5: 153:6
        StorageDead(_180);               // scope 57 at src\keccak.rs:153:6: 153:6
        StorageDead(_173);               // scope 56 at src\keccak.rs:153:6: 153:6
        goto -> bb58;                    // scope 56 at src\keccak.rs:151:5: 153:6
    }
}

const keccak::KECCAK_RNDC::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 24usize;              // scope 0 at src\keccak.rs:160:28: 160:30
        return;                          // scope 0 at src\keccak.rs:160:28: 160:30
    }
}

static cryptonight::LUT2: [u32; 256] = {
    let mut _0: [u32; 256];              // return pointer

    bb0: {                              
        _0 = [const 1667483301u32, const 2088564868u32, const 2004348569u32, const 2071721613u32, const 4076011277u32, const 1802229437u32, const 1869602481u32, const 3318059348u32, const 808476752u32, const 16843267u32, const 1734856361u32, const 724260477u32, const 4278118169u32, const 3621238114u32, const 2880130534u32, const 1987505306u32, const 3402272581u32, const 2189565853u32, const 3385428288u32, const 2105408135u32, const 4210749205u32, const 1499050731u32, const 1195871945u32, const 4042324747u32, const 2913812972u32, const 3570709351u32, const 2728550397u32, const 2947499498u32, const 2627478463u32, const 2762232823u32, const 1920132246u32, const 3233848155u32, const 3082253762u32, const 4261273884u32, const 2475900334u32, const 640044138u32, const 909536346u32, const 1061125697u32, const 4160222466u32, const 3435955023u32, const 875849820u32, const 2779075060u32, const 3857043764u32, const 4059166984u32, const 1903288979u32, const 3638078323u32, const 825320019u32, const 353708607u32, const 67373068u32, const 3351745874u32, const 589514341u32, const 3284376926u32, const 404238376u32, const 2526427041u32, const 84216335u32, const 2593796021u32, const 117902857u32, const 303178806u32, const 2155879323u32, const 3806519101u32, const 3958099238u32, const 656887401u32, const 2998042573u32, const 1970662047u32, const 151589403u32, const 2206408094u32, const 741103732u32, const 437924910u32, const 454768173u32, const 1852759218u32, const 1515893998u32, const 2694863867u32, const 1381147894u32, const 993752653u32, const 3604395873u32, const 3014884814u32, const 690573947u32, const 3823361342u32, const 791633521u32, const 2223248279u32, const 1397991157u32, const 3520182632u32, const 0u32, const 3991781676u32, const 538984544u32, const 4244431647u32, const 2981198280u32, const 1532737261u32, const 1785386174u32, const 3419114822u32, const 3200149465u32, const 960066123u32, const 1246401758u32, const 1280088276u32, const 1482207464u32, const 3486483786u32, const 3503340395u32, const 4025468202u32, const 2863288293u32, const 4227591446u32, const 1128498885u32, const 1296931543u32, const 859006549u32, const 2240090516u32, const 1162185423u32, const 4193904912u32, const 33686534u32, const 2139094657u32, const 1347461360u32, const 1010595908u32, const 2678007226u32, const 2829601763u32, const 1364304627u32, const 2745392638u32, const 1077969088u32, const 2408514954u32, const 2459058093u32, const 2644320700u32, const 943222856u32, const 4126535940u32, const 3166462943u32, const 3065411521u32, const 3671764853u32, const 555827811u32, const 269492272u32, const 4294960410u32, const 4092853518u32, const 3537026925u32, const 3452797260u32, const 202119188u32, const 320022069u32, const 3974939439u32, const 1600110305u32, const 2543269282u32, const 1145342156u32, const 387395129u32, const 3301217111u32, const 2812761586u32, const 2122251394u32, const 1027439175u32, const 1684326572u32, const 1566423783u32, const 421081643u32, const 1936975509u32, const 1616953504u32, const 2172721560u32, const 1330618065u32, const 3705447295u32, const 572671078u32, const 707417214u32, const 2425371563u32, const 2290617219u32, const 1179028682u32, const 4008625961u32, const 3099093971u32, const 336865340u32, const 3739133817u32, const 1583267042u32, const 185275933u32, const 3688607094u32, const 3772832571u32, const 842163286u32, const 976909390u32, const 168432670u32, const 1229558491u32, const 101059594u32, const 606357612u32, const 1549580516u32, const 3267534685u32, const 3553869166u32, const 2896970735u32, const 1650640038u32, const 2442213800u32, const 2509582756u32, const 3840201527u32, const 2038035083u32, const 3890730290u32, const 3368586051u32, const 926379609u32, const 1835915959u32, const 2374828428u32, const 3587551588u32, const 1313774802u32, const 2846444000u32, const 1819072692u32, const 1448520954u32, const 4109693703u32, const 3941256997u32, const 1701169839u32, const 2054878350u32, const 2930657257u32, const 134746136u32, const 3132780501u32, const 2021191816u32, const 623200879u32, const 774790258u32, const 471611428u32, const 2795919345u32, const 3031724999u32, const 3334903633u32, const 3907570467u32, const 3722289532u32, const 1953818780u32, const 522141217u32, const 1263245021u32, const 3183305180u32, const 2341145990u32, const 2324303749u32, const 1886445712u32, const 1044282434u32, const 3048567236u32, const 1718013098u32, const 1212715224u32, const 50529797u32, const 4143380225u32, const 235805714u32, const 1633796771u32, const 892693087u32, const 1465364217u32, const 3115936208u32, const 2256934801u32, const 3250690392u32, const 488454695u32, const 2661164985u32, const 3789674808u32, const 4177062675u32, const 2560109491u32, const 286335539u32, const 1768542907u32, const 3654920560u32, const 2391672713u32, const 2492740519u32, const 2610638262u32, const 505297954u32, const 2273777042u32, const 3924412704u32, const 3469641545u32, const 1431677695u32, const 673730680u32, const 3755976058u32, const 2357986191u32, const 2711706104u32, const 2307459456u32, const 218962455u32, const 3216991706u32, const 3873888049u32, const 1111655622u32, const 1751699640u32, const 1094812355u32, const 2576951728u32, const 757946999u32, const 252648977u32, const 2964356043u32, const 1414834428u32, const 3149622742u32, const 370551866u32]; // scope 0 at src\cryptonight.rs:332:27: 365:2
        return;                          // scope 0 at src\cryptonight.rs:332:1: 365:3
    }
}

const cryptonight::<impl at src\cryptonight.rs:42:10: 42:15>::clone::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 64usize;              // scope 0 at src\cryptonight.rs:44:17: 44:19
        return;                          // scope 0 at src\cryptonight.rs:44:17: 44:19
    }
}

fn cryptonight::xor_blocks(_1: *mut u8, _2: *const u8) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let _3: *mut u64;                // "a" in scope 1 at src\cryptonight.rs:146:9: 146:10
        scope 3 {
            let _5: *mut u64;            // "b" in scope 3 at src\cryptonight.rs:147:9: 147:10
        }
        scope 4 {
        }
    }
    scope 2 {
    }
    let mut _4: *mut u8;
    let mut _6: *const u8;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: *mut u64;
    let mut _10: *mut u64;
    let mut _11: *mut u64;
    let mut _12: *mut u64;

    bb0: {                              
        StorageLive(_3);                 // scope 1 at src\cryptonight.rs:146:9: 146:10
        StorageLive(_4);                 // scope 1 at src\cryptonight.rs:146:13: 146:14
        _4 = _1;                         // scope 1 at src\cryptonight.rs:146:13: 146:14
        _3 = _4 as *mut u64 (Misc);      // scope 1 at src\cryptonight.rs:146:13: 146:26
        StorageDead(_4);                 // scope 1 at src\cryptonight.rs:146:26: 146:26
        StorageLive(_5);                 // scope 3 at src\cryptonight.rs:147:9: 147:10
        StorageLive(_6);                 // scope 3 at src\cryptonight.rs:147:13: 147:14
        _6 = _2;                         // scope 3 at src\cryptonight.rs:147:13: 147:14
        _5 = _6 as *mut u64 (Misc);      // scope 3 at src\cryptonight.rs:147:13: 147:26
        StorageDead(_6);                 // scope 3 at src\cryptonight.rs:147:26: 147:26
        StorageLive(_7);                 // scope 3 at src\cryptonight.rs:148:11: 148:13
        _7 = (*_5);                      // scope 3 at src\cryptonight.rs:148:11: 148:13
        (*_3) = BitXor((*_3), _7);       // scope 3 at src\cryptonight.rs:148:5: 148:13
        StorageDead(_7);                 // scope 3 at src\cryptonight.rs:148:13: 148:13
        StorageLive(_8);                 // scope 3 at src\cryptonight.rs:149:21: 149:33
        StorageLive(_9);                 // scope 3 at src\cryptonight.rs:149:22: 149:33
        StorageLive(_10);                // scope 3 at src\cryptonight.rs:149:22: 149:23
        _10 = _5;                        // scope 3 at src\cryptonight.rs:149:22: 149:23
        _9 = const std::ptr::<impl *mut T>::offset(_10, const 1isize) -> bb1; // scope 3 at src\cryptonight.rs:149:22: 149:33
    }

    bb1: {                              
        StorageDead(_10);                // scope 3 at src\cryptonight.rs:149:33: 149:33
        _8 = (*_9);                      // scope 3 at src\cryptonight.rs:149:21: 149:33
        StorageLive(_11);                // scope 3 at src\cryptonight.rs:149:6: 149:17
        StorageLive(_12);                // scope 3 at src\cryptonight.rs:149:6: 149:7
        _12 = _3;                        // scope 3 at src\cryptonight.rs:149:6: 149:7
        _11 = const std::ptr::<impl *mut T>::offset(_12, const 1isize) -> bb2; // scope 3 at src\cryptonight.rs:149:6: 149:17
    }

    bb2: {                              
        StorageDead(_12);                // scope 3 at src\cryptonight.rs:149:17: 149:17
        (*_11) = BitXor((*_11), _8);     // scope 3 at src\cryptonight.rs:149:5: 149:33
        StorageDead(_8);                 // scope 3 at src\cryptonight.rs:149:33: 149:33
        StorageDead(_11);                // scope 3 at src\cryptonight.rs:149:34: 149:34
        StorageDead(_9);                 // scope 3 at src\cryptonight.rs:149:34: 149:34
        _0 = ();                         // scope 0 at src\cryptonight.rs:145:48: 150:2
        StorageDead(_5);                 // scope 1 at src\cryptonight.rs:150:2: 150:2
        StorageDead(_3);                 // scope 0 at src\cryptonight.rs:150:2: 150:2
        return;                          // scope 0 at src\cryptonight.rs:150:2: 150:2
    }
}

const cryptonight::HashState::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 200usize;             // scope 0 at src\cryptonight.rs:37:17: 37:20
        return;                          // scope 0 at src\cryptonight.rs:37:17: 37:20
    }
}

fn cryptonight::<impl at src\cryptonight.rs:68:1: 72:2>::default() -> cryptonight::CNContext {
    let mut _0: cryptonight::CNContext;  // return pointer
    scope 1 {
    }

    bb0: {                              
        _0 = const std::mem::zeroed() -> bb1; // scope 1 at src\cryptonight.rs:70:18: 70:51
    }

    bb1: {                              
        return;                          // scope 0 at src\cryptonight.rs:71:6: 71:6
    }
}

const cryptonight::INIT_SIZE_BLK: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 8usize;               // scope 0 at src\cryptonight.rs:26:35: 26:36
        return;                          // scope 0 at src\cryptonight.rs:26:1: 26:37
    }
}

const cryptonight::LUT1::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 256usize;             // scope 0 at src\cryptonight.rs:297:20: 297:23
        return;                          // scope 0 at src\cryptonight.rs:297:20: 297:23
    }
}

const cryptonight::CNContext::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:40) => cnminer[5424]::cryptonight[0]::MEMORY[0] }, Slice([])); // scope 0 at src\cryptonight.rs:55:26: 55:32
        return;                          // scope 0 at src\cryptonight.rs:55:26: 55:32
    }
}

const oaes::oaes_word_rot_left::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])); // scope 0 at src\oaes.rs:64:38: 64:50
        return;                          // scope 0 at src\oaes.rs:64:38: 64:50
    }
}

fn oaes::oaes_sub_byte(_1: u8) -> u8 {
    let mut _0: u8;                      // return pointer
    scope 1 {
        let _2: u8;                      // "y" in scope 1 at src\oaes.rs:76:9: 76:10
        scope 3 {
            let _6: u8;                  // "x" in scope 3 at src\oaes.rs:77:9: 77:10
        }
        scope 4 {
        }
    }
    scope 2 {
    }
    let mut _3: u8;
    let mut _4: u8;
    let mut _5: (u8, bool);
    let mut _7: u8;
    let mut _8: u8;
    let mut _9: usize;
    let mut _10: u8;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: u8;
    let mut _15: usize;
    let mut _16: bool;

    bb0: {                              
        StorageLive(_2);                 // scope 1 at src\oaes.rs:76:9: 76:10
        StorageLive(_3);                 // scope 1 at src\oaes.rs:76:13: 76:24
        StorageLive(_4);                 // scope 1 at src\oaes.rs:76:14: 76:18
        _4 = _1;                         // scope 1 at src\oaes.rs:76:14: 76:18
        _5 = CheckedShr(_4, const 4i32); // scope 1 at src\oaes.rs:76:13: 76:24
        assert(!(_5.1: bool), "attempt to shift right with overflow") -> bb1; // scope 1 at src\oaes.rs:76:13: 76:24
    }

    bb1: {                              
        _3 = (_5.0: u8);                 // scope 1 at src\oaes.rs:76:13: 76:24
        StorageDead(_4);                 // scope 1 at src\oaes.rs:76:24: 76:24
        _2 = BitAnd(_3, const 15u8);     // scope 1 at src\oaes.rs:76:13: 76:31
        StorageDead(_3);                 // scope 1 at src\oaes.rs:76:31: 76:31
        StorageLive(_6);                 // scope 3 at src\oaes.rs:77:9: 77:10
        StorageLive(_7);                 // scope 3 at src\oaes.rs:77:13: 77:17
        _7 = _1;                         // scope 3 at src\oaes.rs:77:13: 77:17
        _6 = BitAnd(_7, const 15u8);     // scope 3 at src\oaes.rs:77:13: 77:24
        StorageDead(_7);                 // scope 3 at src\oaes.rs:77:24: 77:24
        StorageLive(_8);                 // scope 3 at src\oaes.rs:78:5: 78:48
        StorageLive(_9);                 // scope 3 at src\oaes.rs:78:25: 78:35
        StorageLive(_10);                // scope 3 at src\oaes.rs:78:25: 78:26
        _10 = _2;                        // scope 3 at src\oaes.rs:78:25: 78:26
        _9 = _10 as usize (Misc);        // scope 3 at src\oaes.rs:78:25: 78:35
        StorageDead(_10);                // scope 3 at src\oaes.rs:78:35: 78:35
        _11 = Len((oaes::OAES_SUB_BYTE_VALUE: [[u8; 16]; 16])); // scope 3 at src\oaes.rs:78:5: 78:36
        _12 = Lt(_9, _11);               // scope 3 at src\oaes.rs:78:5: 78:36
        assert(_12, "index out of bounds: the len is {} but the index is {}", _11, _9) -> bb2; // scope 3 at src\oaes.rs:78:5: 78:36
    }

    bb2: {                              
        StorageLive(_13);                // scope 3 at src\oaes.rs:78:37: 78:47
        StorageLive(_14);                // scope 3 at src\oaes.rs:78:37: 78:38
        _14 = _6;                        // scope 3 at src\oaes.rs:78:37: 78:38
        _13 = _14 as usize (Misc);       // scope 3 at src\oaes.rs:78:37: 78:47
        StorageDead(_14);                // scope 3 at src\oaes.rs:78:47: 78:47
        _15 = Len((oaes::OAES_SUB_BYTE_VALUE: [[u8; 16]; 16])[_9]); // scope 3 at src\oaes.rs:78:5: 78:48
        _16 = Lt(_13, _15);              // scope 3 at src\oaes.rs:78:5: 78:48
        assert(_16, "index out of bounds: the len is {} but the index is {}", _15, _13) -> bb3; // scope 3 at src\oaes.rs:78:5: 78:48
    }

    bb3: {                              
        _8 = (oaes::OAES_SUB_BYTE_VALUE: [[u8; 16]; 16])[_9][_13]; // scope 3 at src\oaes.rs:78:5: 78:48
        _0 = _8;                         // scope 3 at src\oaes.rs:78:5: 78:48
        StorageDead(_8);                 // scope 3 at src\oaes.rs:78:48: 78:48
        StorageDead(_6);                 // scope 1 at src\oaes.rs:79:2: 79:2
        StorageDead(_2);                 // scope 0 at src\oaes.rs:79:2: 79:2
        return;                          // scope 0 at src\oaes.rs:79:2: 79:2
    }
}

const oaes::OAES_ROUND_BASE: u8 = {
    let mut _0: u8;                      // return pointer

    bb0: {                              
        _0 = const 7u8;                  // scope 0 at src\oaes.rs:16:32: 16:33
        return;                          // scope 0 at src\oaes.rs:16:1: 16:34
    }
}

static keccak::KECCAK_RNDC: [u64; 24] = {
    let mut _0: [u64; 24];               // return pointer

    bb0: {                              
        _0 = [const 1u64, const 32898u64, const 9223372036854808714u64, const 9223372039002292224u64, const 32907u64, const 2147483649u64, const 9223372039002292353u64, const 9223372036854808585u64, const 138u64, const 136u64, const 2147516425u64, const 2147483658u64, const 2147516555u64, const 9223372036854775947u64, const 9223372036854808713u64, const 9223372036854808579u64, const 9223372036854808578u64, const 9223372036854775936u64, const 32778u64, const 9223372039002259466u64, const 9223372039002292353u64, const 9223372036854808704u64, const 2147483649u64, const 9223372039002292232u64]; // scope 0 at src\keccak.rs:160:34: 169:2
        return;                          // scope 0 at src\keccak.rs:160:1: 169:3
    }
}

const keccak::KECCAK_ROTC::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 24usize;              // scope 0 at src\keccak.rs:171:28: 171:30
        return;                          // scope 0 at src\keccak.rs:171:28: 171:30
    }
}

const keccak::HASH_DATA_AREA: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 136usize;             // scope 0 at src\keccak.rs:19:35: 19:38
        return;                          // scope 0 at src\keccak.rs:19:1: 19:39
    }
}

fn cryptonight::<impl at src\cryptonight.rs:35:10: 35:15>::clone(_1: &cryptonight::HashState) -> cryptonight::HashState {
    let mut _0: cryptonight::HashState;  // return pointer
    let mut _2: cryptonight::HashState;

    bb0: {                              
        StorageLive(_2);                 // scope 0 at src\cryptonight.rs:35:10: 35:15
        _2 = (*_1);                      // scope 0 at src\cryptonight.rs:35:10: 35:15
        _0 = _2;                         // scope 0 at src\cryptonight.rs:35:10: 35:15
        StorageDead(_2);                 // scope 0 at src\cryptonight.rs:35:15: 35:15
        return;                          // scope 0 at src\cryptonight.rs:35:15: 35:15
    }
}

static cryptonight::LUT3: [u32; 256] = {
    let mut _0: [u32; 256];              // return pointer

    bb0: {                              
        _0 = [const 1673962851u32, const 2096661628u32, const 2012125559u32, const 2079755643u32, const 4076801522u32, const 1809235307u32, const 1876865391u32, const 3314635973u32, const 811618352u32, const 16909057u32, const 1741597031u32, const 727088427u32, const 4276558334u32, const 3618988759u32, const 2874009259u32, const 1995217526u32, const 3398387146u32, const 2183110018u32, const 3381215433u32, const 2113570685u32, const 4209972730u32, const 1504897881u32, const 1200539975u32, const 4042984432u32, const 2906778797u32, const 3568527316u32, const 2724199842u32, const 2940594863u32, const 2619588508u32, const 2756966308u32, const 1927583346u32, const 3231407040u32, const 3077948087u32, const 4259388669u32, const 2470293139u32, const 642542118u32, const 913070646u32, const 1065238847u32, const 4160029431u32, const 3431157708u32, const 879254580u32, const 2773611685u32, const 3855693029u32, const 4059629809u32, const 1910674289u32, const 3635114968u32, const 828527409u32, const 355090197u32, const 67636228u32, const 3348452039u32, const 591815971u32, const 3281870531u32, const 405809176u32, const 2520228246u32, const 84545285u32, const 2586817946u32, const 118360327u32, const 304363026u32, const 2149292928u32, const 3806281186u32, const 3956090603u32, const 659450151u32, const 2994720178u32, const 1978310517u32, const 152181513u32, const 2199756419u32, const 743994412u32, const 439627290u32, const 456535323u32, const 1859957358u32, const 1521806938u32, const 2690382752u32, const 1386542674u32, const 997608763u32, const 3602342358u32, const 3011366579u32, const 693271337u32, const 3822927587u32, const 794718511u32, const 2215876484u32, const 1403450707u32, const 3518589137u32, const 0u32, const 3988860141u32, const 541089824u32, const 4242743292u32, const 2977548465u32, const 1538714971u32, const 1792327274u32, const 3415033547u32, const 3194476990u32, const 963791673u32, const 1251270218u32, const 1285084236u32, const 1487988824u32, const 3481619151u32, const 3501943760u32, const 4022676207u32, const 2857362858u32, const 4226619131u32, const 1132905795u32, const 1301993293u32, const 862344499u32, const 2232521861u32, const 1166724933u32, const 4192801017u32, const 33818114u32, const 2147385727u32, const 1352724560u32, const 1014514748u32, const 2670049951u32, const 2823545768u32, const 1369633617u32, const 2740846243u32, const 1082179648u32, const 2399505039u32, const 2453646738u32, const 2636233885u32, const 946882616u32, const 4126213365u32, const 3160661948u32, const 3061301686u32, const 3668932058u32, const 557998881u32, const 270544912u32, const 4293204735u32, const 4093447923u32, const 3535760850u32, const 3447803085u32, const 202904588u32, const 321271059u32, const 3972214764u32, const 1606345055u32, const 2536874647u32, const 1149815876u32, const 388905239u32, const 3297990596u32, const 2807427751u32, const 2130477694u32, const 1031423805u32, const 1690872932u32, const 1572530013u32, const 422718233u32, const 1944491379u32, const 1623236704u32, const 2165938305u32, const 1335808335u32, const 3701702620u32, const 574907938u32, const 710180394u32, const 2419829648u32, const 2282455944u32, const 1183631942u32, const 4006029806u32, const 3094074296u32, const 338181140u32, const 3735517662u32, const 1589437022u32, const 185998603u32, const 3685578459u32, const 3772464096u32, const 845436466u32, const 980700730u32, const 169090570u32, const 1234361161u32, const 101452294u32, const 608726052u32, const 1555620956u32, const 3265224130u32, const 3552407251u32, const 2890133420u32, const 1657054818u32, const 2436475025u32, const 2503058581u32, const 3839047652u32, const 2045938553u32, const 3889509095u32, const 3364570056u32, const 929978679u32, const 1843050349u32, const 2365688973u32, const 3585172693u32, const 1318900302u32, const 2840191145u32, const 1826141292u32, const 1454176854u32, const 4109567988u32, const 3939444202u32, const 1707781989u32, const 2062847610u32, const 2923948462u32, const 135272456u32, const 3127891386u32, const 2029029496u32, const 625635109u32, const 777810478u32, const 473441308u32, const 2790781350u32, const 3027486644u32, const 3331805638u32, const 3905627112u32, const 3718347997u32, const 1961401460u32, const 524165407u32, const 1268178251u32, const 3177307325u32, const 2332919435u32, const 2316273034u32, const 1893765232u32, const 1048330814u32, const 3044132021u32, const 1724688998u32, const 1217452104u32, const 50726147u32, const 4143383030u32, const 236720654u32, const 1640145761u32, const 896163637u32, const 1471084887u32, const 3110719673u32, const 2249691526u32, const 3248052417u32, const 490350365u32, const 2653403550u32, const 3789109473u32, const 4176155640u32, const 2553000856u32, const 287453969u32, const 1775418217u32, const 3651760345u32, const 2382858638u32, const 2486413204u32, const 2603464347u32, const 507257374u32, const 2266337927u32, const 3922272489u32, const 3464972750u32, const 1437269845u32, const 676362280u32, const 3752164063u32, const 2349043596u32, const 2707028129u32, const 2299101321u32, const 219813645u32, const 3211123391u32, const 3872862694u32, const 1115997762u32, const 1758509160u32, const 1099088705u32, const 2569646233u32, const 760903469u32, const 253628687u32, const 2960903088u32, const 1420360788u32, const 3144537787u32, const 371997206u32]; // scope 0 at src\cryptonight.rs:367:27: 400:2
        return;                          // scope 0 at src\cryptonight.rs:367:1: 400:3
    }
}

const cryptonight::<impl at src\cryptonight.rs:42:10: 42:15>::clone::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])); // scope 0 at src\cryptonight.rs:45:20: 45:34
        return;                          // scope 0 at src\cryptonight.rs:45:20: 45:34
    }
}

fn cryptonight::xor_blocks_dst(_1: *const u8, _2: *const u8, _3: *mut u8) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let _4: *const u64;              // "a64" in scope 1 at src\cryptonight.rs:154:9: 154:12
        scope 3 {
            let _6: *const u64;          // "b64" in scope 3 at src\cryptonight.rs:155:9: 155:12
            scope 5 {
                let _8: *mut u64;        // "dst64" in scope 5 at src\cryptonight.rs:156:9: 156:14
            }
            scope 6 {
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }
    let mut _5: *const u8;
    let mut _7: *const u8;
    let mut _9: *mut u8;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: *const u64;
    let mut _14: *const u64;
    let mut _15: u64;
    let mut _16: *const u64;
    let mut _17: *const u64;
    let mut _18: *mut u64;
    let mut _19: *mut u64;

    bb0: {                              
        StorageLive(_4);                 // scope 1 at src\cryptonight.rs:154:9: 154:12
        StorageLive(_5);                 // scope 1 at src\cryptonight.rs:154:15: 154:16
        _5 = _1;                         // scope 1 at src\cryptonight.rs:154:15: 154:16
        _4 = _5 as *const u64 (Misc);    // scope 1 at src\cryptonight.rs:154:15: 154:30
        StorageDead(_5);                 // scope 1 at src\cryptonight.rs:154:30: 154:30
        StorageLive(_6);                 // scope 3 at src\cryptonight.rs:155:9: 155:12
        StorageLive(_7);                 // scope 3 at src\cryptonight.rs:155:15: 155:16
        _7 = _2;                         // scope 3 at src\cryptonight.rs:155:15: 155:16
        _6 = _7 as *const u64 (Misc);    // scope 3 at src\cryptonight.rs:155:15: 155:30
        StorageDead(_7);                 // scope 3 at src\cryptonight.rs:155:30: 155:30
        StorageLive(_8);                 // scope 5 at src\cryptonight.rs:156:9: 156:14
        StorageLive(_9);                 // scope 5 at src\cryptonight.rs:156:17: 156:20
        _9 = _3;                         // scope 5 at src\cryptonight.rs:156:17: 156:20
        _8 = _9 as *mut u64 (Misc);      // scope 5 at src\cryptonight.rs:156:17: 156:32
        StorageDead(_9);                 // scope 5 at src\cryptonight.rs:156:32: 156:32
        StorageLive(_10);                // scope 5 at src\cryptonight.rs:157:14: 157:18
        _10 = (*_4);                     // scope 5 at src\cryptonight.rs:157:14: 157:18
        StorageLive(_11);                // scope 5 at src\cryptonight.rs:157:21: 157:25
        _11 = (*_6);                     // scope 5 at src\cryptonight.rs:157:21: 157:25
        (*_8) = BitXor(_10, _11);        // scope 5 at src\cryptonight.rs:157:5: 157:25
        StorageDead(_11);                // scope 5 at src\cryptonight.rs:157:25: 157:25
        StorageDead(_10);                // scope 5 at src\cryptonight.rs:157:25: 157:25
        StorageLive(_12);                // scope 5 at src\cryptonight.rs:158:24: 158:38
        StorageLive(_13);                // scope 5 at src\cryptonight.rs:158:25: 158:38
        StorageLive(_14);                // scope 5 at src\cryptonight.rs:158:25: 158:28
        _14 = _4;                        // scope 5 at src\cryptonight.rs:158:25: 158:28
        _13 = const std::ptr::<impl *const T>::offset(_14, const 1isize) -> bb1; // scope 5 at src\cryptonight.rs:158:25: 158:38
    }

    bb1: {                              
        StorageDead(_14);                // scope 5 at src\cryptonight.rs:158:38: 158:38
        _12 = (*_13);                    // scope 5 at src\cryptonight.rs:158:24: 158:38
        StorageLive(_15);                // scope 5 at src\cryptonight.rs:158:41: 158:55
        StorageLive(_16);                // scope 5 at src\cryptonight.rs:158:42: 158:55
        StorageLive(_17);                // scope 5 at src\cryptonight.rs:158:42: 158:45
        _17 = _6;                        // scope 5 at src\cryptonight.rs:158:42: 158:45
        _16 = const std::ptr::<impl *const T>::offset(_17, const 1isize) -> bb2; // scope 5 at src\cryptonight.rs:158:42: 158:55
    }

    bb2: {                              
        StorageDead(_17);                // scope 5 at src\cryptonight.rs:158:55: 158:55
        _15 = (*_16);                    // scope 5 at src\cryptonight.rs:158:41: 158:55
        StorageLive(_18);                // scope 5 at src\cryptonight.rs:158:6: 158:21
        StorageLive(_19);                // scope 5 at src\cryptonight.rs:158:6: 158:11
        _19 = _8;                        // scope 5 at src\cryptonight.rs:158:6: 158:11
        _18 = const std::ptr::<impl *mut T>::offset(_19, const 1isize) -> bb3; // scope 5 at src\cryptonight.rs:158:6: 158:21
    }

    bb3: {                              
        StorageDead(_19);                // scope 5 at src\cryptonight.rs:158:21: 158:21
        (*_18) = BitXor(_12, _15);       // scope 5 at src\cryptonight.rs:158:5: 158:55
        StorageDead(_15);                // scope 5 at src\cryptonight.rs:158:55: 158:55
        StorageDead(_12);                // scope 5 at src\cryptonight.rs:158:55: 158:55
        StorageDead(_18);                // scope 5 at src\cryptonight.rs:158:56: 158:56
        StorageDead(_16);                // scope 5 at src\cryptonight.rs:158:56: 158:56
        StorageDead(_13);                // scope 5 at src\cryptonight.rs:158:56: 158:56
        _0 = ();                         // scope 0 at src\cryptonight.rs:153:68: 159:2
        StorageDead(_8);                 // scope 3 at src\cryptonight.rs:159:2: 159:2
        StorageDead(_6);                 // scope 1 at src\cryptonight.rs:159:2: 159:2
        StorageDead(_4);                 // scope 0 at src\cryptonight.rs:159:2: 159:2
        return;                          // scope 0 at src\cryptonight.rs:159:2: 159:2
    }
}

const cryptonight::HashState::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 25usize;              // scope 0 at src\cryptonight.rs:38:18: 38:20
        return;                          // scope 0 at src\cryptonight.rs:38:18: 38:20
    }
}

const cryptonight::INIT_SIZE_BYTE: usize = {
    let mut _0: usize;                   // return pointer
    let mut _1: (usize, bool);

    bb0: {                              
        _1 = CheckedMul(const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:44) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BLK[0] }, Slice([])), const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:42) => cnminer[5424]::cryptonight[0]::AES_BLOCK_SIZE[0] }, Slice([]))); // scope 0 at src\cryptonight.rs:27:35: 27:65
        assert(!(_1.1: bool), "attempt to multiply with overflow") -> bb1; // scope 0 at src\cryptonight.rs:27:35: 27:65
    }

    bb1: {                              
        _0 = (_1.0: usize);              // scope 0 at src\cryptonight.rs:27:35: 27:65
        return;                          // scope 0 at src\cryptonight.rs:27:1: 27:66
    }
}

const cryptonight::LUT2::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 256usize;             // scope 0 at src\cryptonight.rs:332:20: 332:23
        return;                          // scope 0 at src\cryptonight.rs:332:20: 332:23
    }
}

const cryptonight::CNContext::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])); // scope 0 at src\cryptonight.rs:57:20: 57:34
        return;                          // scope 0 at src\cryptonight.rs:57:20: 57:34
    }
}

fn oaes::<impl at src\oaes.rs:138:1: 142:2>::default() -> oaes::AesContext {
    let mut _0: oaes::AesContext;        // return pointer
    scope 1 {
    }

    bb0: {                              
        _0 = const std::mem::zeroed() -> bb1; // scope 1 at src\oaes.rs:140:18: 140:52
    }

    bb1: {                              
        return;                          // scope 0 at src\oaes.rs:141:6: 141:6
    }
}

const oaes::oaes_word_rot_left::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])); // scope 0 at src\oaes.rs:65:26: 65:38
        return;                          // scope 0 at src\oaes.rs:65:26: 65:38
    }
}

static oaes::OAES_GF_8: [u8; 10] = {
    let mut _0: [u8; 10];                // return pointer

    bb0: {                              
        _0 = [const 1u8, const 2u8, const 4u8, const 8u8, const 16u8, const 32u8, const 64u8, const 128u8, const 27u8, const 54u8]; // scope 0 at src\oaes.rs:18:31: 21:2
        return;                          // scope 0 at src\oaes.rs:18:1: 21:3
    }
}

static keccak::KECCAK_ROTC: [i32; 24] = {
    let mut _0: [i32; 24];               // return pointer

    bb0: {                              
        _0 = [const 1i32, const 3i32, const 6i32, const 10i32, const 15i32, const 21i32, const 28i32, const 36i32, const 45i32, const 55i32, const 2i32, const 14i32, const 27i32, const 41i32, const 56i32, const 8i32, const 25i32, const 43i32, const 62i32, const 18i32, const 39i32, const 61i32, const 20i32, const 44i32]; // scope 0 at src\keccak.rs:171:34: 174:2
        return;                          // scope 0 at src\keccak.rs:171:1: 174:3
    }
}

const keccak::KECCAK_PILN::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 24usize;              // scope 0 at src\keccak.rs:176:30: 176:32
        return;                          // scope 0 at src\keccak.rs:176:30: 176:32
    }
}

const keccak::KeccakState::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 25usize;              // scope 0 at src\keccak.rs:13:26: 13:28
        return;                          // scope 0 at src\keccak.rs:13:26: 13:28
    }
}

const keccak::KECCAK_ROUNDS: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 24usize;              // scope 0 at src\keccak.rs:20:35: 20:37
        return;                          // scope 0 at src\keccak.rs:20:1: 20:38
    }
}

static cryptonight::LUT4: [u32; 256] = {
    let mut _0: [u32; 256];              // return pointer

    bb0: {                              
        _0 = [const 3332727651u32, const 4169432188u32, const 4003034999u32, const 4136467323u32, const 4279104242u32, const 3602738027u32, const 3736170351u32, const 2438251973u32, const 1615867952u32, const 33751297u32, const 3467208551u32, const 1451043627u32, const 3877240574u32, const 3043153879u32, const 1306962859u32, const 3969545846u32, const 2403715786u32, const 530416258u32, const 2302724553u32, const 4203183485u32, const 4011195130u32, const 3001768281u32, const 2395555655u32, const 4211863792u32, const 1106029997u32, const 3009926356u32, const 1610457762u32, const 1173008303u32, const 599760028u32, const 1408738468u32, const 3835064946u32, const 2606481600u32, const 1975695287u32, const 3776773629u32, const 1034851219u32, const 1282024998u32, const 1817851446u32, const 2118205247u32, const 4110612471u32, const 2203045068u32, const 1750873140u32, const 1374987685u32, const 3509904869u32, const 4178113009u32, const 3801313649u32, const 2876496088u32, const 1649619249u32, const 708777237u32, const 135005188u32, const 2505230279u32, const 1181033251u32, const 2640233411u32, const 807933976u32, const 933336726u32, const 168756485u32, const 800430746u32, const 235472647u32, const 607523346u32, const 463175808u32, const 3745374946u32, const 3441880043u32, const 1315514151u32, const 2144187058u32, const 3936318837u32, const 303761673u32, const 496927619u32, const 1484008492u32, const 875436570u32, const 908925723u32, const 3702681198u32, const 3035519578u32, const 1543217312u32, const 2767606354u32, const 1984772923u32, const 3076642518u32, const 2110698419u32, const 1383803177u32, const 3711886307u32, const 1584475951u32, const 328696964u32, const 2801095507u32, const 3110654417u32, const 0u32, const 3240947181u32, const 1080041504u32, const 3810524412u32, const 2043195825u32, const 3069008731u32, const 3569248874u32, const 2370227147u32, const 1742323390u32, const 1917532473u32, const 2497595978u32, const 2564049996u32, const 2968016984u32, const 2236272591u32, const 3144405200u32, const 3307925487u32, const 1340451498u32, const 3977706491u32, const 2261074755u32, const 2597801293u32, const 1716859699u32, const 294946181u32, const 2328839493u32, const 3910203897u32, const 67502594u32, const 4269899647u32, const 2700103760u32, const 2017737788u32, const 632987551u32, const 1273211048u32, const 2733855057u32, const 1576969123u32, const 2160083008u32, const 92966799u32, const 1068339858u32, const 566009245u32, const 1883781176u32, const 4043634165u32, const 1675607228u32, const 2009183926u32, const 2943736538u32, const 1113792801u32, const 540020752u32, const 3843751935u32, const 4245615603u32, const 3211645650u32, const 2169294285u32, const 403966988u32, const 641012499u32, const 3274697964u32, const 3202441055u32, const 899848087u32, const 2295088196u32, const 775493399u32, const 2472002756u32, const 1441965991u32, const 4236410494u32, const 2051489085u32, const 3366741092u32, const 3135724893u32, const 841685273u32, const 3868554099u32, const 3231735904u32, const 429425025u32, const 2664517455u32, const 2743065820u32, const 1147544098u32, const 1417554474u32, const 1001099408u32, const 193169544u32, const 2362066502u32, const 3341414126u32, const 1809037496u32, const 675025940u32, const 2809781982u32, const 3168951902u32, const 371002123u32, const 2910247899u32, const 3678134496u32, const 1683370546u32, const 1951283770u32, const 337512970u32, const 2463844681u32, const 201983494u32, const 1215046692u32, const 3101973596u32, const 2673722050u32, const 3178157011u32, const 1139780780u32, const 3299238498u32, const 967348625u32, const 832869781u32, const 3543655652u32, const 4069226873u32, const 3576883175u32, const 2336475336u32, const 1851340599u32, const 3669454189u32, const 25988493u32, const 2976175573u32, const 2631028302u32, const 1239460265u32, const 3635702892u32, const 2902087254u32, const 4077384948u32, const 3475368682u32, const 3400492389u32, const 4102978170u32, const 1206496942u32, const 270010376u32, const 1876277946u32, const 4035475576u32, const 1248797989u32, const 1550986798u32, const 941890588u32, const 1475454630u32, const 1942467764u32, const 2538718918u32, const 3408128232u32, const 2709315037u32, const 3902567540u32, const 1042358047u32, const 2531085131u32, const 1641856445u32, const 226921355u32, const 260409994u32, const 3767562352u32, const 2084716094u32, const 1908716981u32, const 3433719398u32, const 2430093384u32, const 100991747u32, const 4144101110u32, const 470945294u32, const 3265487201u32, const 1784624437u32, const 2935576407u32, const 1775286713u32, const 395413126u32, const 2572730817u32, const 975641885u32, const 666476190u32, const 3644383713u32, const 3943954680u32, const 733190296u32, const 573772049u32, const 3535497577u32, const 2842745305u32, const 126455438u32, const 866620564u32, const 766942107u32, const 1008868894u32, const 361924487u32, const 3374377449u32, const 2269761230u32, const 2868860245u32, const 1350051880u32, const 2776293343u32, const 59739276u32, const 1509466529u32, const 159418761u32, const 437718285u32, const 1708834751u32, const 3610371814u32, const 2227585602u32, const 3501746280u32, const 2193834305u32, const 699439513u32, const 1517759789u32, const 504434447u32, const 2076946608u32, const 2835108948u32, const 1842789307u32, const 742004246u32]; // scope 0 at src\cryptonight.rs:402:27: 435:2
        return;                          // scope 0 at src\cryptonight.rs:402:1: 435:3
    }
}

fn cryptonight::sub_and_shift_and_mix_add_round(_1: *mut u32, _2: *const u32, _3: *const u32) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let _4: *const u8;               // "state" in scope 1 at src\cryptonight.rs:163:9: 163:14
    }
    scope 2 {
    }
    let mut _5: u32;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: usize;
    let mut _11: u8;
    let mut _12: *const u8;
    let mut _13: *const u8;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: u32;
    let mut _17: usize;
    let mut _18: u8;
    let mut _19: *const u8;
    let mut _20: *const u8;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: u32;
    let mut _24: usize;
    let mut _25: u8;
    let mut _26: *const u8;
    let mut _27: *const u8;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: u32;
    let mut _31: usize;
    let mut _32: u8;
    let mut _33: *const u8;
    let mut _34: *const u8;
    let mut _35: usize;
    let mut _36: bool;
    let mut _37: u32;
    let mut _38: *const u32;
    let mut _39: *const u32;
    let mut _40: *mut u32;
    let mut _41: *mut u32;
    let mut _42: u32;
    let mut _43: u32;
    let mut _44: u32;
    let mut _45: u32;
    let mut _46: usize;
    let mut _47: u8;
    let mut _48: *const u8;
    let mut _49: *const u8;
    let mut _50: usize;
    let mut _51: bool;
    let mut _52: u32;
    let mut _53: usize;
    let mut _54: u8;
    let mut _55: *const u8;
    let mut _56: *const u8;
    let mut _57: usize;
    let mut _58: bool;
    let mut _59: u32;
    let mut _60: usize;
    let mut _61: u8;
    let mut _62: *const u8;
    let mut _63: *const u8;
    let mut _64: usize;
    let mut _65: bool;
    let mut _66: u32;
    let mut _67: usize;
    let mut _68: u8;
    let mut _69: *const u8;
    let mut _70: *const u8;
    let mut _71: usize;
    let mut _72: bool;
    let mut _73: u32;
    let mut _74: *const u32;
    let mut _75: *const u32;
    let mut _76: *mut u32;
    let mut _77: *mut u32;
    let mut _78: u32;
    let mut _79: u32;
    let mut _80: u32;
    let mut _81: u32;
    let mut _82: usize;
    let mut _83: u8;
    let mut _84: *const u8;
    let mut _85: *const u8;
    let mut _86: usize;
    let mut _87: bool;
    let mut _88: u32;
    let mut _89: usize;
    let mut _90: u8;
    let mut _91: *const u8;
    let mut _92: *const u8;
    let mut _93: usize;
    let mut _94: bool;
    let mut _95: u32;
    let mut _96: usize;
    let mut _97: u8;
    let mut _98: *const u8;
    let mut _99: *const u8;
    let mut _100: usize;
    let mut _101: bool;
    let mut _102: u32;
    let mut _103: usize;
    let mut _104: u8;
    let mut _105: *const u8;
    let mut _106: *const u8;
    let mut _107: usize;
    let mut _108: bool;
    let mut _109: u32;
    let mut _110: *const u32;
    let mut _111: *const u32;
    let mut _112: *mut u32;
    let mut _113: *mut u32;
    let mut _114: u32;
    let mut _115: u32;
    let mut _116: u32;
    let mut _117: u32;
    let mut _118: usize;
    let mut _119: u8;
    let mut _120: *const u8;
    let mut _121: *const u8;
    let mut _122: usize;
    let mut _123: bool;
    let mut _124: u32;
    let mut _125: usize;
    let mut _126: u8;
    let mut _127: *const u8;
    let mut _128: *const u8;
    let mut _129: usize;
    let mut _130: bool;
    let mut _131: u32;
    let mut _132: usize;
    let mut _133: u8;
    let mut _134: *const u8;
    let mut _135: *const u8;
    let mut _136: usize;
    let mut _137: bool;
    let mut _138: u32;
    let mut _139: usize;
    let mut _140: u8;
    let mut _141: *const u8;
    let mut _142: *const u8;
    let mut _143: usize;
    let mut _144: bool;
    let mut _145: u32;
    let mut _146: *const u32;
    let mut _147: *const u32;
    let mut _148: *mut u32;
    let mut _149: *mut u32;

    bb0: {                              
        StorageLive(_4);                 // scope 1 at src\cryptonight.rs:163:9: 163:14
        StorageLive(_5);                 // scope 1 at src\cryptonight.rs:163:17: 163:22
        _5 = (*_2);                      // scope 1 at src\cryptonight.rs:163:17: 163:22
        _4 = _5 as *const u8 (Misc);     // scope 1 at src\cryptonight.rs:163:17: 163:35
        StorageDead(_5);                 // scope 1 at src\cryptonight.rs:163:35: 163:35
        StorageLive(_6);                 // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_7);                 // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_8);                 // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_9);                 // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_10);                // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_11);                // scope 1 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_12);                // scope 1 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_13);                // scope 1 at src\cryptonight.rs:164:46: 164:51
        _13 = _4;                        // scope 1 at src\cryptonight.rs:164:46: 164:51
        _12 = const std::ptr::<impl *const T>::offset(_13, const 0isize) -> bb1; // scope 1 at src\cryptonight.rs:85:20: 85:38
    }

    bb1: {                              
        StorageDead(_13);                // scope 1 at src\cryptonight.rs:85:38: 85:38
        _11 = (*_12);                    // scope 1 at src\cryptonight.rs:85:19: 85:38
        _10 = _11 as usize (Misc);       // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_11);                // scope 1 at src\cryptonight.rs:85:47: 85:47
        _14 = Len((cryptonight::LUT1: [u32; 256])); // scope 1 at src\cryptonight.rs:85:13: 85:48
        _15 = Lt(_10, _14);              // scope 1 at src\cryptonight.rs:85:13: 85:48
        assert(_15, "index out of bounds: the len is {} but the index is {}", _14, _10) -> bb2; // scope 1 at src\cryptonight.rs:85:13: 85:48
    }

    bb2: {                              
        _9 = (cryptonight::LUT1: [u32; 256])[_10]; // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_16);                // scope 1 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_17);                // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_18);                // scope 1 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_19);                // scope 1 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_20);                // scope 1 at src\cryptonight.rs:164:46: 164:51
        _20 = _4;                        // scope 1 at src\cryptonight.rs:164:46: 164:51
        _19 = const std::ptr::<impl *const T>::offset(_20, const 5isize) -> bb3; // scope 1 at src\cryptonight.rs:86:20: 86:38
    }

    bb3: {                              
        StorageDead(_20);                // scope 1 at src\cryptonight.rs:86:38: 86:38
        _18 = (*_19);                    // scope 1 at src\cryptonight.rs:86:19: 86:38
        _17 = _18 as usize (Misc);       // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_18);                // scope 1 at src\cryptonight.rs:86:47: 86:47
        _21 = Len((cryptonight::LUT2: [u32; 256])); // scope 1 at src\cryptonight.rs:86:13: 86:48
        _22 = Lt(_17, _21);              // scope 1 at src\cryptonight.rs:86:13: 86:48
        assert(_22, "index out of bounds: the len is {} but the index is {}", _21, _17) -> bb4; // scope 1 at src\cryptonight.rs:86:13: 86:48
    }

    bb4: {                              
        _16 = (cryptonight::LUT2: [u32; 256])[_17]; // scope 1 at src\cryptonight.rs:86:13: 86:48
        _8 = BitXor(_9, _16);            // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_16);                // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_9);                 // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_23);                // scope 1 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_24);                // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_25);                // scope 1 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_26);                // scope 1 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_27);                // scope 1 at src\cryptonight.rs:164:46: 164:51
        _27 = _4;                        // scope 1 at src\cryptonight.rs:164:46: 164:51
        _26 = const std::ptr::<impl *const T>::offset(_27, const 10isize) -> bb5; // scope 1 at src\cryptonight.rs:87:20: 87:38
    }

    bb5: {                              
        StorageDead(_27);                // scope 1 at src\cryptonight.rs:87:38: 87:38
        _25 = (*_26);                    // scope 1 at src\cryptonight.rs:87:19: 87:38
        _24 = _25 as usize (Misc);       // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_25);                // scope 1 at src\cryptonight.rs:87:47: 87:47
        _28 = Len((cryptonight::LUT3: [u32; 256])); // scope 1 at src\cryptonight.rs:87:13: 87:48
        _29 = Lt(_24, _28);              // scope 1 at src\cryptonight.rs:87:13: 87:48
        assert(_29, "index out of bounds: the len is {} but the index is {}", _28, _24) -> bb6; // scope 1 at src\cryptonight.rs:87:13: 87:48
    }

    bb6: {                              
        _23 = (cryptonight::LUT3: [u32; 256])[_24]; // scope 1 at src\cryptonight.rs:87:13: 87:48
        _7 = BitXor(_8, _23);            // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_23);                // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_8);                 // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_30);                // scope 1 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_31);                // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_32);                // scope 1 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_33);                // scope 1 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_34);                // scope 1 at src\cryptonight.rs:164:46: 164:51
        _34 = _4;                        // scope 1 at src\cryptonight.rs:164:46: 164:51
        _33 = const std::ptr::<impl *const T>::offset(_34, const 15isize) -> bb7; // scope 1 at src\cryptonight.rs:88:20: 88:38
    }

    bb7: {                              
        StorageDead(_34);                // scope 1 at src\cryptonight.rs:88:38: 88:38
        _32 = (*_33);                    // scope 1 at src\cryptonight.rs:88:19: 88:38
        _31 = _32 as usize (Misc);       // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_32);                // scope 1 at src\cryptonight.rs:88:47: 88:47
        _35 = Len((cryptonight::LUT4: [u32; 256])); // scope 1 at src\cryptonight.rs:88:13: 88:48
        _36 = Lt(_31, _35);              // scope 1 at src\cryptonight.rs:88:13: 88:48
        assert(_36, "index out of bounds: the len is {} but the index is {}", _35, _31) -> bb8; // scope 1 at src\cryptonight.rs:88:13: 88:48
    }

    bb8: {                              
        _30 = (cryptonight::LUT4: [u32; 256])[_31]; // scope 1 at src\cryptonight.rs:88:13: 88:48
        _6 = BitXor(_7, _30);            // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_30);                // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_7);                 // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_37);                // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_38);                // scope 1 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_39);                // scope 1 at src\cryptonight.rs:164:55: 164:66
        _39 = _3;                        // scope 1 at src\cryptonight.rs:164:55: 164:66
        _38 = const std::ptr::<impl *const T>::offset(_39, const 0isize) -> bb9; // scope 1 at src\cryptonight.rs:89:14: 89:32
    }

    bb9: {                              
        StorageDead(_39);                // scope 1 at src\cryptonight.rs:89:32: 89:32
        _37 = (*_38);                    // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_40);                // scope 1 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_41);                // scope 1 at src\cryptonight.rs:164:70: 164:73
        _41 = _1;                        // scope 1 at src\cryptonight.rs:164:70: 164:73
        _40 = const std::ptr::<impl *mut T>::offset(_41, const 0isize) -> bb10; // scope 1 at src\cryptonight.rs:84:10: 84:29
    }

    bb10: {                             
        StorageDead(_41);                // scope 1 at src\cryptonight.rs:84:29: 84:29
        (*_40) = BitXor(_6, _37);        // scope 1 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_37);                // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_6);                 // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_40);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_38);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_33);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_26);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_19);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_12);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageLive(_42);                // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_43);                // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_44);                // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_45);                // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_46);                // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_47);                // scope 1 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_48);                // scope 1 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_49);                // scope 1 at src\cryptonight.rs:165:46: 165:51
        _49 = _4;                        // scope 1 at src\cryptonight.rs:165:46: 165:51
        _48 = const std::ptr::<impl *const T>::offset(_49, const 3isize) -> bb11; // scope 1 at src\cryptonight.rs:85:20: 85:38
    }

    bb11: {                             
        StorageDead(_49);                // scope 1 at src\cryptonight.rs:85:38: 85:38
        _47 = (*_48);                    // scope 1 at src\cryptonight.rs:85:19: 85:38
        _46 = _47 as usize (Misc);       // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_47);                // scope 1 at src\cryptonight.rs:85:47: 85:47
        _50 = Len((cryptonight::LUT4: [u32; 256])); // scope 1 at src\cryptonight.rs:85:13: 85:48
        _51 = Lt(_46, _50);              // scope 1 at src\cryptonight.rs:85:13: 85:48
        assert(_51, "index out of bounds: the len is {} but the index is {}", _50, _46) -> bb12; // scope 1 at src\cryptonight.rs:85:13: 85:48
    }

    bb12: {                             
        _45 = (cryptonight::LUT4: [u32; 256])[_46]; // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_52);                // scope 1 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_53);                // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_54);                // scope 1 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_55);                // scope 1 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_56);                // scope 1 at src\cryptonight.rs:165:46: 165:51
        _56 = _4;                        // scope 1 at src\cryptonight.rs:165:46: 165:51
        _55 = const std::ptr::<impl *const T>::offset(_56, const 4isize) -> bb13; // scope 1 at src\cryptonight.rs:86:20: 86:38
    }

    bb13: {                             
        StorageDead(_56);                // scope 1 at src\cryptonight.rs:86:38: 86:38
        _54 = (*_55);                    // scope 1 at src\cryptonight.rs:86:19: 86:38
        _53 = _54 as usize (Misc);       // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_54);                // scope 1 at src\cryptonight.rs:86:47: 86:47
        _57 = Len((cryptonight::LUT1: [u32; 256])); // scope 1 at src\cryptonight.rs:86:13: 86:48
        _58 = Lt(_53, _57);              // scope 1 at src\cryptonight.rs:86:13: 86:48
        assert(_58, "index out of bounds: the len is {} but the index is {}", _57, _53) -> bb14; // scope 1 at src\cryptonight.rs:86:13: 86:48
    }

    bb14: {                             
        _52 = (cryptonight::LUT1: [u32; 256])[_53]; // scope 1 at src\cryptonight.rs:86:13: 86:48
        _44 = BitXor(_45, _52);          // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_52);                // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_45);                // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_59);                // scope 1 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_60);                // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_61);                // scope 1 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_62);                // scope 1 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_63);                // scope 1 at src\cryptonight.rs:165:46: 165:51
        _63 = _4;                        // scope 1 at src\cryptonight.rs:165:46: 165:51
        _62 = const std::ptr::<impl *const T>::offset(_63, const 9isize) -> bb15; // scope 1 at src\cryptonight.rs:87:20: 87:38
    }

    bb15: {                             
        StorageDead(_63);                // scope 1 at src\cryptonight.rs:87:38: 87:38
        _61 = (*_62);                    // scope 1 at src\cryptonight.rs:87:19: 87:38
        _60 = _61 as usize (Misc);       // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_61);                // scope 1 at src\cryptonight.rs:87:47: 87:47
        _64 = Len((cryptonight::LUT2: [u32; 256])); // scope 1 at src\cryptonight.rs:87:13: 87:48
        _65 = Lt(_60, _64);              // scope 1 at src\cryptonight.rs:87:13: 87:48
        assert(_65, "index out of bounds: the len is {} but the index is {}", _64, _60) -> bb16; // scope 1 at src\cryptonight.rs:87:13: 87:48
    }

    bb16: {                             
        _59 = (cryptonight::LUT2: [u32; 256])[_60]; // scope 1 at src\cryptonight.rs:87:13: 87:48
        _43 = BitXor(_44, _59);          // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_59);                // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_44);                // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_66);                // scope 1 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_67);                // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_68);                // scope 1 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_69);                // scope 1 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_70);                // scope 1 at src\cryptonight.rs:165:46: 165:51
        _70 = _4;                        // scope 1 at src\cryptonight.rs:165:46: 165:51
        _69 = const std::ptr::<impl *const T>::offset(_70, const 14isize) -> bb17; // scope 1 at src\cryptonight.rs:88:20: 88:38
    }

    bb17: {                             
        StorageDead(_70);                // scope 1 at src\cryptonight.rs:88:38: 88:38
        _68 = (*_69);                    // scope 1 at src\cryptonight.rs:88:19: 88:38
        _67 = _68 as usize (Misc);       // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_68);                // scope 1 at src\cryptonight.rs:88:47: 88:47
        _71 = Len((cryptonight::LUT3: [u32; 256])); // scope 1 at src\cryptonight.rs:88:13: 88:48
        _72 = Lt(_67, _71);              // scope 1 at src\cryptonight.rs:88:13: 88:48
        assert(_72, "index out of bounds: the len is {} but the index is {}", _71, _67) -> bb18; // scope 1 at src\cryptonight.rs:88:13: 88:48
    }

    bb18: {                             
        _66 = (cryptonight::LUT3: [u32; 256])[_67]; // scope 1 at src\cryptonight.rs:88:13: 88:48
        _42 = BitXor(_43, _66);          // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_66);                // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_43);                // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_73);                // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_74);                // scope 1 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_75);                // scope 1 at src\cryptonight.rs:165:55: 165:66
        _75 = _3;                        // scope 1 at src\cryptonight.rs:165:55: 165:66
        _74 = const std::ptr::<impl *const T>::offset(_75, const 1isize) -> bb19; // scope 1 at src\cryptonight.rs:89:14: 89:32
    }

    bb19: {                             
        StorageDead(_75);                // scope 1 at src\cryptonight.rs:89:32: 89:32
        _73 = (*_74);                    // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_76);                // scope 1 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_77);                // scope 1 at src\cryptonight.rs:165:70: 165:73
        _77 = _1;                        // scope 1 at src\cryptonight.rs:165:70: 165:73
        _76 = const std::ptr::<impl *mut T>::offset(_77, const 1isize) -> bb20; // scope 1 at src\cryptonight.rs:84:10: 84:29
    }

    bb20: {                             
        StorageDead(_77);                // scope 1 at src\cryptonight.rs:84:29: 84:29
        (*_76) = BitXor(_42, _73);       // scope 1 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_73);                // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_42);                // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_76);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_74);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_69);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_62);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_55);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_48);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageLive(_78);                // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_79);                // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_80);                // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_81);                // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_82);                // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_83);                // scope 1 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_84);                // scope 1 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_85);                // scope 1 at src\cryptonight.rs:166:46: 166:51
        _85 = _4;                        // scope 1 at src\cryptonight.rs:166:46: 166:51
        _84 = const std::ptr::<impl *const T>::offset(_85, const 2isize) -> bb21; // scope 1 at src\cryptonight.rs:85:20: 85:38
    }

    bb21: {                             
        StorageDead(_85);                // scope 1 at src\cryptonight.rs:85:38: 85:38
        _83 = (*_84);                    // scope 1 at src\cryptonight.rs:85:19: 85:38
        _82 = _83 as usize (Misc);       // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_83);                // scope 1 at src\cryptonight.rs:85:47: 85:47
        _86 = Len((cryptonight::LUT3: [u32; 256])); // scope 1 at src\cryptonight.rs:85:13: 85:48
        _87 = Lt(_82, _86);              // scope 1 at src\cryptonight.rs:85:13: 85:48
        assert(_87, "index out of bounds: the len is {} but the index is {}", _86, _82) -> bb22; // scope 1 at src\cryptonight.rs:85:13: 85:48
    }

    bb22: {                             
        _81 = (cryptonight::LUT3: [u32; 256])[_82]; // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_88);                // scope 1 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_89);                // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_90);                // scope 1 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_91);                // scope 1 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_92);                // scope 1 at src\cryptonight.rs:166:46: 166:51
        _92 = _4;                        // scope 1 at src\cryptonight.rs:166:46: 166:51
        _91 = const std::ptr::<impl *const T>::offset(_92, const 7isize) -> bb23; // scope 1 at src\cryptonight.rs:86:20: 86:38
    }

    bb23: {                             
        StorageDead(_92);                // scope 1 at src\cryptonight.rs:86:38: 86:38
        _90 = (*_91);                    // scope 1 at src\cryptonight.rs:86:19: 86:38
        _89 = _90 as usize (Misc);       // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_90);                // scope 1 at src\cryptonight.rs:86:47: 86:47
        _93 = Len((cryptonight::LUT4: [u32; 256])); // scope 1 at src\cryptonight.rs:86:13: 86:48
        _94 = Lt(_89, _93);              // scope 1 at src\cryptonight.rs:86:13: 86:48
        assert(_94, "index out of bounds: the len is {} but the index is {}", _93, _89) -> bb24; // scope 1 at src\cryptonight.rs:86:13: 86:48
    }

    bb24: {                             
        _88 = (cryptonight::LUT4: [u32; 256])[_89]; // scope 1 at src\cryptonight.rs:86:13: 86:48
        _80 = BitXor(_81, _88);          // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_88);                // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_81);                // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_95);                // scope 1 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_96);                // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_97);                // scope 1 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_98);                // scope 1 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_99);                // scope 1 at src\cryptonight.rs:166:46: 166:51
        _99 = _4;                        // scope 1 at src\cryptonight.rs:166:46: 166:51
        _98 = const std::ptr::<impl *const T>::offset(_99, const 8isize) -> bb25; // scope 1 at src\cryptonight.rs:87:20: 87:38
    }

    bb25: {                             
        StorageDead(_99);                // scope 1 at src\cryptonight.rs:87:38: 87:38
        _97 = (*_98);                    // scope 1 at src\cryptonight.rs:87:19: 87:38
        _96 = _97 as usize (Misc);       // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_97);                // scope 1 at src\cryptonight.rs:87:47: 87:47
        _100 = Len((cryptonight::LUT1: [u32; 256])); // scope 1 at src\cryptonight.rs:87:13: 87:48
        _101 = Lt(_96, _100);            // scope 1 at src\cryptonight.rs:87:13: 87:48
        assert(_101, "index out of bounds: the len is {} but the index is {}", _100, _96) -> bb26; // scope 1 at src\cryptonight.rs:87:13: 87:48
    }

    bb26: {                             
        _95 = (cryptonight::LUT1: [u32; 256])[_96]; // scope 1 at src\cryptonight.rs:87:13: 87:48
        _79 = BitXor(_80, _95);          // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_95);                // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_80);                // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_102);               // scope 1 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_103);               // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_104);               // scope 1 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_105);               // scope 1 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_106);               // scope 1 at src\cryptonight.rs:166:46: 166:51
        _106 = _4;                       // scope 1 at src\cryptonight.rs:166:46: 166:51
        _105 = const std::ptr::<impl *const T>::offset(_106, const 13isize) -> bb27; // scope 1 at src\cryptonight.rs:88:20: 88:38
    }

    bb27: {                             
        StorageDead(_106);               // scope 1 at src\cryptonight.rs:88:38: 88:38
        _104 = (*_105);                  // scope 1 at src\cryptonight.rs:88:19: 88:38
        _103 = _104 as usize (Misc);     // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_104);               // scope 1 at src\cryptonight.rs:88:47: 88:47
        _107 = Len((cryptonight::LUT2: [u32; 256])); // scope 1 at src\cryptonight.rs:88:13: 88:48
        _108 = Lt(_103, _107);           // scope 1 at src\cryptonight.rs:88:13: 88:48
        assert(_108, "index out of bounds: the len is {} but the index is {}", _107, _103) -> bb28; // scope 1 at src\cryptonight.rs:88:13: 88:48
    }

    bb28: {                             
        _102 = (cryptonight::LUT2: [u32; 256])[_103]; // scope 1 at src\cryptonight.rs:88:13: 88:48
        _78 = BitXor(_79, _102);         // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_102);               // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_79);                // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_109);               // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_110);               // scope 1 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_111);               // scope 1 at src\cryptonight.rs:166:55: 166:66
        _111 = _3;                       // scope 1 at src\cryptonight.rs:166:55: 166:66
        _110 = const std::ptr::<impl *const T>::offset(_111, const 2isize) -> bb29; // scope 1 at src\cryptonight.rs:89:14: 89:32
    }

    bb29: {                             
        StorageDead(_111);               // scope 1 at src\cryptonight.rs:89:32: 89:32
        _109 = (*_110);                  // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_112);               // scope 1 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_113);               // scope 1 at src\cryptonight.rs:166:70: 166:73
        _113 = _1;                       // scope 1 at src\cryptonight.rs:166:70: 166:73
        _112 = const std::ptr::<impl *mut T>::offset(_113, const 2isize) -> bb30; // scope 1 at src\cryptonight.rs:84:10: 84:29
    }

    bb30: {                             
        StorageDead(_113);               // scope 1 at src\cryptonight.rs:84:29: 84:29
        (*_112) = BitXor(_78, _109);     // scope 1 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_109);               // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_78);                // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_112);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_110);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_105);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_98);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_91);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_84);                // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageLive(_114);               // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_115);               // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_116);               // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_117);               // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_118);               // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_119);               // scope 1 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_120);               // scope 1 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_121);               // scope 1 at src\cryptonight.rs:167:46: 167:51
        _121 = _4;                       // scope 1 at src\cryptonight.rs:167:46: 167:51
        _120 = const std::ptr::<impl *const T>::offset(_121, const 1isize) -> bb31; // scope 1 at src\cryptonight.rs:85:20: 85:38
    }

    bb31: {                             
        StorageDead(_121);               // scope 1 at src\cryptonight.rs:85:38: 85:38
        _119 = (*_120);                  // scope 1 at src\cryptonight.rs:85:19: 85:38
        _118 = _119 as usize (Misc);     // scope 1 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_119);               // scope 1 at src\cryptonight.rs:85:47: 85:47
        _122 = Len((cryptonight::LUT2: [u32; 256])); // scope 1 at src\cryptonight.rs:85:13: 85:48
        _123 = Lt(_118, _122);           // scope 1 at src\cryptonight.rs:85:13: 85:48
        assert(_123, "index out of bounds: the len is {} but the index is {}", _122, _118) -> bb32; // scope 1 at src\cryptonight.rs:85:13: 85:48
    }

    bb32: {                             
        _117 = (cryptonight::LUT2: [u32; 256])[_118]; // scope 1 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_124);               // scope 1 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_125);               // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_126);               // scope 1 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_127);               // scope 1 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_128);               // scope 1 at src\cryptonight.rs:167:46: 167:51
        _128 = _4;                       // scope 1 at src\cryptonight.rs:167:46: 167:51
        _127 = const std::ptr::<impl *const T>::offset(_128, const 6isize) -> bb33; // scope 1 at src\cryptonight.rs:86:20: 86:38
    }

    bb33: {                             
        StorageDead(_128);               // scope 1 at src\cryptonight.rs:86:38: 86:38
        _126 = (*_127);                  // scope 1 at src\cryptonight.rs:86:19: 86:38
        _125 = _126 as usize (Misc);     // scope 1 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_126);               // scope 1 at src\cryptonight.rs:86:47: 86:47
        _129 = Len((cryptonight::LUT3: [u32; 256])); // scope 1 at src\cryptonight.rs:86:13: 86:48
        _130 = Lt(_125, _129);           // scope 1 at src\cryptonight.rs:86:13: 86:48
        assert(_130, "index out of bounds: the len is {} but the index is {}", _129, _125) -> bb34; // scope 1 at src\cryptonight.rs:86:13: 86:48
    }

    bb34: {                             
        _124 = (cryptonight::LUT3: [u32; 256])[_125]; // scope 1 at src\cryptonight.rs:86:13: 86:48
        _116 = BitXor(_117, _124);       // scope 1 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_124);               // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_117);               // scope 1 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_131);               // scope 1 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_132);               // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_133);               // scope 1 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_134);               // scope 1 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_135);               // scope 1 at src\cryptonight.rs:167:46: 167:51
        _135 = _4;                       // scope 1 at src\cryptonight.rs:167:46: 167:51
        _134 = const std::ptr::<impl *const T>::offset(_135, const 11isize) -> bb35; // scope 1 at src\cryptonight.rs:87:20: 87:38
    }

    bb35: {                             
        StorageDead(_135);               // scope 1 at src\cryptonight.rs:87:38: 87:38
        _133 = (*_134);                  // scope 1 at src\cryptonight.rs:87:19: 87:38
        _132 = _133 as usize (Misc);     // scope 1 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_133);               // scope 1 at src\cryptonight.rs:87:47: 87:47
        _136 = Len((cryptonight::LUT4: [u32; 256])); // scope 1 at src\cryptonight.rs:87:13: 87:48
        _137 = Lt(_132, _136);           // scope 1 at src\cryptonight.rs:87:13: 87:48
        assert(_137, "index out of bounds: the len is {} but the index is {}", _136, _132) -> bb36; // scope 1 at src\cryptonight.rs:87:13: 87:48
    }

    bb36: {                             
        _131 = (cryptonight::LUT4: [u32; 256])[_132]; // scope 1 at src\cryptonight.rs:87:13: 87:48
        _115 = BitXor(_116, _131);       // scope 1 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_131);               // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_116);               // scope 1 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_138);               // scope 1 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_139);               // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_140);               // scope 1 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_141);               // scope 1 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_142);               // scope 1 at src\cryptonight.rs:167:46: 167:51
        _142 = _4;                       // scope 1 at src\cryptonight.rs:167:46: 167:51
        _141 = const std::ptr::<impl *const T>::offset(_142, const 12isize) -> bb37; // scope 1 at src\cryptonight.rs:88:20: 88:38
    }

    bb37: {                             
        StorageDead(_142);               // scope 1 at src\cryptonight.rs:88:38: 88:38
        _140 = (*_141);                  // scope 1 at src\cryptonight.rs:88:19: 88:38
        _139 = _140 as usize (Misc);     // scope 1 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_140);               // scope 1 at src\cryptonight.rs:88:47: 88:47
        _143 = Len((cryptonight::LUT1: [u32; 256])); // scope 1 at src\cryptonight.rs:88:13: 88:48
        _144 = Lt(_139, _143);           // scope 1 at src\cryptonight.rs:88:13: 88:48
        assert(_144, "index out of bounds: the len is {} but the index is {}", _143, _139) -> bb38; // scope 1 at src\cryptonight.rs:88:13: 88:48
    }

    bb38: {                             
        _138 = (cryptonight::LUT1: [u32; 256])[_139]; // scope 1 at src\cryptonight.rs:88:13: 88:48
        _114 = BitXor(_115, _138);       // scope 1 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_138);               // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_115);               // scope 1 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_145);               // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_146);               // scope 1 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_147);               // scope 1 at src\cryptonight.rs:167:55: 167:66
        _147 = _3;                       // scope 1 at src\cryptonight.rs:167:55: 167:66
        _146 = const std::ptr::<impl *const T>::offset(_147, const 3isize) -> bb39; // scope 1 at src\cryptonight.rs:89:14: 89:32
    }

    bb39: {                             
        StorageDead(_147);               // scope 1 at src\cryptonight.rs:89:32: 89:32
        _145 = (*_146);                  // scope 1 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_148);               // scope 1 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_149);               // scope 1 at src\cryptonight.rs:167:70: 167:73
        _149 = _1;                       // scope 1 at src\cryptonight.rs:167:70: 167:73
        _148 = const std::ptr::<impl *mut T>::offset(_149, const 3isize) -> bb40; // scope 1 at src\cryptonight.rs:84:10: 84:29
    }

    bb40: {                             
        StorageDead(_149);               // scope 1 at src\cryptonight.rs:84:29: 84:29
        (*_148) = BitXor(_114, _145);    // scope 1 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_145);               // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_114);               // scope 1 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_148);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_146);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_141);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_134);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_127);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_120);               // scope 1 at src\cryptonight.rs:89:33: 89:33
        _0 = ();                         // scope 0 at src\cryptonight.rs:162:101: 168:2
        StorageDead(_4);                 // scope 0 at src\cryptonight.rs:168:2: 168:2
        return;                          // scope 0 at src\cryptonight.rs:168:2: 168:2
    }
}

fn cryptonight::cryptonight(_1: &[u8], _2: &mut [u8]) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let mut _17: cryptonight::CNContext; // "context" in scope 1 at src\cryptonight.rs:99:9: 99:20
    }
    scope 2 {
    }
    let mut _3: ();
    let mut _4: ();
    let mut _5: std::fmt::Arguments;
    let mut _6: &[&str];
    let mut _7: &[&str; 1];
    let mut _8: &[&str; 1];
    let mut _9: &[std::fmt::ArgumentV1];
    let mut _10: &[std::fmt::ArgumentV1; 0];
    let mut _11: &[std::fmt::ArgumentV1; 0];
    let mut _12: ();
    let mut _13: ();
    let mut _14: std::result::Result<(), std::io::Error>;
    let mut _15: &mut std::io::Stdout;
    let mut _16: std::io::Stdout;
    let mut _18: ();
    let mut _19: &mut [u8];
    let mut _20: &[u8];
    let mut _21: &mut cryptonight::CNContext;
    let mut _22: &mut cryptonight::CNContext;

    bb0: {                              
        StorageLive(_5);                 // scope 0 at <print macros>:2:27: 2:58
        StorageLive(_6);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_7);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_8);                 // scope 0 at <println macros>:2:11: 2:36
        _8 = promoted[1];                // scope 0 at <println macros>:2:11: 2:36
        _7 = _8;                         // scope 0 at <println macros>:2:11: 2:36
        _6 = _7 as &[&str] (Unsize);     // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_7);                 // scope 0 at <println macros>:2:36: 2:36
        StorageLive(_9);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_10);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_11);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_12);                // scope 0 at <println macros>:2:11: 2:36
        _12 = ();                        // scope 0 at <println macros>:2:11: 2:36
        _11 = promoted[0];               // scope 0 at <println macros>:2:11: 2:36
        _10 = _11;                       // scope 0 at <println macros>:2:11: 2:36
        _9 = _10 as &[std::fmt::ArgumentV1] (Unsize); // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_10);                // scope 0 at <println macros>:2:36: 2:36
        _5 = const std::fmt::Arguments::new_v1(_6, _9) -> bb1; // scope 0 at <print macros>:2:27: 2:58
    }

    bb1: {                              
        StorageDead(_9);                 // scope 0 at <print macros>:2:58: 2:58
        StorageDead(_6);                 // scope 0 at <print macros>:2:58: 2:58
        _4 = const std::io::_print(_5) -> bb2; // scope 0 at <print macros>:2:1: 2:60
    }

    bb2: {                              
        StorageDead(_5);                 // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_11);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_12);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_8);                 // scope 0 at <print macros>:2:60: 2:60
        StorageLive(_14);                // scope 0 at src\cryptonight.rs:10:9: 10:36
        StorageLive(_15);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        StorageLive(_16);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        _16 = const std::io::stdout() -> bb3; // scope 0 at src\cryptonight.rs:10:9: 10:28
    }

    bb3: {                              
        _15 = &mut _16;                  // scope 0 at src\cryptonight.rs:10:9: 10:28
        _14 = const std::io::Write::flush(_15) -> [return: bb4, unwind: bb6]; // scope 0 at src\cryptonight.rs:10:9: 10:36
    }

    bb4: {                              
        StorageDead(_15);                // scope 0 at src\cryptonight.rs:10:36: 10:36
        _13 = const <std::result::Result<T, E>>::unwrap(_14) -> [return: bb7, unwind: bb6]; // scope 0 at src\cryptonight.rs:10:9: 10:45
    }

    bb5: {                               // cleanup
        resume;                          // scope 0 at src\cryptonight.rs:97:1: 101:2
    }

    bb6: {                               // cleanup
        drop(_16) -> bb5;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb7: {                              
        StorageDead(_14);                // scope 0 at src\cryptonight.rs:10:45: 10:45
        drop(_16) -> bb8;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb8: {                              
        StorageDead(_16);                // scope 0 at src\cryptonight.rs:10:46: 10:46
        _3 = ();                         // scope 0 at src\cryptonight.rs:7:21: 11:6
        StorageLive(_17);                // scope 1 at src\cryptonight.rs:99:9: 99:20
        _17 = const std::default::Default::default() -> bb9; // scope 1 at src\cryptonight.rs:99:23: 99:43
    }

    bb9: {                              
        StorageLive(_19);                // scope 1 at src\cryptonight.rs:100:17: 100:23
        _19 = _2;                        // scope 1 at src\cryptonight.rs:100:17: 100:23
        StorageLive(_20);                // scope 1 at src\cryptonight.rs:100:25: 100:30
        _20 = _1;                        // scope 1 at src\cryptonight.rs:100:25: 100:30
        StorageLive(_21);                // scope 1 at src\cryptonight.rs:100:32: 100:44
        StorageLive(_22);                // scope 1 at src\cryptonight.rs:100:32: 100:44
        _22 = &mut _17;                  // scope 1 at src\cryptonight.rs:100:32: 100:44
        _21 = _22;                       // scope 1 at src\cryptonight.rs:100:32: 100:44
        _18 = const cryptonight::cn_hash_ctx(_19, _20, _21) -> [return: bb10, unwind: bb11]; // scope 1 at src\cryptonight.rs:100:5: 100:45
    }

    bb10: {                             
        StorageDead(_21);                // scope 1 at src\cryptonight.rs:100:45: 100:45
        StorageDead(_20);                // scope 1 at src\cryptonight.rs:100:45: 100:45
        StorageDead(_19);                // scope 1 at src\cryptonight.rs:100:45: 100:45
        StorageDead(_22);                // scope 1 at src\cryptonight.rs:100:46: 100:46
        _0 = ();                         // scope 0 at src\cryptonight.rs:97:52: 101:2
        drop(_17) -> bb12;               // scope 0 at src\cryptonight.rs:101:2: 101:2
    }

    bb11: {                              // cleanup
        drop(_17) -> bb5;                // scope 0 at src\cryptonight.rs:101:2: 101:2
    }

    bb12: {                             
        StorageDead(_17);                // scope 0 at src\cryptonight.rs:101:2: 101:2
        return;                          // scope 0 at src\cryptonight.rs:101:2: 101:2
    }
}

promoted[0] in cryptonight::cryptonight: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return pointer
    scope 1 {
    }
    scope 2 {
    }
    let mut _1: [std::fmt::ArgumentV1; 0];

    bb0: {                              
        _1 = [];                         // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

promoted[1] in cryptonight::cryptonight: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return pointer
    scope 1 {
    }
    scope 2 {
    }
    let mut _1: [&str; 1];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {                              
        _3 = const "Kek\n";              // scope 0 at <println macros>:2:11: 2:36
        _2 = _3;                         // scope 0 at <println macros>:2:11: 2:36
        _1 = [_2];                       // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

const cryptonight::TOTAL_BLOCKS: usize = {
    let mut _0: usize;                   // return pointer
    let mut _1: bool;

    bb0: {                              
        _1 = Eq(const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:42) => cnminer[5424]::cryptonight[0]::AES_BLOCK_SIZE[0] }, Slice([])), const 0usize); // scope 0 at src\cryptonight.rs:28:35: 28:58
        assert(!_1, "attempt to divide by zero") -> bb1; // scope 0 at src\cryptonight.rs:28:35: 28:58
    }

    bb1: {                              
        _0 = Div(const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:40) => cnminer[5424]::cryptonight[0]::MEMORY[0] }, Slice([])), const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:42) => cnminer[5424]::cryptonight[0]::AES_BLOCK_SIZE[0] }, Slice([]))); // scope 0 at src\cryptonight.rs:28:35: 28:58
        return;                          // scope 0 at src\cryptonight.rs:28:1: 28:59
    }
}

const cryptonight::LUT3::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 256usize;             // scope 0 at src\cryptonight.rs:367:20: 367:23
        return;                          // scope 0 at src\cryptonight.rs:367:20: 367:23
    }
}

const cryptonight::MEMORY: usize = {
    let mut _0: usize;                   // return pointer
    let mut _1: (usize, bool);

    bb0: {                              
        _1 = CheckedShl(const 1usize, const 21i32); // scope 0 at src\cryptonight.rs:22:35: 22:42
        assert(!(_1.1: bool), "attempt to shift left with overflow") -> bb1; // scope 0 at src\cryptonight.rs:22:35: 22:42
    }

    bb1: {                              
        _0 = (_1.0: usize);              // scope 0 at src\cryptonight.rs:22:35: 22:42
        return;                          // scope 0 at src\cryptonight.rs:22:1: 22:43
    }
}

const cryptonight::CNContext::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:42) => cnminer[5424]::cryptonight[0]::AES_BLOCK_SIZE[0] }, Slice([])); // scope 0 at src\cryptonight.rs:58:17: 58:31
        return;                          // scope 0 at src\cryptonight.rs:58:17: 58:31
    }
}

fn oaes::<impl at src\oaes.rs:85:1: 130:2>::import_key_data(_1: &mut oaes::AesContext, _2: &[u8], _3: usize) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let _9: ();                      // "_result" in scope 1 at src\oaes.rs:90:9: 92:10
        scope 3 {
            let mut _16: std::ops::Range<usize>; // "iter" in scope 3 at src\oaes.rs:90:9: 92:10
            scope 4 {
                let mut _18: usize;      // "__next" in scope 4 at src\oaes.rs:90:9: 92:10
                scope 6 {
                    let _22: usize;      // "val" in scope 6 at src\oaes.rs:90:9: 92:10
                }
                scope 7 {
                    let _25: usize;      // "i" in scope 7 at src\oaes.rs:90:13: 90:14
                }
                scope 8 {
                }
            }
            scope 5 {
            }
        }
    }
    scope 2 {
    }
    let mut _4: oaes::AesKey;
    let mut _5: usize;
    let mut _6: std::vec::Vec<u8>;
    let mut _7: usize;
    let mut _8: ();
    let mut _10: std::ops::Range<usize>;
    let mut _11: std::ops::Range<usize>;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &[u8];
    let mut _15: usize;
    let mut _17: ();
    let mut _19: std::option::Option<usize>;
    let mut _20: &mut std::ops::Range<usize>;
    let mut _21: &mut std::ops::Range<usize>;
    let mut _23: isize;
    let mut _24: usize;
    let mut _26: usize;
    let mut _27: ();
    let mut _28: u8;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let mut _32: &mut u8;
    let mut _33: &mut std::vec::Vec<u8>;
    let mut _34: usize;
    let mut _35: ();
    let mut _36: ();
    let mut _37: &mut oaes::AesContext;

    bb0: {                              
        StorageLive(_4);                 // scope 0 at src\oaes.rs:87:20: 87:37
        _4 = const std::default::Default::default() -> bb1; // scope 0 at src\oaes.rs:87:20: 87:37
    }

    bb1: {                              
        drop(((*_1).0: oaes::AesKey)) -> [return: bb16, unwind: bb15]; // scope 0 at src\oaes.rs:87:9: 87:17
    }

    bb2: {                               // cleanup
        resume;                          // scope 0 at src\oaes.rs:86:5: 94:6
    }

    bb3: {                              
        StorageDead(_7);                 // scope 0 at <vec macros>:2:45: 2:45
        drop((((*_1).0: oaes::AesKey).0: std::vec::Vec<u8>)) -> [return: bb18, unwind: bb17]; // scope 0 at src\oaes.rs:89:9: 89:22
    }

    bb4: {                              
        StorageDead(_14);                // scope 1 at src\oaes.rs:90:42: 90:42
        StorageLive(_15);                // scope 1 at src\oaes.rs:90:44: 90:52
        _15 = _3;                        // scope 1 at src\oaes.rs:90:44: 90:52
        _12 = const std::cmp::Ord::min(_13, _15) -> bb5; // scope 1 at src\oaes.rs:90:21: 90:53
    }

    bb5: {                              
        StorageDead(_15);                // scope 1 at src\oaes.rs:90:53: 90:53
        StorageDead(_13);                // scope 1 at src\oaes.rs:90:53: 90:53
        _11 = std::ops::Range<usize> { start: const 0usize, end: _12 }; // scope 1 at src\oaes.rs:90:18: 90:53
        StorageDead(_12);                // scope 1 at src\oaes.rs:90:53: 90:53
        _10 = const std::iter::IntoIterator::into_iter(_11) -> bb6; // scope 1 at src\oaes.rs:90:9: 92:10
    }

    bb6: {                              
        StorageDead(_11);                // scope 1 at src\oaes.rs:92:10: 92:10
        StorageLive(_16);                // scope 3 at src\oaes.rs:90:9: 92:10
        _16 = _10;                       // scope 3 at src\oaes.rs:90:9: 92:10
        goto -> bb7;                     // scope 3 at src\oaes.rs:90:9: 92:10
    }

    bb7: {                              
        StorageLive(_18);                // scope 4 at src\oaes.rs:90:9: 92:10
        StorageLive(_19);                // scope 4 at src\oaes.rs:90:9: 92:10
        StorageLive(_20);                // scope 4 at src\oaes.rs:90:9: 92:10
        StorageLive(_21);                // scope 4 at src\oaes.rs:90:9: 92:10
        _21 = &mut _16;                  // scope 4 at src\oaes.rs:90:9: 92:10
        _20 = _21;                       // scope 4 at src\oaes.rs:90:9: 92:10
        _19 = const std::iter::Iterator::next(_20) -> bb8; // scope 4 at src\oaes.rs:90:9: 92:10
    }

    bb8: {                              
        StorageDead(_20);                // scope 4 at src\oaes.rs:92:10: 92:10
        _23 = discriminant(_19);         // scope 6 at src\oaes.rs:90:9: 92:10
        switchInt(_23) -> [0isize: bb9, 1isize: bb11, otherwise: bb10]; // scope 6 at src\oaes.rs:90:9: 92:10
    }

    bb9: {                              
        _9 = ();                         // scope 6 at src\oaes.rs:90:9: 92:10
        StorageDead(_22);                // scope 4 at src\oaes.rs:92:10: 92:10
        StorageDead(_19);                // scope 4 at src\oaes.rs:92:10: 92:10
        StorageDead(_21);                // scope 4 at src\oaes.rs:92:10: 92:10
        StorageDead(_18);                // scope 3 at src\oaes.rs:92:10: 92:10
        StorageDead(_16);                // scope 1 at src\oaes.rs:92:10: 92:10
        StorageDead(_10);                // scope 1 at src\oaes.rs:92:10: 92:10
        StorageLive(_35);                // scope 1 at src\oaes.rs:90:9: 92:10
        _35 = _9;                        // scope 1 at src\oaes.rs:90:9: 92:10
        _8 = _35;                        // scope 1 at src\oaes.rs:90:9: 92:10
        StorageDead(_35);                // scope 1 at src\oaes.rs:92:10: 92:10
        StorageDead(_9);                 // scope 0 at src\oaes.rs:92:10: 92:10
        StorageLive(_37);                // scope 0 at src\oaes.rs:93:9: 93:13
        _37 = _1;                        // scope 0 at src\oaes.rs:93:9: 93:13
        _36 = const oaes::AesContext::key_expand(_37) -> bb14; // scope 0 at src\oaes.rs:93:9: 93:26
    }

    bb10: {                             
        unreachable;                     // scope 0 at src\oaes.rs:94:6: 94:6
    }

    bb11: {                             
        StorageLive(_22);                // scope 6 at src\oaes.rs:90:9: 92:10
        _22 = ((_19 as Some).0: usize);  // scope 6 at src\oaes.rs:90:9: 92:10
        StorageLive(_24);                // scope 6 at src\oaes.rs:90:9: 92:10
        _24 = _22;                       // scope 6 at src\oaes.rs:90:9: 92:10
        _18 = _24;                       // scope 6 at src\oaes.rs:90:9: 92:10
        StorageDead(_24);                // scope 6 at src\oaes.rs:92:10: 92:10
        StorageDead(_22);                // scope 4 at src\oaes.rs:92:10: 92:10
        StorageDead(_19);                // scope 4 at src\oaes.rs:92:10: 92:10
        StorageDead(_21);                // scope 4 at src\oaes.rs:92:10: 92:10
        StorageLive(_25);                // scope 7 at src\oaes.rs:90:13: 90:14
        StorageLive(_26);                // scope 7 at src\oaes.rs:90:9: 92:10
        _26 = _18;                       // scope 7 at src\oaes.rs:90:9: 92:10
        _25 = _26;                       // scope 7 at src\oaes.rs:90:9: 92:10
        StorageDead(_26);                // scope 7 at src\oaes.rs:92:10: 92:10
        StorageLive(_28);                // scope 7 at src\oaes.rs:91:32: 91:39
        StorageLive(_29);                // scope 7 at src\oaes.rs:91:37: 91:38
        _29 = _25;                       // scope 7 at src\oaes.rs:91:37: 91:38
        _30 = Len((*_2));                // scope 7 at src\oaes.rs:91:32: 91:39
        _31 = Lt(_29, _30);              // scope 7 at src\oaes.rs:91:32: 91:39
        assert(_31, "index out of bounds: the len is {} but the index is {}", _30, _29) -> bb12; // scope 7 at src\oaes.rs:91:32: 91:39
    }

    bb12: {                             
        _28 = (*_2)[_29];                // scope 7 at src\oaes.rs:91:32: 91:39
        StorageLive(_32);                // scope 7 at src\oaes.rs:91:13: 91:29
        StorageLive(_33);                // scope 7 at src\oaes.rs:91:13: 91:26
        _33 = &mut (((*_1).0: oaes::AesKey).0: std::vec::Vec<u8>); // scope 7 at src\oaes.rs:91:13: 91:26
        StorageLive(_34);                // scope 7 at src\oaes.rs:91:27: 91:28
        _34 = _25;                       // scope 7 at src\oaes.rs:91:27: 91:28
        _32 = const std::ops::IndexMut::index_mut(_33, _34) -> bb13; // scope 7 at src\oaes.rs:91:13: 91:29
    }

    bb13: {                             
        StorageDead(_34);                // scope 7 at src\oaes.rs:91:29: 91:29
        StorageDead(_33);                // scope 7 at src\oaes.rs:91:29: 91:29
        (*_32) = _28;                    // scope 7 at src\oaes.rs:91:13: 91:39
        StorageDead(_28);                // scope 7 at src\oaes.rs:91:39: 91:39
        StorageDead(_32);                // scope 7 at src\oaes.rs:91:40: 91:40
        _27 = ();                        // scope 7 at src\oaes.rs:90:54: 92:10
        _17 = ();                        // scope 3 at src\oaes.rs:90:9: 92:10
        StorageDead(_25);                // scope 4 at src\oaes.rs:92:10: 92:10
        StorageDead(_18);                // scope 3 at src\oaes.rs:92:10: 92:10
        goto -> bb7;                     // scope 3 at src\oaes.rs:90:9: 92:10
    }

    bb14: {                             
        StorageDead(_37);                // scope 0 at src\oaes.rs:93:26: 93:26
        _0 = ();                         // scope 0 at src\oaes.rs:86:69: 94:6
        return;                          // scope 0 at src\oaes.rs:94:6: 94:6
    }

    bb15: {                              // cleanup
        ((*_1).0: oaes::AesKey) = _4;    // scope 0 at src\oaes.rs:87:9: 87:17
        goto -> bb2;                     // scope 0 at src\oaes.rs:87:9: 87:17
    }

    bb16: {                             
        ((*_1).0: oaes::AesKey) = _4;    // scope 0 at src\oaes.rs:87:9: 87:17
        StorageDead(_4);                 // scope 0 at src\oaes.rs:87:37: 87:37
        StorageLive(_5);                 // scope 0 at src\oaes.rs:88:29: 88:37
        _5 = _3;                         // scope 0 at src\oaes.rs:88:29: 88:37
        (((*_1).0: oaes::AesKey).1: usize) = _5; // scope 0 at src\oaes.rs:88:9: 88:37
        StorageDead(_5);                 // scope 0 at src\oaes.rs:88:37: 88:37
        StorageLive(_6);                 // scope 0 at <vec macros>:2:1: 2:45
        StorageLive(_7);                 // scope 0 at src\oaes.rs:89:35: 89:43
        _7 = _3;                         // scope 0 at src\oaes.rs:89:35: 89:43
        _6 = const std::vec::from_elem(const 0u8, _7) -> bb3; // scope 0 at <vec macros>:2:1: 2:45
    }

    bb17: {                              // cleanup
        (((*_1).0: oaes::AesKey).0: std::vec::Vec<u8>) = _6; // scope 0 at src\oaes.rs:89:9: 89:22
        goto -> bb2;                     // scope 0 at src\oaes.rs:89:9: 89:22
    }

    bb18: {                             
        (((*_1).0: oaes::AesKey).0: std::vec::Vec<u8>) = _6; // scope 0 at src\oaes.rs:89:9: 89:22
        StorageDead(_6);                 // scope 0 at src\oaes.rs:89:44: 89:44
        StorageLive(_9);                 // scope 1 at src\oaes.rs:90:9: 92:10
        StorageLive(_10);                // scope 1 at src\oaes.rs:90:9: 92:10
        StorageLive(_11);                // scope 1 at src\oaes.rs:90:18: 90:53
        StorageLive(_12);                // scope 1 at src\oaes.rs:90:21: 90:53
        StorageLive(_13);                // scope 1 at src\oaes.rs:90:32: 90:42
        StorageLive(_14);                // scope 1 at src\oaes.rs:90:32: 90:36
        _14 = _2;                        // scope 1 at src\oaes.rs:90:32: 90:36
        _13 = const std::slice::<impl [T]>::len(_14) -> bb4; // scope 1 at src\oaes.rs:90:32: 90:42
    }
}

const oaes::<impl at src\oaes.rs:85:1: 130:2>::key_expand::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])); // scope 0 at src\oaes.rs:108:34: 108:46
        return;                          // scope 0 at src\oaes.rs:108:34: 108:46
    }
}

static oaes::OAES_SUB_BYTE_VALUE: [[u8; 16]; 16] = {
    let mut _0: [[u8; 16]; 16];          // return pointer
    let mut _1: [u8; 16];
    let mut _2: [u8; 16];
    let mut _3: [u8; 16];
    let mut _4: [u8; 16];
    let mut _5: [u8; 16];
    let mut _6: [u8; 16];
    let mut _7: [u8; 16];
    let mut _8: [u8; 16];
    let mut _9: [u8; 16];
    let mut _10: [u8; 16];
    let mut _11: [u8; 16];
    let mut _12: [u8; 16];
    let mut _13: [u8; 16];
    let mut _14: [u8; 16];
    let mut _15: [u8; 16];
    let mut _16: [u8; 16];

    bb0: {                              
        StorageLive(_1);                 // scope 0 at src\oaes.rs:25:16: 25:114
        _1 = [const 99u8, const 124u8, const 119u8, const 123u8, const 242u8, const 107u8, const 111u8, const 197u8, const 48u8, const 1u8, const 103u8, const 43u8, const 254u8, const 215u8, const 171u8, const 118u8]; // scope 0 at src\oaes.rs:25:16: 25:114
        StorageLive(_2);                 // scope 0 at src\oaes.rs:26:16: 26:114
        _2 = [const 202u8, const 130u8, const 201u8, const 125u8, const 250u8, const 89u8, const 71u8, const 240u8, const 173u8, const 212u8, const 162u8, const 175u8, const 156u8, const 164u8, const 114u8, const 192u8]; // scope 0 at src\oaes.rs:26:16: 26:114
        StorageLive(_3);                 // scope 0 at src\oaes.rs:27:16: 27:114
        _3 = [const 183u8, const 253u8, const 147u8, const 38u8, const 54u8, const 63u8, const 247u8, const 204u8, const 52u8, const 165u8, const 229u8, const 241u8, const 113u8, const 216u8, const 49u8, const 21u8]; // scope 0 at src\oaes.rs:27:16: 27:114
        StorageLive(_4);                 // scope 0 at src\oaes.rs:28:16: 28:114
        _4 = [const 4u8, const 199u8, const 35u8, const 195u8, const 24u8, const 150u8, const 5u8, const 154u8, const 7u8, const 18u8, const 128u8, const 226u8, const 235u8, const 39u8, const 178u8, const 117u8]; // scope 0 at src\oaes.rs:28:16: 28:114
        StorageLive(_5);                 // scope 0 at src\oaes.rs:29:16: 29:114
        _5 = [const 9u8, const 131u8, const 44u8, const 26u8, const 27u8, const 110u8, const 90u8, const 160u8, const 82u8, const 59u8, const 214u8, const 179u8, const 41u8, const 227u8, const 47u8, const 132u8]; // scope 0 at src\oaes.rs:29:16: 29:114
        StorageLive(_6);                 // scope 0 at src\oaes.rs:30:16: 30:114
        _6 = [const 83u8, const 209u8, const 0u8, const 237u8, const 32u8, const 252u8, const 177u8, const 91u8, const 106u8, const 203u8, const 190u8, const 57u8, const 74u8, const 76u8, const 88u8, const 207u8]; // scope 0 at src\oaes.rs:30:16: 30:114
        StorageLive(_7);                 // scope 0 at src\oaes.rs:31:16: 31:114
        _7 = [const 208u8, const 239u8, const 170u8, const 251u8, const 67u8, const 77u8, const 51u8, const 133u8, const 69u8, const 249u8, const 2u8, const 127u8, const 80u8, const 60u8, const 159u8, const 168u8]; // scope 0 at src\oaes.rs:31:16: 31:114
        StorageLive(_8);                 // scope 0 at src\oaes.rs:32:16: 32:114
        _8 = [const 81u8, const 163u8, const 64u8, const 143u8, const 146u8, const 157u8, const 56u8, const 245u8, const 188u8, const 182u8, const 218u8, const 33u8, const 16u8, const 255u8, const 243u8, const 210u8]; // scope 0 at src\oaes.rs:32:16: 32:114
        StorageLive(_9);                 // scope 0 at src\oaes.rs:33:16: 33:114
        _9 = [const 205u8, const 12u8, const 19u8, const 236u8, const 95u8, const 151u8, const 68u8, const 23u8, const 196u8, const 167u8, const 126u8, const 61u8, const 100u8, const 93u8, const 25u8, const 115u8]; // scope 0 at src\oaes.rs:33:16: 33:114
        StorageLive(_10);                // scope 0 at src\oaes.rs:34:16: 34:114
        _10 = [const 96u8, const 129u8, const 79u8, const 220u8, const 34u8, const 42u8, const 144u8, const 136u8, const 70u8, const 238u8, const 184u8, const 20u8, const 222u8, const 94u8, const 11u8, const 219u8]; // scope 0 at src\oaes.rs:34:16: 34:114
        StorageLive(_11);                // scope 0 at src\oaes.rs:35:16: 35:114
        _11 = [const 224u8, const 50u8, const 58u8, const 10u8, const 73u8, const 6u8, const 36u8, const 92u8, const 194u8, const 211u8, const 172u8, const 98u8, const 145u8, const 149u8, const 228u8, const 121u8]; // scope 0 at src\oaes.rs:35:16: 35:114
        StorageLive(_12);                // scope 0 at src\oaes.rs:36:16: 36:114
        _12 = [const 231u8, const 200u8, const 55u8, const 109u8, const 141u8, const 213u8, const 78u8, const 169u8, const 108u8, const 86u8, const 244u8, const 234u8, const 101u8, const 122u8, const 174u8, const 8u8]; // scope 0 at src\oaes.rs:36:16: 36:114
        StorageLive(_13);                // scope 0 at src\oaes.rs:37:16: 37:114
        _13 = [const 186u8, const 120u8, const 37u8, const 46u8, const 28u8, const 166u8, const 180u8, const 198u8, const 232u8, const 221u8, const 116u8, const 31u8, const 75u8, const 189u8, const 139u8, const 138u8]; // scope 0 at src\oaes.rs:37:16: 37:114
        StorageLive(_14);                // scope 0 at src\oaes.rs:38:16: 38:114
        _14 = [const 112u8, const 62u8, const 181u8, const 102u8, const 72u8, const 3u8, const 246u8, const 14u8, const 97u8, const 53u8, const 87u8, const 185u8, const 134u8, const 193u8, const 29u8, const 158u8]; // scope 0 at src\oaes.rs:38:16: 38:114
        StorageLive(_15);                // scope 0 at src\oaes.rs:39:16: 39:114
        _15 = [const 225u8, const 248u8, const 152u8, const 17u8, const 105u8, const 217u8, const 142u8, const 148u8, const 155u8, const 30u8, const 135u8, const 233u8, const 206u8, const 85u8, const 40u8, const 223u8]; // scope 0 at src\oaes.rs:39:16: 39:114
        StorageLive(_16);                // scope 0 at src\oaes.rs:40:16: 40:114
        _16 = [const 140u8, const 161u8, const 137u8, const 13u8, const 191u8, const 230u8, const 66u8, const 104u8, const 65u8, const 153u8, const 45u8, const 15u8, const 176u8, const 84u8, const 187u8, const 22u8]; // scope 0 at src\oaes.rs:40:16: 40:114
        _0 = [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16]; // scope 0 at src\oaes.rs:23:47: 41:2
        return;                          // scope 0 at src\oaes.rs:23:1: 41:3
    }
}

static keccak::KECCAK_PILN: [usize; 24] = {
    let mut _0: [usize; 24];             // return pointer

    bb0: {                              
        _0 = [const 10usize, const 7usize, const 11usize, const 17usize, const 18usize, const 3usize, const 5usize, const 16usize, const 8usize, const 21usize, const 24usize, const 4usize, const 15usize, const 23usize, const 19usize, const 13usize, const 12usize, const 2usize, const 20usize, const 14usize, const 22usize, const 9usize, const 6usize, const 1usize]; // scope 0 at src\keccak.rs:176:36: 179:2
        return;                          // scope 0 at src\keccak.rs:176:1: 179:3
    }
}

const oaes::OAES_GF_8::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 10usize;              // scope 0 at src\oaes.rs:18:25: 18:27
        return;                          // scope 0 at src\oaes.rs:18:25: 18:27
    }
}

const keccak::keccakf::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 25usize;              // scope 0 at src\keccak.rs:86:30: 86:32
        return;                          // scope 0 at src\keccak.rs:86:30: 86:32
    }
}

fn cryptonight::sub_and_shift_and_mix_add_round_in_place(_1: *mut u32, _2: *const u32) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let mut _3: [u8; 16];            // "state_arr" in scope 1 at src\cryptonight.rs:172:9: 172:22
        scope 3 {
            let _11: *const u8;          // "state" in scope 3 at src\cryptonight.rs:174:9: 174:14
        }
        scope 4 {
        }
    }
    scope 2 {
    }
    let mut _4: ();
    let mut _5: &mut [u8];
    let mut _6: &mut [u8; 16];
    let mut _7: &[u8];
    let mut _8: &[u8];
    let mut _9: *const u8;
    let mut _10: *mut u32;
    let mut _12: &[u8];
    let mut _13: &[u8; 16];
    let mut _14: u32;
    let mut _15: u32;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: usize;
    let mut _19: u8;
    let mut _20: *const u8;
    let mut _21: *const u8;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: u32;
    let mut _25: usize;
    let mut _26: u8;
    let mut _27: *const u8;
    let mut _28: *const u8;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: u32;
    let mut _32: usize;
    let mut _33: u8;
    let mut _34: *const u8;
    let mut _35: *const u8;
    let mut _36: usize;
    let mut _37: bool;
    let mut _38: u32;
    let mut _39: usize;
    let mut _40: u8;
    let mut _41: *const u8;
    let mut _42: *const u8;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: u32;
    let mut _46: *const u32;
    let mut _47: *const u32;
    let mut _48: *mut u32;
    let mut _49: *mut u32;
    let mut _50: u32;
    let mut _51: u32;
    let mut _52: u32;
    let mut _53: u32;
    let mut _54: usize;
    let mut _55: u8;
    let mut _56: *const u8;
    let mut _57: *const u8;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: u32;
    let mut _61: usize;
    let mut _62: u8;
    let mut _63: *const u8;
    let mut _64: *const u8;
    let mut _65: usize;
    let mut _66: bool;
    let mut _67: u32;
    let mut _68: usize;
    let mut _69: u8;
    let mut _70: *const u8;
    let mut _71: *const u8;
    let mut _72: usize;
    let mut _73: bool;
    let mut _74: u32;
    let mut _75: usize;
    let mut _76: u8;
    let mut _77: *const u8;
    let mut _78: *const u8;
    let mut _79: usize;
    let mut _80: bool;
    let mut _81: u32;
    let mut _82: *const u32;
    let mut _83: *const u32;
    let mut _84: *mut u32;
    let mut _85: *mut u32;
    let mut _86: u32;
    let mut _87: u32;
    let mut _88: u32;
    let mut _89: u32;
    let mut _90: usize;
    let mut _91: u8;
    let mut _92: *const u8;
    let mut _93: *const u8;
    let mut _94: usize;
    let mut _95: bool;
    let mut _96: u32;
    let mut _97: usize;
    let mut _98: u8;
    let mut _99: *const u8;
    let mut _100: *const u8;
    let mut _101: usize;
    let mut _102: bool;
    let mut _103: u32;
    let mut _104: usize;
    let mut _105: u8;
    let mut _106: *const u8;
    let mut _107: *const u8;
    let mut _108: usize;
    let mut _109: bool;
    let mut _110: u32;
    let mut _111: usize;
    let mut _112: u8;
    let mut _113: *const u8;
    let mut _114: *const u8;
    let mut _115: usize;
    let mut _116: bool;
    let mut _117: u32;
    let mut _118: *const u32;
    let mut _119: *const u32;
    let mut _120: *mut u32;
    let mut _121: *mut u32;
    let mut _122: u32;
    let mut _123: u32;
    let mut _124: u32;
    let mut _125: u32;
    let mut _126: usize;
    let mut _127: u8;
    let mut _128: *const u8;
    let mut _129: *const u8;
    let mut _130: usize;
    let mut _131: bool;
    let mut _132: u32;
    let mut _133: usize;
    let mut _134: u8;
    let mut _135: *const u8;
    let mut _136: *const u8;
    let mut _137: usize;
    let mut _138: bool;
    let mut _139: u32;
    let mut _140: usize;
    let mut _141: u8;
    let mut _142: *const u8;
    let mut _143: *const u8;
    let mut _144: usize;
    let mut _145: bool;
    let mut _146: u32;
    let mut _147: usize;
    let mut _148: u8;
    let mut _149: *const u8;
    let mut _150: *const u8;
    let mut _151: usize;
    let mut _152: bool;
    let mut _153: u32;
    let mut _154: *const u32;
    let mut _155: *const u32;
    let mut _156: *mut u32;
    let mut _157: *mut u32;

    bb0: {                              
        StorageLive(_3);                 // scope 1 at src\cryptonight.rs:172:9: 172:22
        _3 = [const 0u8; Us64(16)];      // scope 1 at src\cryptonight.rs:172:25: 172:34
        StorageLive(_5);                 // scope 1 at src\cryptonight.rs:173:5: 173:14
        StorageLive(_6);                 // scope 1 at src\cryptonight.rs:173:5: 173:14
        _6 = &mut _3;                    // scope 1 at src\cryptonight.rs:173:5: 173:14
        _5 = _6 as &mut [u8] (Unsize);   // scope 1 at src\cryptonight.rs:173:5: 173:14
        StorageDead(_6);                 // scope 1 at src\cryptonight.rs:173:14: 173:14
        StorageLive(_7);                 // scope 1 at src\cryptonight.rs:173:31: 173:82
        StorageLive(_8);                 // scope 1 at src\cryptonight.rs:173:31: 173:82
        StorageLive(_9);                 // scope 1 at src\cryptonight.rs:173:60: 173:77
        StorageLive(_10);                // scope 1 at src\cryptonight.rs:173:60: 173:64
        _10 = _1;                        // scope 1 at src\cryptonight.rs:173:60: 173:64
        _9 = _10 as *const u8 (Misc);    // scope 1 at src\cryptonight.rs:173:60: 173:77
        StorageDead(_10);                // scope 1 at src\cryptonight.rs:173:77: 173:77
        _8 = const std::slice::from_raw_parts(_9, const 16usize) -> bb1; // scope 1 at src\cryptonight.rs:173:31: 173:82
    }

    bb1: {                              
        _7 = _8;                         // scope 1 at src\cryptonight.rs:173:31: 173:82
        StorageDead(_9);                 // scope 1 at src\cryptonight.rs:173:82: 173:82
        _4 = const std::slice::<impl [T]>::copy_from_slice(_5, _7) -> bb2; // scope 1 at src\cryptonight.rs:173:5: 173:83
    }

    bb2: {                              
        StorageDead(_7);                 // scope 1 at src\cryptonight.rs:173:83: 173:83
        StorageDead(_5);                 // scope 1 at src\cryptonight.rs:173:83: 173:83
        StorageDead(_8);                 // scope 1 at src\cryptonight.rs:173:84: 173:84
        StorageLive(_11);                // scope 3 at src\cryptonight.rs:174:9: 174:14
        StorageLive(_12);                // scope 3 at src\cryptonight.rs:174:17: 174:26
        StorageLive(_13);                // scope 3 at src\cryptonight.rs:174:17: 174:26
        _13 = &_3;                       // scope 3 at src\cryptonight.rs:174:17: 174:26
        _12 = _13 as &[u8] (Unsize);     // scope 3 at src\cryptonight.rs:174:17: 174:26
        StorageDead(_13);                // scope 3 at src\cryptonight.rs:174:26: 174:26
        _11 = const std::slice::<impl [T]>::as_ptr(_12) -> bb3; // scope 3 at src\cryptonight.rs:174:17: 174:35
    }

    bb3: {                              
        StorageDead(_12);                // scope 3 at src\cryptonight.rs:174:35: 174:35
        StorageLive(_14);                // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_15);                // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_16);                // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_17);                // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_18);                // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_19);                // scope 3 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_20);                // scope 3 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_21);                // scope 3 at src\cryptonight.rs:175:46: 175:51
        _21 = _11;                       // scope 3 at src\cryptonight.rs:175:46: 175:51
        _20 = const std::ptr::<impl *const T>::offset(_21, const 0isize) -> bb4; // scope 3 at src\cryptonight.rs:85:20: 85:38
    }

    bb4: {                              
        StorageDead(_21);                // scope 3 at src\cryptonight.rs:85:38: 85:38
        _19 = (*_20);                    // scope 3 at src\cryptonight.rs:85:19: 85:38
        _18 = _19 as usize (Misc);       // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_19);                // scope 3 at src\cryptonight.rs:85:47: 85:47
        _22 = Len((cryptonight::LUT1: [u32; 256])); // scope 3 at src\cryptonight.rs:85:13: 85:48
        _23 = Lt(_18, _22);              // scope 3 at src\cryptonight.rs:85:13: 85:48
        assert(_23, "index out of bounds: the len is {} but the index is {}", _22, _18) -> bb5; // scope 3 at src\cryptonight.rs:85:13: 85:48
    }

    bb5: {                              
        _17 = (cryptonight::LUT1: [u32; 256])[_18]; // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_24);                // scope 3 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_25);                // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_26);                // scope 3 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_27);                // scope 3 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_28);                // scope 3 at src\cryptonight.rs:175:46: 175:51
        _28 = _11;                       // scope 3 at src\cryptonight.rs:175:46: 175:51
        _27 = const std::ptr::<impl *const T>::offset(_28, const 5isize) -> bb6; // scope 3 at src\cryptonight.rs:86:20: 86:38
    }

    bb6: {                              
        StorageDead(_28);                // scope 3 at src\cryptonight.rs:86:38: 86:38
        _26 = (*_27);                    // scope 3 at src\cryptonight.rs:86:19: 86:38
        _25 = _26 as usize (Misc);       // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_26);                // scope 3 at src\cryptonight.rs:86:47: 86:47
        _29 = Len((cryptonight::LUT2: [u32; 256])); // scope 3 at src\cryptonight.rs:86:13: 86:48
        _30 = Lt(_25, _29);              // scope 3 at src\cryptonight.rs:86:13: 86:48
        assert(_30, "index out of bounds: the len is {} but the index is {}", _29, _25) -> bb7; // scope 3 at src\cryptonight.rs:86:13: 86:48
    }

    bb7: {                              
        _24 = (cryptonight::LUT2: [u32; 256])[_25]; // scope 3 at src\cryptonight.rs:86:13: 86:48
        _16 = BitXor(_17, _24);          // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_24);                // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_17);                // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_31);                // scope 3 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_32);                // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_33);                // scope 3 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_34);                // scope 3 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_35);                // scope 3 at src\cryptonight.rs:175:46: 175:51
        _35 = _11;                       // scope 3 at src\cryptonight.rs:175:46: 175:51
        _34 = const std::ptr::<impl *const T>::offset(_35, const 10isize) -> bb8; // scope 3 at src\cryptonight.rs:87:20: 87:38
    }

    bb8: {                              
        StorageDead(_35);                // scope 3 at src\cryptonight.rs:87:38: 87:38
        _33 = (*_34);                    // scope 3 at src\cryptonight.rs:87:19: 87:38
        _32 = _33 as usize (Misc);       // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_33);                // scope 3 at src\cryptonight.rs:87:47: 87:47
        _36 = Len((cryptonight::LUT3: [u32; 256])); // scope 3 at src\cryptonight.rs:87:13: 87:48
        _37 = Lt(_32, _36);              // scope 3 at src\cryptonight.rs:87:13: 87:48
        assert(_37, "index out of bounds: the len is {} but the index is {}", _36, _32) -> bb9; // scope 3 at src\cryptonight.rs:87:13: 87:48
    }

    bb9: {                              
        _31 = (cryptonight::LUT3: [u32; 256])[_32]; // scope 3 at src\cryptonight.rs:87:13: 87:48
        _15 = BitXor(_16, _31);          // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_31);                // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_16);                // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_38);                // scope 3 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_39);                // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_40);                // scope 3 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_41);                // scope 3 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_42);                // scope 3 at src\cryptonight.rs:175:46: 175:51
        _42 = _11;                       // scope 3 at src\cryptonight.rs:175:46: 175:51
        _41 = const std::ptr::<impl *const T>::offset(_42, const 15isize) -> bb10; // scope 3 at src\cryptonight.rs:88:20: 88:38
    }

    bb10: {                             
        StorageDead(_42);                // scope 3 at src\cryptonight.rs:88:38: 88:38
        _40 = (*_41);                    // scope 3 at src\cryptonight.rs:88:19: 88:38
        _39 = _40 as usize (Misc);       // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_40);                // scope 3 at src\cryptonight.rs:88:47: 88:47
        _43 = Len((cryptonight::LUT4: [u32; 256])); // scope 3 at src\cryptonight.rs:88:13: 88:48
        _44 = Lt(_39, _43);              // scope 3 at src\cryptonight.rs:88:13: 88:48
        assert(_44, "index out of bounds: the len is {} but the index is {}", _43, _39) -> bb11; // scope 3 at src\cryptonight.rs:88:13: 88:48
    }

    bb11: {                             
        _38 = (cryptonight::LUT4: [u32; 256])[_39]; // scope 3 at src\cryptonight.rs:88:13: 88:48
        _14 = BitXor(_15, _38);          // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_38);                // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_15);                // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_45);                // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_46);                // scope 3 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_47);                // scope 3 at src\cryptonight.rs:175:55: 175:66
        _47 = _2;                        // scope 3 at src\cryptonight.rs:175:55: 175:66
        _46 = const std::ptr::<impl *const T>::offset(_47, const 0isize) -> bb12; // scope 3 at src\cryptonight.rs:89:14: 89:32
    }

    bb12: {                             
        StorageDead(_47);                // scope 3 at src\cryptonight.rs:89:32: 89:32
        _45 = (*_46);                    // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_48);                // scope 3 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_49);                // scope 3 at src\cryptonight.rs:175:70: 175:74
        _49 = _1;                        // scope 3 at src\cryptonight.rs:175:70: 175:74
        _48 = const std::ptr::<impl *mut T>::offset(_49, const 0isize) -> bb13; // scope 3 at src\cryptonight.rs:84:10: 84:29
    }

    bb13: {                             
        StorageDead(_49);                // scope 3 at src\cryptonight.rs:84:29: 84:29
        (*_48) = BitXor(_14, _45);       // scope 3 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_45);                // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_14);                // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_48);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_46);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_41);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_34);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_27);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_20);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageLive(_50);                // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_51);                // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_52);                // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_53);                // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_54);                // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_55);                // scope 3 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_56);                // scope 3 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_57);                // scope 3 at src\cryptonight.rs:176:46: 176:51
        _57 = _11;                       // scope 3 at src\cryptonight.rs:176:46: 176:51
        _56 = const std::ptr::<impl *const T>::offset(_57, const 3isize) -> bb14; // scope 3 at src\cryptonight.rs:85:20: 85:38
    }

    bb14: {                             
        StorageDead(_57);                // scope 3 at src\cryptonight.rs:85:38: 85:38
        _55 = (*_56);                    // scope 3 at src\cryptonight.rs:85:19: 85:38
        _54 = _55 as usize (Misc);       // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_55);                // scope 3 at src\cryptonight.rs:85:47: 85:47
        _58 = Len((cryptonight::LUT4: [u32; 256])); // scope 3 at src\cryptonight.rs:85:13: 85:48
        _59 = Lt(_54, _58);              // scope 3 at src\cryptonight.rs:85:13: 85:48
        assert(_59, "index out of bounds: the len is {} but the index is {}", _58, _54) -> bb15; // scope 3 at src\cryptonight.rs:85:13: 85:48
    }

    bb15: {                             
        _53 = (cryptonight::LUT4: [u32; 256])[_54]; // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_60);                // scope 3 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_61);                // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_62);                // scope 3 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_63);                // scope 3 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_64);                // scope 3 at src\cryptonight.rs:176:46: 176:51
        _64 = _11;                       // scope 3 at src\cryptonight.rs:176:46: 176:51
        _63 = const std::ptr::<impl *const T>::offset(_64, const 4isize) -> bb16; // scope 3 at src\cryptonight.rs:86:20: 86:38
    }

    bb16: {                             
        StorageDead(_64);                // scope 3 at src\cryptonight.rs:86:38: 86:38
        _62 = (*_63);                    // scope 3 at src\cryptonight.rs:86:19: 86:38
        _61 = _62 as usize (Misc);       // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_62);                // scope 3 at src\cryptonight.rs:86:47: 86:47
        _65 = Len((cryptonight::LUT1: [u32; 256])); // scope 3 at src\cryptonight.rs:86:13: 86:48
        _66 = Lt(_61, _65);              // scope 3 at src\cryptonight.rs:86:13: 86:48
        assert(_66, "index out of bounds: the len is {} but the index is {}", _65, _61) -> bb17; // scope 3 at src\cryptonight.rs:86:13: 86:48
    }

    bb17: {                             
        _60 = (cryptonight::LUT1: [u32; 256])[_61]; // scope 3 at src\cryptonight.rs:86:13: 86:48
        _52 = BitXor(_53, _60);          // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_60);                // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_53);                // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_67);                // scope 3 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_68);                // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_69);                // scope 3 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_70);                // scope 3 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_71);                // scope 3 at src\cryptonight.rs:176:46: 176:51
        _71 = _11;                       // scope 3 at src\cryptonight.rs:176:46: 176:51
        _70 = const std::ptr::<impl *const T>::offset(_71, const 9isize) -> bb18; // scope 3 at src\cryptonight.rs:87:20: 87:38
    }

    bb18: {                             
        StorageDead(_71);                // scope 3 at src\cryptonight.rs:87:38: 87:38
        _69 = (*_70);                    // scope 3 at src\cryptonight.rs:87:19: 87:38
        _68 = _69 as usize (Misc);       // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_69);                // scope 3 at src\cryptonight.rs:87:47: 87:47
        _72 = Len((cryptonight::LUT2: [u32; 256])); // scope 3 at src\cryptonight.rs:87:13: 87:48
        _73 = Lt(_68, _72);              // scope 3 at src\cryptonight.rs:87:13: 87:48
        assert(_73, "index out of bounds: the len is {} but the index is {}", _72, _68) -> bb19; // scope 3 at src\cryptonight.rs:87:13: 87:48
    }

    bb19: {                             
        _67 = (cryptonight::LUT2: [u32; 256])[_68]; // scope 3 at src\cryptonight.rs:87:13: 87:48
        _51 = BitXor(_52, _67);          // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_67);                // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_52);                // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_74);                // scope 3 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_75);                // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_76);                // scope 3 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_77);                // scope 3 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_78);                // scope 3 at src\cryptonight.rs:176:46: 176:51
        _78 = _11;                       // scope 3 at src\cryptonight.rs:176:46: 176:51
        _77 = const std::ptr::<impl *const T>::offset(_78, const 14isize) -> bb20; // scope 3 at src\cryptonight.rs:88:20: 88:38
    }

    bb20: {                             
        StorageDead(_78);                // scope 3 at src\cryptonight.rs:88:38: 88:38
        _76 = (*_77);                    // scope 3 at src\cryptonight.rs:88:19: 88:38
        _75 = _76 as usize (Misc);       // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_76);                // scope 3 at src\cryptonight.rs:88:47: 88:47
        _79 = Len((cryptonight::LUT3: [u32; 256])); // scope 3 at src\cryptonight.rs:88:13: 88:48
        _80 = Lt(_75, _79);              // scope 3 at src\cryptonight.rs:88:13: 88:48
        assert(_80, "index out of bounds: the len is {} but the index is {}", _79, _75) -> bb21; // scope 3 at src\cryptonight.rs:88:13: 88:48
    }

    bb21: {                             
        _74 = (cryptonight::LUT3: [u32; 256])[_75]; // scope 3 at src\cryptonight.rs:88:13: 88:48
        _50 = BitXor(_51, _74);          // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_74);                // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_51);                // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_81);                // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_82);                // scope 3 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_83);                // scope 3 at src\cryptonight.rs:176:55: 176:66
        _83 = _2;                        // scope 3 at src\cryptonight.rs:176:55: 176:66
        _82 = const std::ptr::<impl *const T>::offset(_83, const 1isize) -> bb22; // scope 3 at src\cryptonight.rs:89:14: 89:32
    }

    bb22: {                             
        StorageDead(_83);                // scope 3 at src\cryptonight.rs:89:32: 89:32
        _81 = (*_82);                    // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_84);                // scope 3 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_85);                // scope 3 at src\cryptonight.rs:176:70: 176:74
        _85 = _1;                        // scope 3 at src\cryptonight.rs:176:70: 176:74
        _84 = const std::ptr::<impl *mut T>::offset(_85, const 1isize) -> bb23; // scope 3 at src\cryptonight.rs:84:10: 84:29
    }

    bb23: {                             
        StorageDead(_85);                // scope 3 at src\cryptonight.rs:84:29: 84:29
        (*_84) = BitXor(_50, _81);       // scope 3 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_81);                // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_50);                // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_84);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_82);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_77);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_70);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_63);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_56);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageLive(_86);                // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_87);                // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_88);                // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_89);                // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_90);                // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_91);                // scope 3 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_92);                // scope 3 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_93);                // scope 3 at src\cryptonight.rs:177:46: 177:51
        _93 = _11;                       // scope 3 at src\cryptonight.rs:177:46: 177:51
        _92 = const std::ptr::<impl *const T>::offset(_93, const 2isize) -> bb24; // scope 3 at src\cryptonight.rs:85:20: 85:38
    }

    bb24: {                             
        StorageDead(_93);                // scope 3 at src\cryptonight.rs:85:38: 85:38
        _91 = (*_92);                    // scope 3 at src\cryptonight.rs:85:19: 85:38
        _90 = _91 as usize (Misc);       // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_91);                // scope 3 at src\cryptonight.rs:85:47: 85:47
        _94 = Len((cryptonight::LUT3: [u32; 256])); // scope 3 at src\cryptonight.rs:85:13: 85:48
        _95 = Lt(_90, _94);              // scope 3 at src\cryptonight.rs:85:13: 85:48
        assert(_95, "index out of bounds: the len is {} but the index is {}", _94, _90) -> bb25; // scope 3 at src\cryptonight.rs:85:13: 85:48
    }

    bb25: {                             
        _89 = (cryptonight::LUT3: [u32; 256])[_90]; // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_96);                // scope 3 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_97);                // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_98);                // scope 3 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_99);                // scope 3 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_100);               // scope 3 at src\cryptonight.rs:177:46: 177:51
        _100 = _11;                      // scope 3 at src\cryptonight.rs:177:46: 177:51
        _99 = const std::ptr::<impl *const T>::offset(_100, const 7isize) -> bb26; // scope 3 at src\cryptonight.rs:86:20: 86:38
    }

    bb26: {                             
        StorageDead(_100);               // scope 3 at src\cryptonight.rs:86:38: 86:38
        _98 = (*_99);                    // scope 3 at src\cryptonight.rs:86:19: 86:38
        _97 = _98 as usize (Misc);       // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_98);                // scope 3 at src\cryptonight.rs:86:47: 86:47
        _101 = Len((cryptonight::LUT4: [u32; 256])); // scope 3 at src\cryptonight.rs:86:13: 86:48
        _102 = Lt(_97, _101);            // scope 3 at src\cryptonight.rs:86:13: 86:48
        assert(_102, "index out of bounds: the len is {} but the index is {}", _101, _97) -> bb27; // scope 3 at src\cryptonight.rs:86:13: 86:48
    }

    bb27: {                             
        _96 = (cryptonight::LUT4: [u32; 256])[_97]; // scope 3 at src\cryptonight.rs:86:13: 86:48
        _88 = BitXor(_89, _96);          // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_96);                // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_89);                // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_103);               // scope 3 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_104);               // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_105);               // scope 3 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_106);               // scope 3 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_107);               // scope 3 at src\cryptonight.rs:177:46: 177:51
        _107 = _11;                      // scope 3 at src\cryptonight.rs:177:46: 177:51
        _106 = const std::ptr::<impl *const T>::offset(_107, const 8isize) -> bb28; // scope 3 at src\cryptonight.rs:87:20: 87:38
    }

    bb28: {                             
        StorageDead(_107);               // scope 3 at src\cryptonight.rs:87:38: 87:38
        _105 = (*_106);                  // scope 3 at src\cryptonight.rs:87:19: 87:38
        _104 = _105 as usize (Misc);     // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_105);               // scope 3 at src\cryptonight.rs:87:47: 87:47
        _108 = Len((cryptonight::LUT1: [u32; 256])); // scope 3 at src\cryptonight.rs:87:13: 87:48
        _109 = Lt(_104, _108);           // scope 3 at src\cryptonight.rs:87:13: 87:48
        assert(_109, "index out of bounds: the len is {} but the index is {}", _108, _104) -> bb29; // scope 3 at src\cryptonight.rs:87:13: 87:48
    }

    bb29: {                             
        _103 = (cryptonight::LUT1: [u32; 256])[_104]; // scope 3 at src\cryptonight.rs:87:13: 87:48
        _87 = BitXor(_88, _103);         // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_103);               // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_88);                // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_110);               // scope 3 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_111);               // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_112);               // scope 3 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_113);               // scope 3 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_114);               // scope 3 at src\cryptonight.rs:177:46: 177:51
        _114 = _11;                      // scope 3 at src\cryptonight.rs:177:46: 177:51
        _113 = const std::ptr::<impl *const T>::offset(_114, const 13isize) -> bb30; // scope 3 at src\cryptonight.rs:88:20: 88:38
    }

    bb30: {                             
        StorageDead(_114);               // scope 3 at src\cryptonight.rs:88:38: 88:38
        _112 = (*_113);                  // scope 3 at src\cryptonight.rs:88:19: 88:38
        _111 = _112 as usize (Misc);     // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_112);               // scope 3 at src\cryptonight.rs:88:47: 88:47
        _115 = Len((cryptonight::LUT2: [u32; 256])); // scope 3 at src\cryptonight.rs:88:13: 88:48
        _116 = Lt(_111, _115);           // scope 3 at src\cryptonight.rs:88:13: 88:48
        assert(_116, "index out of bounds: the len is {} but the index is {}", _115, _111) -> bb31; // scope 3 at src\cryptonight.rs:88:13: 88:48
    }

    bb31: {                             
        _110 = (cryptonight::LUT2: [u32; 256])[_111]; // scope 3 at src\cryptonight.rs:88:13: 88:48
        _86 = BitXor(_87, _110);         // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_110);               // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_87);                // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_117);               // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_118);               // scope 3 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_119);               // scope 3 at src\cryptonight.rs:177:55: 177:66
        _119 = _2;                       // scope 3 at src\cryptonight.rs:177:55: 177:66
        _118 = const std::ptr::<impl *const T>::offset(_119, const 2isize) -> bb32; // scope 3 at src\cryptonight.rs:89:14: 89:32
    }

    bb32: {                             
        StorageDead(_119);               // scope 3 at src\cryptonight.rs:89:32: 89:32
        _117 = (*_118);                  // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_120);               // scope 3 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_121);               // scope 3 at src\cryptonight.rs:177:70: 177:74
        _121 = _1;                       // scope 3 at src\cryptonight.rs:177:70: 177:74
        _120 = const std::ptr::<impl *mut T>::offset(_121, const 2isize) -> bb33; // scope 3 at src\cryptonight.rs:84:10: 84:29
    }

    bb33: {                             
        StorageDead(_121);               // scope 3 at src\cryptonight.rs:84:29: 84:29
        (*_120) = BitXor(_86, _117);     // scope 3 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_117);               // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_86);                // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_120);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_118);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_113);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_106);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_99);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_92);                // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageLive(_122);               // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageLive(_123);               // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageLive(_124);               // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageLive(_125);               // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_126);               // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageLive(_127);               // scope 3 at src\cryptonight.rs:85:19: 85:38
        StorageLive(_128);               // scope 3 at src\cryptonight.rs:85:20: 85:38
        StorageLive(_129);               // scope 3 at src\cryptonight.rs:178:46: 178:51
        _129 = _11;                      // scope 3 at src\cryptonight.rs:178:46: 178:51
        _128 = const std::ptr::<impl *const T>::offset(_129, const 1isize) -> bb34; // scope 3 at src\cryptonight.rs:85:20: 85:38
    }

    bb34: {                             
        StorageDead(_129);               // scope 3 at src\cryptonight.rs:85:38: 85:38
        _127 = (*_128);                  // scope 3 at src\cryptonight.rs:85:19: 85:38
        _126 = _127 as usize (Misc);     // scope 3 at src\cryptonight.rs:85:19: 85:47
        StorageDead(_127);               // scope 3 at src\cryptonight.rs:85:47: 85:47
        _130 = Len((cryptonight::LUT2: [u32; 256])); // scope 3 at src\cryptonight.rs:85:13: 85:48
        _131 = Lt(_126, _130);           // scope 3 at src\cryptonight.rs:85:13: 85:48
        assert(_131, "index out of bounds: the len is {} but the index is {}", _130, _126) -> bb35; // scope 3 at src\cryptonight.rs:85:13: 85:48
    }

    bb35: {                             
        _125 = (cryptonight::LUT2: [u32; 256])[_126]; // scope 3 at src\cryptonight.rs:85:13: 85:48
        StorageLive(_132);               // scope 3 at src\cryptonight.rs:86:13: 86:48
        StorageLive(_133);               // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageLive(_134);               // scope 3 at src\cryptonight.rs:86:19: 86:38
        StorageLive(_135);               // scope 3 at src\cryptonight.rs:86:20: 86:38
        StorageLive(_136);               // scope 3 at src\cryptonight.rs:178:46: 178:51
        _136 = _11;                      // scope 3 at src\cryptonight.rs:178:46: 178:51
        _135 = const std::ptr::<impl *const T>::offset(_136, const 6isize) -> bb36; // scope 3 at src\cryptonight.rs:86:20: 86:38
    }

    bb36: {                             
        StorageDead(_136);               // scope 3 at src\cryptonight.rs:86:38: 86:38
        _134 = (*_135);                  // scope 3 at src\cryptonight.rs:86:19: 86:38
        _133 = _134 as usize (Misc);     // scope 3 at src\cryptonight.rs:86:19: 86:47
        StorageDead(_134);               // scope 3 at src\cryptonight.rs:86:47: 86:47
        _137 = Len((cryptonight::LUT3: [u32; 256])); // scope 3 at src\cryptonight.rs:86:13: 86:48
        _138 = Lt(_133, _137);           // scope 3 at src\cryptonight.rs:86:13: 86:48
        assert(_138, "index out of bounds: the len is {} but the index is {}", _137, _133) -> bb37; // scope 3 at src\cryptonight.rs:86:13: 86:48
    }

    bb37: {                             
        _132 = (cryptonight::LUT3: [u32; 256])[_133]; // scope 3 at src\cryptonight.rs:86:13: 86:48
        _124 = BitXor(_125, _132);       // scope 3 at src\cryptonight.rs:85:13: 86:48
        StorageDead(_132);               // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageDead(_125);               // scope 3 at src\cryptonight.rs:86:48: 86:48
        StorageLive(_139);               // scope 3 at src\cryptonight.rs:87:13: 87:48
        StorageLive(_140);               // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageLive(_141);               // scope 3 at src\cryptonight.rs:87:19: 87:38
        StorageLive(_142);               // scope 3 at src\cryptonight.rs:87:20: 87:38
        StorageLive(_143);               // scope 3 at src\cryptonight.rs:178:46: 178:51
        _143 = _11;                      // scope 3 at src\cryptonight.rs:178:46: 178:51
        _142 = const std::ptr::<impl *const T>::offset(_143, const 11isize) -> bb38; // scope 3 at src\cryptonight.rs:87:20: 87:38
    }

    bb38: {                             
        StorageDead(_143);               // scope 3 at src\cryptonight.rs:87:38: 87:38
        _141 = (*_142);                  // scope 3 at src\cryptonight.rs:87:19: 87:38
        _140 = _141 as usize (Misc);     // scope 3 at src\cryptonight.rs:87:19: 87:47
        StorageDead(_141);               // scope 3 at src\cryptonight.rs:87:47: 87:47
        _144 = Len((cryptonight::LUT4: [u32; 256])); // scope 3 at src\cryptonight.rs:87:13: 87:48
        _145 = Lt(_140, _144);           // scope 3 at src\cryptonight.rs:87:13: 87:48
        assert(_145, "index out of bounds: the len is {} but the index is {}", _144, _140) -> bb39; // scope 3 at src\cryptonight.rs:87:13: 87:48
    }

    bb39: {                             
        _139 = (cryptonight::LUT4: [u32; 256])[_140]; // scope 3 at src\cryptonight.rs:87:13: 87:48
        _123 = BitXor(_124, _139);       // scope 3 at src\cryptonight.rs:85:13: 87:48
        StorageDead(_139);               // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageDead(_124);               // scope 3 at src\cryptonight.rs:87:48: 87:48
        StorageLive(_146);               // scope 3 at src\cryptonight.rs:88:13: 88:48
        StorageLive(_147);               // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageLive(_148);               // scope 3 at src\cryptonight.rs:88:19: 88:38
        StorageLive(_149);               // scope 3 at src\cryptonight.rs:88:20: 88:38
        StorageLive(_150);               // scope 3 at src\cryptonight.rs:178:46: 178:51
        _150 = _11;                      // scope 3 at src\cryptonight.rs:178:46: 178:51
        _149 = const std::ptr::<impl *const T>::offset(_150, const 12isize) -> bb40; // scope 3 at src\cryptonight.rs:88:20: 88:38
    }

    bb40: {                             
        StorageDead(_150);               // scope 3 at src\cryptonight.rs:88:38: 88:38
        _148 = (*_149);                  // scope 3 at src\cryptonight.rs:88:19: 88:38
        _147 = _148 as usize (Misc);     // scope 3 at src\cryptonight.rs:88:19: 88:47
        StorageDead(_148);               // scope 3 at src\cryptonight.rs:88:47: 88:47
        _151 = Len((cryptonight::LUT1: [u32; 256])); // scope 3 at src\cryptonight.rs:88:13: 88:48
        _152 = Lt(_147, _151);           // scope 3 at src\cryptonight.rs:88:13: 88:48
        assert(_152, "index out of bounds: the len is {} but the index is {}", _151, _147) -> bb41; // scope 3 at src\cryptonight.rs:88:13: 88:48
    }

    bb41: {                             
        _146 = (cryptonight::LUT1: [u32; 256])[_147]; // scope 3 at src\cryptonight.rs:88:13: 88:48
        _122 = BitXor(_123, _146);       // scope 3 at src\cryptonight.rs:85:13: 88:48
        StorageDead(_146);               // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageDead(_123);               // scope 3 at src\cryptonight.rs:88:48: 88:48
        StorageLive(_153);               // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_154);               // scope 3 at src\cryptonight.rs:89:14: 89:32
        StorageLive(_155);               // scope 3 at src\cryptonight.rs:178:55: 178:66
        _155 = _2;                       // scope 3 at src\cryptonight.rs:178:55: 178:66
        _154 = const std::ptr::<impl *const T>::offset(_155, const 3isize) -> bb42; // scope 3 at src\cryptonight.rs:89:14: 89:32
    }

    bb42: {                             
        StorageDead(_155);               // scope 3 at src\cryptonight.rs:89:32: 89:32
        _153 = (*_154);                  // scope 3 at src\cryptonight.rs:89:13: 89:32
        StorageLive(_156);               // scope 3 at src\cryptonight.rs:84:10: 84:29
        StorageLive(_157);               // scope 3 at src\cryptonight.rs:178:70: 178:74
        _157 = _1;                       // scope 3 at src\cryptonight.rs:178:70: 178:74
        _156 = const std::ptr::<impl *mut T>::offset(_157, const 3isize) -> bb43; // scope 3 at src\cryptonight.rs:84:10: 84:29
    }

    bb43: {                             
        StorageDead(_157);               // scope 3 at src\cryptonight.rs:84:29: 84:29
        (*_156) = BitXor(_122, _153);    // scope 3 at src\cryptonight.rs:84:9: 89:32
        StorageDead(_153);               // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_122);               // scope 3 at src\cryptonight.rs:89:32: 89:32
        StorageDead(_156);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_154);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_149);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_142);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_135);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        StorageDead(_128);               // scope 3 at src\cryptonight.rs:89:33: 89:33
        _0 = ();                         // scope 0 at src\cryptonight.rs:171:93: 179:2
        StorageDead(_11);                // scope 1 at src\cryptonight.rs:179:2: 179:2
        StorageDead(_3);                 // scope 0 at src\cryptonight.rs:179:2: 179:2
        return;                          // scope 0 at src\cryptonight.rs:179:2: 179:2
    }
}

fn cryptonight::blargobblegims(_1: &[u8], _2: &mut [u8]) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let mut _17: cryptonight::CNContext; // "context" in scope 1 at src\cryptonight.rs:106:9: 106:20
    }
    scope 2 {
    }
    let mut _3: ();
    let mut _4: ();
    let mut _5: std::fmt::Arguments;
    let mut _6: &[&str];
    let mut _7: &[&str; 1];
    let mut _8: &[&str; 1];
    let mut _9: &[std::fmt::ArgumentV1];
    let mut _10: &[std::fmt::ArgumentV1; 0];
    let mut _11: &[std::fmt::ArgumentV1; 0];
    let mut _12: ();
    let mut _13: ();
    let mut _14: std::result::Result<(), std::io::Error>;
    let mut _15: &mut std::io::Stdout;
    let mut _16: std::io::Stdout;
    let mut _18: ();
    let mut _19: &mut [u8];
    let mut _20: &[u8];
    let mut _21: &mut cryptonight::CNContext;
    let mut _22: &mut cryptonight::CNContext;

    bb0: {                              
        StorageLive(_5);                 // scope 0 at <print macros>:2:27: 2:58
        StorageLive(_6);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_7);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_8);                 // scope 0 at <println macros>:2:11: 2:36
        _8 = promoted[1];                // scope 0 at <println macros>:2:11: 2:36
        _7 = _8;                         // scope 0 at <println macros>:2:11: 2:36
        _6 = _7 as &[&str] (Unsize);     // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_7);                 // scope 0 at <println macros>:2:36: 2:36
        StorageLive(_9);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_10);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_11);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_12);                // scope 0 at <println macros>:2:11: 2:36
        _12 = ();                        // scope 0 at <println macros>:2:11: 2:36
        _11 = promoted[0];               // scope 0 at <println macros>:2:11: 2:36
        _10 = _11;                       // scope 0 at <println macros>:2:11: 2:36
        _9 = _10 as &[std::fmt::ArgumentV1] (Unsize); // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_10);                // scope 0 at <println macros>:2:36: 2:36
        _5 = const std::fmt::Arguments::new_v1(_6, _9) -> bb1; // scope 0 at <print macros>:2:27: 2:58
    }

    bb1: {                              
        StorageDead(_9);                 // scope 0 at <print macros>:2:58: 2:58
        StorageDead(_6);                 // scope 0 at <print macros>:2:58: 2:58
        _4 = const std::io::_print(_5) -> bb2; // scope 0 at <print macros>:2:1: 2:60
    }

    bb2: {                              
        StorageDead(_5);                 // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_11);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_12);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_8);                 // scope 0 at <print macros>:2:60: 2:60
        StorageLive(_14);                // scope 0 at src\cryptonight.rs:10:9: 10:36
        StorageLive(_15);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        StorageLive(_16);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        _16 = const std::io::stdout() -> bb3; // scope 0 at src\cryptonight.rs:10:9: 10:28
    }

    bb3: {                              
        _15 = &mut _16;                  // scope 0 at src\cryptonight.rs:10:9: 10:28
        _14 = const std::io::Write::flush(_15) -> [return: bb4, unwind: bb6]; // scope 0 at src\cryptonight.rs:10:9: 10:36
    }

    bb4: {                              
        StorageDead(_15);                // scope 0 at src\cryptonight.rs:10:36: 10:36
        _13 = const <std::result::Result<T, E>>::unwrap(_14) -> [return: bb7, unwind: bb6]; // scope 0 at src\cryptonight.rs:10:9: 10:45
    }

    bb5: {                               // cleanup
        resume;                          // scope 0 at src\cryptonight.rs:104:1: 108:2
    }

    bb6: {                               // cleanup
        drop(_16) -> bb5;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb7: {                              
        StorageDead(_14);                // scope 0 at src\cryptonight.rs:10:45: 10:45
        drop(_16) -> bb8;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb8: {                              
        StorageDead(_16);                // scope 0 at src\cryptonight.rs:10:46: 10:46
        _3 = ();                         // scope 0 at src\cryptonight.rs:7:21: 11:6
        StorageLive(_17);                // scope 1 at src\cryptonight.rs:106:9: 106:20
        _17 = const std::default::Default::default() -> bb9; // scope 1 at src\cryptonight.rs:106:23: 106:43
    }

    bb9: {                              
        StorageLive(_19);                // scope 1 at src\cryptonight.rs:107:17: 107:23
        _19 = _2;                        // scope 1 at src\cryptonight.rs:107:17: 107:23
        StorageLive(_20);                // scope 1 at src\cryptonight.rs:107:25: 107:30
        _20 = _1;                        // scope 1 at src\cryptonight.rs:107:25: 107:30
        StorageLive(_21);                // scope 1 at src\cryptonight.rs:107:32: 107:44
        StorageLive(_22);                // scope 1 at src\cryptonight.rs:107:32: 107:44
        _22 = &mut _17;                  // scope 1 at src\cryptonight.rs:107:32: 107:44
        _21 = _22;                       // scope 1 at src\cryptonight.rs:107:32: 107:44
        _18 = const cryptonight::cn_hash_ctx(_19, _20, _21) -> [return: bb10, unwind: bb11]; // scope 1 at src\cryptonight.rs:107:5: 107:45
    }

    bb10: {                             
        StorageDead(_21);                // scope 1 at src\cryptonight.rs:107:45: 107:45
        StorageDead(_20);                // scope 1 at src\cryptonight.rs:107:45: 107:45
        StorageDead(_19);                // scope 1 at src\cryptonight.rs:107:45: 107:45
        StorageDead(_22);                // scope 1 at src\cryptonight.rs:107:46: 107:46
        _0 = ();                         // scope 0 at src\cryptonight.rs:104:55: 108:2
        drop(_17) -> bb12;               // scope 0 at src\cryptonight.rs:108:2: 108:2
    }

    bb11: {                              // cleanup
        drop(_17) -> bb5;                // scope 0 at src\cryptonight.rs:108:2: 108:2
    }

    bb12: {                             
        StorageDead(_17);                // scope 0 at src\cryptonight.rs:108:2: 108:2
        return;                          // scope 0 at src\cryptonight.rs:108:2: 108:2
    }
}

promoted[0] in cryptonight::blargobblegims: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return pointer
    scope 1 {
    }
    scope 2 {
    }
    let mut _1: [std::fmt::ArgumentV1; 0];

    bb0: {                              
        _1 = [];                         // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

promoted[1] in cryptonight::blargobblegims: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return pointer
    scope 1 {
    }
    scope 2 {
    }
    let mut _1: [&str; 1];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {                              
        _3 = const "Kek\n";              // scope 0 at <println macros>:2:11: 2:36
        _2 = _3;                         // scope 0 at <println macros>:2:11: 2:36
        _1 = [_2];                       // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

const cryptonight::LUT4::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 256usize;             // scope 0 at src\cryptonight.rs:402:20: 402:23
        return;                          // scope 0 at src\cryptonight.rs:402:20: 402:23
    }
}

const cryptonight::ITER: usize = {
    let mut _0: usize;                   // return pointer
    let mut _1: (usize, bool);

    bb0: {                              
        _1 = CheckedShl(const 1usize, const 20i32); // scope 0 at src\cryptonight.rs:23:35: 23:42
        assert(!(_1.1: bool), "attempt to shift left with overflow") -> bb1; // scope 0 at src\cryptonight.rs:23:35: 23:42
    }

    bb1: {                              
        _0 = (_1.0: usize);              // scope 0 at src\cryptonight.rs:23:35: 23:42
        return;                          // scope 0 at src\cryptonight.rs:23:1: 23:43
    }
}

const cryptonight::CNContext::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:42) => cnminer[5424]::cryptonight[0]::AES_BLOCK_SIZE[0] }, Slice([])); // scope 0 at src\cryptonight.rs:59:17: 59:31
        return;                          // scope 0 at src\cryptonight.rs:59:17: 59:31
    }
}

fn oaes::<impl at src\oaes.rs:85:1: 130:2>::key_expand(_1: &mut oaes::AesContext) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let _5: ();                      // "_result" in scope 1 at src\oaes.rs:102:9: 104:10
        scope 3 {
            let mut _9: std::ops::Range<usize>; // "iter" in scope 3 at src\oaes.rs:102:9: 104:10
            scope 4 {
                let mut _11: usize;      // "__next" in scope 4 at src\oaes.rs:102:9: 104:10
                scope 6 {
                    let _15: usize;      // "val" in scope 6 at src\oaes.rs:102:9: 104:10
                }
                scope 7 {
                    let _18: usize;      // "i" in scope 7 at src\oaes.rs:102:13: 102:14
                }
                scope 8 {
                }
            }
            scope 5 {
            }
        }
    }
    scope 2 {
    }
    scope 9 {
        let _29: ();                     // "_result" in scope 9 at src\oaes.rs:107:9: 128:10
        scope 11 {
            let mut _32: std::ops::Range<usize>; // "iter" in scope 11 at src\oaes.rs:107:9: 128:10
            scope 12 {
                let mut _33: usize;      // "__next" in scope 12 at src\oaes.rs:107:9: 128:10
                scope 14 {
                    let _37: usize;      // "val" in scope 14 at src\oaes.rs:107:9: 128:10
                }
                scope 15 {
                    let _40: usize;      // "i" in scope 15 at src\oaes.rs:107:13: 107:14
                    scope 17 {
                        let mut _43: [u8; 4]; // "temp" in scope 17 at src\oaes.rs:108:17: 108:25
                        scope 19 {
                            let _45: (); // "_result" in scope 19 at src\oaes.rs:109:13: 111:14
                            scope 21 {
                                let mut _48: std::ops::Range<usize>; // "iter" in scope 21 at src\oaes.rs:109:13: 111:14
                                scope 22 {
                                    let mut _49: usize; // "__next" in scope 22 at src\oaes.rs:109:13: 111:14
                                    scope 24 {
                                        let _53: usize; // "val" in scope 24 at src\oaes.rs:109:13: 111:14
                                    }
                                    scope 25 {
                                        let _56: usize; // "col" in scope 25 at src\oaes.rs:109:17: 109:20
                                    }
                                    scope 26 {
                                    }
                                }
                                scope 23 {
                                }
                            }
                        }
                        scope 20 {
                        }
                        scope 27 {
                            let _83: (); // "_result" in scope 27 at src\oaes.rs:114:17: 116:18
                            scope 29 {
                                let mut _86: std::ops::Range<usize>; // "iter" in scope 29 at src\oaes.rs:114:17: 116:18
                                scope 30 {
                                    let mut _87: usize; // "__next" in scope 30 at src\oaes.rs:114:17: 116:18
                                    scope 32 {
                                        let _91: usize; // "val" in scope 32 at src\oaes.rs:114:17: 116:18
                                    }
                                    scope 33 {
                                        let _94: usize; // "j" in scope 33 at src\oaes.rs:114:21: 114:22
                                    }
                                    scope 34 {
                                    }
                                }
                                scope 31 {
                                }
                            }
                        }
                        scope 28 {
                        }
                        scope 35 {
                            let _124: (); // "_result" in scope 35 at src\oaes.rs:119:17: 121:18
                            scope 37 {
                                let mut _127: std::ops::Range<usize>; // "iter" in scope 37 at src\oaes.rs:119:17: 121:18
                                scope 38 {
                                    let mut _128: usize; // "__next" in scope 38 at src\oaes.rs:119:17: 121:18
                                    scope 40 {
                                        let _132: usize; // "val" in scope 40 at src\oaes.rs:119:17: 121:18
                                    }
                                    scope 41 {
                                        let _135: usize; // "j" in scope 41 at src\oaes.rs:119:21: 119:22
                                    }
                                    scope 42 {
                                    }
                                }
                                scope 39 {
                                }
                            }
                        }
                        scope 36 {
                        }
                        scope 43 {
                            let _147: (); // "_result" in scope 43 at src\oaes.rs:123:13: 127:14
                            scope 45 {
                                let mut _150: std::ops::Range<usize>; // "iter" in scope 45 at src\oaes.rs:123:13: 127:14
                                scope 46 {
                                    let mut _151: usize; // "__next" in scope 46 at src\oaes.rs:123:13: 127:14
                                    scope 48 {
                                        let _155: usize; // "val" in scope 48 at src\oaes.rs:123:13: 127:14
                                    }
                                    scope 49 {
                                        let _158: usize; // "j" in scope 49 at src\oaes.rs:123:17: 123:18
                                        scope 51 {
                                            let _161: usize; // "index" in scope 51 at src\oaes.rs:124:21: 124:26
                                        }
                                        scope 52 {
                                        }
                                    }
                                    scope 50 {
                                    }
                                }
                                scope 47 {
                                }
                            }
                        }
                        scope 44 {
                        }
                    }
                    scope 18 {
                    }
                }
                scope 16 {
                }
            }
            scope 13 {
            }
        }
    }
    scope 10 {
    }
    let mut _2: std::vec::Vec<u8>;
    let mut _3: usize;
    let mut _4: ();
    let mut _6: std::ops::Range<usize>;
    let mut _7: std::ops::Range<usize>;
    let mut _8: usize;
    let mut _10: ();
    let mut _12: std::option::Option<usize>;
    let mut _13: &mut std::ops::Range<usize>;
    let mut _14: &mut std::ops::Range<usize>;
    let mut _16: isize;
    let mut _17: usize;
    let mut _19: usize;
    let mut _20: ();
    let mut _21: u8;
    let mut _22: &u8;
    let mut _23: &std::vec::Vec<u8>;
    let mut _24: usize;
    let mut _25: &mut u8;
    let mut _26: &mut std::vec::Vec<u8>;
    let mut _27: usize;
    let mut _28: ();
    let mut _30: std::ops::Range<usize>;
    let mut _31: std::ops::Range<usize>;
    let mut _34: std::option::Option<usize>;
    let mut _35: &mut std::ops::Range<usize>;
    let mut _36: &mut std::ops::Range<usize>;
    let mut _38: isize;
    let mut _39: usize;
    let mut _41: usize;
    let mut _42: ();
    let mut _44: ();
    let mut _46: std::ops::Range<usize>;
    let mut _47: std::ops::Range<usize>;
    let mut _50: std::option::Option<usize>;
    let mut _51: &mut std::ops::Range<usize>;
    let mut _52: &mut std::ops::Range<usize>;
    let mut _54: isize;
    let mut _55: usize;
    let mut _57: usize;
    let mut _58: ();
    let mut _59: u8;
    let mut _60: &u8;
    let mut _61: &std::vec::Vec<u8>;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: (usize, bool);
    let mut _67: (usize, bool);
    let mut _68: u8;
    let mut _69: (u8, bool);
    let mut _70: usize;
    let mut _71: usize;
    let mut _72: bool;
    let mut _73: ();
    let mut _74: ();
    let mut _75: bool;
    let mut _76: usize;
    let mut _77: usize;
    let mut _78: bool;
    let mut _79: ();
    let mut _80: &mut [u8; 4];
    let mut _81: &mut [u8; 4];
    let mut _82: ();
    let mut _84: std::ops::Range<usize>;
    let mut _85: std::ops::Range<usize>;
    let mut _88: std::option::Option<usize>;
    let mut _89: &mut std::ops::Range<usize>;
    let mut _90: &mut std::ops::Range<usize>;
    let mut _92: isize;
    let mut _93: usize;
    let mut _95: usize;
    let mut _96: ();
    let mut _97: u8;
    let mut _98: u8;
    let mut _99: usize;
    let mut _100: usize;
    let mut _101: bool;
    let mut _102: usize;
    let mut _103: usize;
    let mut _104: bool;
    let mut _105: ();
    let mut _106: u8;
    let mut _107: &u8;
    let mut _108: &[u8];
    let mut _109: &[u8; 10];
    let mut _110: usize;
    let mut _111: usize;
    let mut _112: usize;
    let mut _113: usize;
    let mut _114: bool;
    let mut _115: (usize, bool);
    let mut _116: usize;
    let mut _117: usize;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: usize;
    let mut _121: usize;
    let mut _122: usize;
    let mut _123: bool;
    let mut _125: std::ops::Range<usize>;
    let mut _126: std::ops::Range<usize>;
    let mut _129: std::option::Option<usize>;
    let mut _130: &mut std::ops::Range<usize>;
    let mut _131: &mut std::ops::Range<usize>;
    let mut _133: isize;
    let mut _134: usize;
    let mut _136: usize;
    let mut _137: ();
    let mut _138: u8;
    let mut _139: u8;
    let mut _140: usize;
    let mut _141: usize;
    let mut _142: bool;
    let mut _143: usize;
    let mut _144: usize;
    let mut _145: bool;
    let mut _146: ();
    let mut _148: std::ops::Range<usize>;
    let mut _149: std::ops::Range<usize>;
    let mut _152: std::option::Option<usize>;
    let mut _153: &mut std::ops::Range<usize>;
    let mut _154: &mut std::ops::Range<usize>;
    let mut _156: isize;
    let mut _157: usize;
    let mut _159: usize;
    let mut _160: ();
    let mut _162: usize;
    let mut _163: usize;
    let mut _164: usize;
    let mut _165: usize;
    let mut _166: (usize, bool);
    let mut _167: (usize, bool);
    let mut _168: usize;
    let mut _169: (usize, bool);
    let mut _170: u8;
    let mut _171: &u8;
    let mut _172: &std::vec::Vec<u8>;
    let mut _173: usize;
    let mut _174: u8;
    let mut _175: usize;
    let mut _176: usize;
    let mut _177: bool;
    let mut _178: &mut u8;
    let mut _179: &mut std::vec::Vec<u8>;
    let mut _180: usize;
    let mut _181: usize;
    let mut _182: usize;
    let mut _183: (usize, bool);
    let mut _184: usize;
    let mut _185: (usize, bool);
    let mut _186: ();
    let mut _187: ();

    bb0: {                              
        (((*_1).0: oaes::AesKey).5: usize) = const 8usize; // scope 0 at src\oaes.rs:97:9: 97:30
        (((*_1).0: oaes::AesKey).4: usize) = const 15usize; // scope 0 at src\oaes.rs:98:9: 98:31
        (((*_1).0: oaes::AesKey).3: usize) = const 240usize; // scope 0 at src\oaes.rs:99:9: 99:36
        StorageLive(_2);                 // scope 0 at <vec macros>:2:1: 2:45
        StorageLive(_3);                 // scope 0 at src\oaes.rs:100:39: 100:60
        _3 = (((*_1).0: oaes::AesKey).3: usize); // scope 0 at src\oaes.rs:100:39: 100:60
        _2 = const std::vec::from_elem(const 0u8, _3) -> bb1; // scope 0 at <vec macros>:2:1: 2:45
    }

    bb1: {                              
        StorageDead(_3);                 // scope 0 at <vec macros>:2:45: 2:45
        drop((((*_1).0: oaes::AesKey).2: std::vec::Vec<u8>)) -> [return: bb68, unwind: bb67]; // scope 0 at src\oaes.rs:100:9: 100:26
    }

    bb2: {                              
        StorageDead(_7);                 // scope 1 at src\oaes.rs:104:10: 104:10
        StorageLive(_9);                 // scope 3 at src\oaes.rs:102:9: 104:10
        _9 = _6;                         // scope 3 at src\oaes.rs:102:9: 104:10
        goto -> bb3;                     // scope 3 at src\oaes.rs:102:9: 104:10
    }

    bb3: {                              
        StorageLive(_11);                // scope 4 at src\oaes.rs:102:9: 104:10
        StorageLive(_12);                // scope 4 at src\oaes.rs:102:9: 104:10
        StorageLive(_13);                // scope 4 at src\oaes.rs:102:9: 104:10
        StorageLive(_14);                // scope 4 at src\oaes.rs:102:9: 104:10
        _14 = &mut _9;                   // scope 4 at src\oaes.rs:102:9: 104:10
        _13 = _14;                       // scope 4 at src\oaes.rs:102:9: 104:10
        _12 = const std::iter::Iterator::next(_13) -> bb4; // scope 4 at src\oaes.rs:102:9: 104:10
    }

    bb4: {                              
        StorageDead(_13);                // scope 4 at src\oaes.rs:104:10: 104:10
        _16 = discriminant(_12);         // scope 6 at src\oaes.rs:102:9: 104:10
        switchInt(_16) -> [0isize: bb5, 1isize: bb7, otherwise: bb6]; // scope 6 at src\oaes.rs:102:9: 104:10
    }

    bb5: {                              
        _5 = ();                         // scope 6 at src\oaes.rs:102:9: 104:10
        StorageDead(_15);                // scope 4 at src\oaes.rs:104:10: 104:10
        StorageDead(_12);                // scope 4 at src\oaes.rs:104:10: 104:10
        StorageDead(_14);                // scope 4 at src\oaes.rs:104:10: 104:10
        StorageDead(_11);                // scope 3 at src\oaes.rs:104:10: 104:10
        StorageDead(_9);                 // scope 1 at src\oaes.rs:104:10: 104:10
        StorageDead(_6);                 // scope 1 at src\oaes.rs:104:10: 104:10
        StorageLive(_28);                // scope 1 at src\oaes.rs:102:9: 104:10
        _28 = _5;                        // scope 1 at src\oaes.rs:102:9: 104:10
        _4 = _28;                        // scope 1 at src\oaes.rs:102:9: 104:10
        StorageDead(_28);                // scope 1 at src\oaes.rs:104:10: 104:10
        StorageDead(_5);                 // scope 0 at src\oaes.rs:104:10: 104:10
        StorageLive(_29);                // scope 9 at src\oaes.rs:107:9: 128:10
        StorageLive(_30);                // scope 9 at src\oaes.rs:107:9: 128:10
        StorageLive(_31);                // scope 9 at src\oaes.rs:107:18: 107:23
        _31 = std::ops::Range<usize> { start: const 8usize, end: const 60usize }; // scope 9 at src\oaes.rs:107:18: 107:23
        _30 = const std::iter::IntoIterator::into_iter(_31) -> bb10; // scope 9 at src\oaes.rs:107:9: 128:10
    }

    bb6: {                              
        unreachable;                     // scope 0 at src\oaes.rs:129:6: 129:6
    }

    bb7: {                              
        StorageLive(_15);                // scope 6 at src\oaes.rs:102:9: 104:10
        _15 = ((_12 as Some).0: usize);  // scope 6 at src\oaes.rs:102:9: 104:10
        StorageLive(_17);                // scope 6 at src\oaes.rs:102:9: 104:10
        _17 = _15;                       // scope 6 at src\oaes.rs:102:9: 104:10
        _11 = _17;                       // scope 6 at src\oaes.rs:102:9: 104:10
        StorageDead(_17);                // scope 6 at src\oaes.rs:104:10: 104:10
        StorageDead(_15);                // scope 4 at src\oaes.rs:104:10: 104:10
        StorageDead(_12);                // scope 4 at src\oaes.rs:104:10: 104:10
        StorageDead(_14);                // scope 4 at src\oaes.rs:104:10: 104:10
        StorageLive(_18);                // scope 7 at src\oaes.rs:102:13: 102:14
        StorageLive(_19);                // scope 7 at src\oaes.rs:102:9: 104:10
        _19 = _11;                       // scope 7 at src\oaes.rs:102:9: 104:10
        _18 = _19;                       // scope 7 at src\oaes.rs:102:9: 104:10
        StorageDead(_19);                // scope 7 at src\oaes.rs:104:10: 104:10
        StorageLive(_21);                // scope 7 at src\oaes.rs:103:36: 103:52
        StorageLive(_22);                // scope 7 at src\oaes.rs:103:36: 103:52
        StorageLive(_23);                // scope 7 at src\oaes.rs:103:36: 103:49
        _23 = &(((*_1).0: oaes::AesKey).0: std::vec::Vec<u8>); // scope 7 at src\oaes.rs:103:36: 103:49
        StorageLive(_24);                // scope 7 at src\oaes.rs:103:50: 103:51
        _24 = _18;                       // scope 7 at src\oaes.rs:103:50: 103:51
        _22 = const std::ops::Index::index(_23, _24) -> bb8; // scope 7 at src\oaes.rs:103:36: 103:52
    }

    bb8: {                              
        _21 = (*_22);                    // scope 7 at src\oaes.rs:103:36: 103:52
        StorageDead(_24);                // scope 7 at src\oaes.rs:103:52: 103:52
        StorageDead(_23);                // scope 7 at src\oaes.rs:103:52: 103:52
        StorageLive(_25);                // scope 7 at src\oaes.rs:103:13: 103:33
        StorageLive(_26);                // scope 7 at src\oaes.rs:103:13: 103:30
        _26 = &mut (((*_1).0: oaes::AesKey).2: std::vec::Vec<u8>); // scope 7 at src\oaes.rs:103:13: 103:30
        StorageLive(_27);                // scope 7 at src\oaes.rs:103:31: 103:32
        _27 = _18;                       // scope 7 at src\oaes.rs:103:31: 103:32
        _25 = const std::ops::IndexMut::index_mut(_26, _27) -> bb9; // scope 7 at src\oaes.rs:103:13: 103:33
    }

    bb9: {                              
        StorageDead(_27);                // scope 7 at src\oaes.rs:103:33: 103:33
        StorageDead(_26);                // scope 7 at src\oaes.rs:103:33: 103:33
        (*_25) = _21;                    // scope 7 at src\oaes.rs:103:13: 103:52
        StorageDead(_21);                // scope 7 at src\oaes.rs:103:52: 103:52
        StorageDead(_25);                // scope 7 at src\oaes.rs:103:53: 103:53
        StorageDead(_22);                // scope 7 at src\oaes.rs:103:53: 103:53
        _20 = ();                        // scope 7 at src\oaes.rs:102:43: 104:10
        _10 = ();                        // scope 3 at src\oaes.rs:102:9: 104:10
        StorageDead(_18);                // scope 4 at src\oaes.rs:104:10: 104:10
        StorageDead(_11);                // scope 3 at src\oaes.rs:104:10: 104:10
        goto -> bb3;                     // scope 3 at src\oaes.rs:102:9: 104:10
    }

    bb10: {                             
        StorageDead(_31);                // scope 9 at src\oaes.rs:128:10: 128:10
        StorageLive(_32);                // scope 11 at src\oaes.rs:107:9: 128:10
        _32 = _30;                       // scope 11 at src\oaes.rs:107:9: 128:10
        goto -> bb11;                    // scope 11 at src\oaes.rs:107:9: 128:10
    }

    bb11: {                             
        StorageLive(_33);                // scope 12 at src\oaes.rs:107:9: 128:10
        StorageLive(_34);                // scope 12 at src\oaes.rs:107:9: 128:10
        StorageLive(_35);                // scope 12 at src\oaes.rs:107:9: 128:10
        StorageLive(_36);                // scope 12 at src\oaes.rs:107:9: 128:10
        _36 = &mut _32;                  // scope 12 at src\oaes.rs:107:9: 128:10
        _35 = _36;                       // scope 12 at src\oaes.rs:107:9: 128:10
        _34 = const std::iter::Iterator::next(_35) -> bb12; // scope 12 at src\oaes.rs:107:9: 128:10
    }

    bb12: {                             
        StorageDead(_35);                // scope 12 at src\oaes.rs:128:10: 128:10
        _38 = discriminant(_34);         // scope 14 at src\oaes.rs:107:9: 128:10
        switchInt(_38) -> [0isize: bb13, 1isize: bb14, otherwise: bb6]; // scope 14 at src\oaes.rs:107:9: 128:10
    }

    bb13: {                             
        _29 = ();                        // scope 14 at src\oaes.rs:107:9: 128:10
        StorageDead(_37);                // scope 12 at src\oaes.rs:128:10: 128:10
        StorageDead(_34);                // scope 12 at src\oaes.rs:128:10: 128:10
        StorageDead(_36);                // scope 12 at src\oaes.rs:128:10: 128:10
        StorageDead(_33);                // scope 11 at src\oaes.rs:128:10: 128:10
        StorageDead(_32);                // scope 9 at src\oaes.rs:128:10: 128:10
        StorageDead(_30);                // scope 9 at src\oaes.rs:128:10: 128:10
        StorageLive(_187);               // scope 9 at src\oaes.rs:107:9: 128:10
        _187 = _29;                      // scope 9 at src\oaes.rs:107:9: 128:10
        _0 = _187;                       // scope 9 at src\oaes.rs:107:9: 128:10
        StorageDead(_187);               // scope 9 at src\oaes.rs:128:10: 128:10
        StorageDead(_29);                // scope 0 at src\oaes.rs:128:10: 128:10
        return;                          // scope 0 at src\oaes.rs:129:6: 129:6
    }

    bb14: {                             
        StorageLive(_37);                // scope 14 at src\oaes.rs:107:9: 128:10
        _37 = ((_34 as Some).0: usize);  // scope 14 at src\oaes.rs:107:9: 128:10
        StorageLive(_39);                // scope 14 at src\oaes.rs:107:9: 128:10
        _39 = _37;                       // scope 14 at src\oaes.rs:107:9: 128:10
        _33 = _39;                       // scope 14 at src\oaes.rs:107:9: 128:10
        StorageDead(_39);                // scope 14 at src\oaes.rs:128:10: 128:10
        StorageDead(_37);                // scope 12 at src\oaes.rs:128:10: 128:10
        StorageDead(_34);                // scope 12 at src\oaes.rs:128:10: 128:10
        StorageDead(_36);                // scope 12 at src\oaes.rs:128:10: 128:10
        StorageLive(_40);                // scope 15 at src\oaes.rs:107:13: 107:14
        StorageLive(_41);                // scope 15 at src\oaes.rs:107:9: 128:10
        _41 = _33;                       // scope 15 at src\oaes.rs:107:9: 128:10
        _40 = _41;                       // scope 15 at src\oaes.rs:107:9: 128:10
        StorageDead(_41);                // scope 15 at src\oaes.rs:128:10: 128:10
        StorageLive(_43);                // scope 17 at src\oaes.rs:108:17: 108:25
        _43 = [const 0u8; Us64(4)];      // scope 17 at src\oaes.rs:108:28: 108:47
        StorageLive(_45);                // scope 19 at src\oaes.rs:109:13: 111:14
        StorageLive(_46);                // scope 19 at src\oaes.rs:109:13: 111:14
        StorageLive(_47);                // scope 19 at src\oaes.rs:109:24: 109:39
        _47 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])) }; // scope 19 at src\oaes.rs:109:24: 109:39
        _46 = const std::iter::IntoIterator::into_iter(_47) -> bb15; // scope 19 at src\oaes.rs:109:13: 111:14
    }

    bb15: {                             
        StorageDead(_47);                // scope 19 at src\oaes.rs:111:14: 111:14
        StorageLive(_48);                // scope 21 at src\oaes.rs:109:13: 111:14
        _48 = _46;                       // scope 21 at src\oaes.rs:109:13: 111:14
        goto -> bb16;                    // scope 21 at src\oaes.rs:109:13: 111:14
    }

    bb16: {                             
        StorageLive(_49);                // scope 22 at src\oaes.rs:109:13: 111:14
        StorageLive(_50);                // scope 22 at src\oaes.rs:109:13: 111:14
        StorageLive(_51);                // scope 22 at src\oaes.rs:109:13: 111:14
        StorageLive(_52);                // scope 22 at src\oaes.rs:109:13: 111:14
        _52 = &mut _48;                  // scope 22 at src\oaes.rs:109:13: 111:14
        _51 = _52;                       // scope 22 at src\oaes.rs:109:13: 111:14
        _50 = const std::iter::Iterator::next(_51) -> bb17; // scope 22 at src\oaes.rs:109:13: 111:14
    }

    bb17: {                             
        StorageDead(_51);                // scope 22 at src\oaes.rs:111:14: 111:14
        _54 = discriminant(_50);         // scope 24 at src\oaes.rs:109:13: 111:14
        switchInt(_54) -> [0isize: bb18, 1isize: bb19, otherwise: bb6]; // scope 24 at src\oaes.rs:109:13: 111:14
    }

    bb18: {                             
        _45 = ();                        // scope 24 at src\oaes.rs:109:13: 111:14
        StorageDead(_53);                // scope 22 at src\oaes.rs:111:14: 111:14
        StorageDead(_50);                // scope 22 at src\oaes.rs:111:14: 111:14
        StorageDead(_52);                // scope 22 at src\oaes.rs:111:14: 111:14
        StorageDead(_49);                // scope 21 at src\oaes.rs:111:14: 111:14
        StorageDead(_48);                // scope 19 at src\oaes.rs:111:14: 111:14
        StorageDead(_46);                // scope 19 at src\oaes.rs:111:14: 111:14
        StorageLive(_73);                // scope 19 at src\oaes.rs:109:13: 111:14
        _73 = _45;                       // scope 19 at src\oaes.rs:109:13: 111:14
        _44 = _73;                       // scope 19 at src\oaes.rs:109:13: 111:14
        StorageDead(_73);                // scope 19 at src\oaes.rs:111:14: 111:14
        StorageDead(_45);                // scope 17 at src\oaes.rs:111:14: 111:14
        StorageLive(_75);                // scope 17 at src\oaes.rs:112:16: 112:26
        StorageLive(_76);                // scope 17 at src\oaes.rs:112:16: 112:21
        StorageLive(_77);                // scope 17 at src\oaes.rs:112:16: 112:17
        _77 = _40;                       // scope 17 at src\oaes.rs:112:16: 112:17
        _78 = Eq(const 8usize, const 0usize); // scope 17 at src\oaes.rs:112:16: 112:21
        assert(!_78, "attempt to calculate the remainder with a divisor of zero") -> bb25; // scope 17 at src\oaes.rs:112:16: 112:21
    }

    bb19: {                             
        StorageLive(_53);                // scope 24 at src\oaes.rs:109:13: 111:14
        _53 = ((_50 as Some).0: usize);  // scope 24 at src\oaes.rs:109:13: 111:14
        StorageLive(_55);                // scope 24 at src\oaes.rs:109:13: 111:14
        _55 = _53;                       // scope 24 at src\oaes.rs:109:13: 111:14
        _49 = _55;                       // scope 24 at src\oaes.rs:109:13: 111:14
        StorageDead(_55);                // scope 24 at src\oaes.rs:111:14: 111:14
        StorageDead(_53);                // scope 22 at src\oaes.rs:111:14: 111:14
        StorageDead(_50);                // scope 22 at src\oaes.rs:111:14: 111:14
        StorageDead(_52);                // scope 22 at src\oaes.rs:111:14: 111:14
        StorageLive(_56);                // scope 25 at src\oaes.rs:109:17: 109:20
        StorageLive(_57);                // scope 25 at src\oaes.rs:109:13: 111:14
        _57 = _49;                       // scope 25 at src\oaes.rs:109:13: 111:14
        _56 = _57;                       // scope 25 at src\oaes.rs:109:13: 111:14
        StorageDead(_57);                // scope 25 at src\oaes.rs:111:14: 111:14
        StorageLive(_59);                // scope 25 at src\oaes.rs:110:27: 110:57
        StorageLive(_60);                // scope 25 at src\oaes.rs:110:27: 110:57
        StorageLive(_61);                // scope 25 at src\oaes.rs:110:27: 110:44
        _61 = &(((*_1).0: oaes::AesKey).2: std::vec::Vec<u8>); // scope 25 at src\oaes.rs:110:27: 110:44
        StorageLive(_62);                // scope 25 at src\oaes.rs:110:45: 110:56
        StorageLive(_63);                // scope 25 at src\oaes.rs:110:45: 110:52
        StorageLive(_64);                // scope 25 at src\oaes.rs:110:45: 110:46
        _64 = _40;                       // scope 25 at src\oaes.rs:110:45: 110:46
        StorageLive(_65);                // scope 25 at src\oaes.rs:110:49: 110:52
        _65 = _56;                       // scope 25 at src\oaes.rs:110:49: 110:52
        _66 = CheckedAdd(_64, _65);      // scope 25 at src\oaes.rs:110:45: 110:52
        assert(!(_66.1: bool), "attempt to add with overflow") -> bb20; // scope 25 at src\oaes.rs:110:45: 110:52
    }

    bb20: {                             
        _63 = (_66.0: usize);            // scope 25 at src\oaes.rs:110:45: 110:52
        StorageDead(_65);                // scope 25 at src\oaes.rs:110:52: 110:52
        StorageDead(_64);                // scope 25 at src\oaes.rs:110:52: 110:52
        _67 = CheckedSub(_63, const 1usize); // scope 25 at src\oaes.rs:110:45: 110:56
        assert(!(_67.1: bool), "attempt to subtract with overflow") -> bb21; // scope 25 at src\oaes.rs:110:45: 110:56
    }

    bb21: {                             
        _62 = (_67.0: usize);            // scope 25 at src\oaes.rs:110:45: 110:56
        StorageDead(_63);                // scope 25 at src\oaes.rs:110:56: 110:56
        _60 = const std::ops::Index::index(_61, _62) -> bb22; // scope 25 at src\oaes.rs:110:27: 110:57
    }

    bb22: {                             
        _59 = (*_60);                    // scope 25 at src\oaes.rs:110:27: 110:57
        StorageDead(_62);                // scope 25 at src\oaes.rs:110:57: 110:57
        StorageDead(_61);                // scope 25 at src\oaes.rs:110:57: 110:57
        StorageLive(_68);                // scope 25 at src\oaes.rs:110:60: 110:81
        _68 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:18) => cnminer[5424]::oaes[0]::OAES_RKEY_LEN[0] }, Slice([])) as u8 (Misc); // scope 25 at src\oaes.rs:110:60: 110:81
        _69 = CheckedMul(_59, _68);      // scope 25 at src\oaes.rs:110:27: 110:81
        assert(!(_69.1: bool), "attempt to multiply with overflow") -> bb23; // scope 25 at src\oaes.rs:110:27: 110:81
    }

    bb23: {                             
        StorageLive(_70);                // scope 25 at src\oaes.rs:110:22: 110:23
        _70 = _40;                       // scope 25 at src\oaes.rs:110:22: 110:23
        _71 = Len(_43);                  // scope 25 at src\oaes.rs:110:17: 110:24
        _72 = Lt(_70, _71);              // scope 25 at src\oaes.rs:110:17: 110:24
        assert(_72, "index out of bounds: the len is {} but the index is {}", _71, _70) -> bb24; // scope 25 at src\oaes.rs:110:17: 110:24
    }

    bb24: {                             
        _43[_70] = (_69.0: u8);          // scope 25 at src\oaes.rs:110:17: 110:81
        StorageDead(_68);                // scope 25 at src\oaes.rs:110:81: 110:81
        StorageDead(_59);                // scope 25 at src\oaes.rs:110:81: 110:81
        StorageDead(_60);                // scope 25 at src\oaes.rs:110:82: 110:82
        _58 = ();                        // scope 25 at src\oaes.rs:109:40: 111:14
        _10 = ();                        // scope 21 at src\oaes.rs:109:13: 111:14
        StorageDead(_56);                // scope 22 at src\oaes.rs:111:14: 111:14
        StorageDead(_49);                // scope 21 at src\oaes.rs:111:14: 111:14
        goto -> bb16;                    // scope 21 at src\oaes.rs:109:13: 111:14
    }

    bb25: {                             
        _76 = Rem(_77, const 8usize);    // scope 17 at src\oaes.rs:112:16: 112:21
        StorageDead(_77);                // scope 17 at src\oaes.rs:112:21: 112:21
        _75 = Eq(_76, const 0usize);     // scope 17 at src\oaes.rs:112:16: 112:26
        StorageDead(_76);                // scope 17 at src\oaes.rs:112:26: 112:26
        switchInt(_75) -> [0u8: bb27, otherwise: bb26]; // scope 17 at src\oaes.rs:112:13: 122:14
    }

    bb26: {                             
        StorageLive(_80);                // scope 17 at src\oaes.rs:113:36: 113:45
        StorageLive(_81);                // scope 17 at src\oaes.rs:113:36: 113:45
        _81 = &mut _43;                  // scope 17 at src\oaes.rs:113:36: 113:45
        _80 = _81;                       // scope 17 at src\oaes.rs:113:36: 113:45
        _79 = const oaes::oaes_word_rot_left(_80) -> bb28; // scope 17 at src\oaes.rs:113:17: 113:46
    }

    bb27: {                             
        StorageLive(_119);               // scope 17 at src\oaes.rs:118:23: 118:49
        StorageLive(_120);               // scope 17 at src\oaes.rs:118:23: 118:44
        StorageLive(_121);               // scope 17 at src\oaes.rs:118:23: 118:24
        _121 = _40;                      // scope 17 at src\oaes.rs:118:23: 118:24
        StorageLive(_122);               // scope 17 at src\oaes.rs:118:27: 118:44
        _122 = (((*_1).0: oaes::AesKey).5: usize); // scope 17 at src\oaes.rs:118:27: 118:44
        _123 = Eq(_122, const 0usize);   // scope 17 at src\oaes.rs:118:23: 118:44
        assert(!_123, "attempt to calculate the remainder with a divisor of zero") -> bb41; // scope 17 at src\oaes.rs:118:23: 118:44
    }

    bb28: {                             
        StorageDead(_80);                // scope 17 at src\oaes.rs:113:46: 113:46
        StorageDead(_81);                // scope 17 at src\oaes.rs:113:47: 113:47
        StorageLive(_83);                // scope 27 at src\oaes.rs:114:17: 116:18
        StorageLive(_84);                // scope 27 at src\oaes.rs:114:17: 116:18
        StorageLive(_85);                // scope 27 at src\oaes.rs:114:26: 114:41
        _85 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])) }; // scope 27 at src\oaes.rs:114:26: 114:41
        _84 = const std::iter::IntoIterator::into_iter(_85) -> bb29; // scope 27 at src\oaes.rs:114:17: 116:18
    }

    bb29: {                             
        StorageDead(_85);                // scope 27 at src\oaes.rs:116:18: 116:18
        StorageLive(_86);                // scope 29 at src\oaes.rs:114:17: 116:18
        _86 = _84;                       // scope 29 at src\oaes.rs:114:17: 116:18
        goto -> bb30;                    // scope 29 at src\oaes.rs:114:17: 116:18
    }

    bb30: {                             
        StorageLive(_87);                // scope 30 at src\oaes.rs:114:17: 116:18
        StorageLive(_88);                // scope 30 at src\oaes.rs:114:17: 116:18
        StorageLive(_89);                // scope 30 at src\oaes.rs:114:17: 116:18
        StorageLive(_90);                // scope 30 at src\oaes.rs:114:17: 116:18
        _90 = &mut _86;                  // scope 30 at src\oaes.rs:114:17: 116:18
        _89 = _90;                       // scope 30 at src\oaes.rs:114:17: 116:18
        _88 = const std::iter::Iterator::next(_89) -> bb31; // scope 30 at src\oaes.rs:114:17: 116:18
    }

    bb31: {                             
        StorageDead(_89);                // scope 30 at src\oaes.rs:116:18: 116:18
        _92 = discriminant(_88);         // scope 32 at src\oaes.rs:114:17: 116:18
        switchInt(_92) -> [0isize: bb32, 1isize: bb33, otherwise: bb6]; // scope 32 at src\oaes.rs:114:17: 116:18
    }

    bb32: {                             
        _83 = ();                        // scope 32 at src\oaes.rs:114:17: 116:18
        StorageDead(_91);                // scope 30 at src\oaes.rs:116:18: 116:18
        StorageDead(_88);                // scope 30 at src\oaes.rs:116:18: 116:18
        StorageDead(_90);                // scope 30 at src\oaes.rs:116:18: 116:18
        StorageDead(_87);                // scope 29 at src\oaes.rs:116:18: 116:18
        StorageDead(_86);                // scope 27 at src\oaes.rs:116:18: 116:18
        StorageDead(_84);                // scope 27 at src\oaes.rs:116:18: 116:18
        StorageLive(_105);               // scope 27 at src\oaes.rs:114:17: 116:18
        _105 = _83;                      // scope 27 at src\oaes.rs:114:17: 116:18
        _82 = _105;                      // scope 27 at src\oaes.rs:114:17: 116:18
        StorageDead(_105);               // scope 27 at src\oaes.rs:116:18: 116:18
        StorageDead(_83);                // scope 17 at src\oaes.rs:116:18: 116:18
        StorageLive(_106);               // scope 17 at src\oaes.rs:117:28: 117:64
        StorageLive(_107);               // scope 17 at src\oaes.rs:117:28: 117:64
        StorageLive(_108);               // scope 17 at src\oaes.rs:117:28: 117:37
        StorageLive(_109);               // scope 17 at src\oaes.rs:117:28: 117:37
        _109 = &(oaes::OAES_GF_8: [u8; 10]); // scope 17 at src\oaes.rs:117:28: 117:37
        _108 = _109 as &[u8] (Unsize);   // scope 17 at src\oaes.rs:117:28: 117:37
        StorageDead(_109);               // scope 17 at src\oaes.rs:117:37: 117:37
        StorageLive(_110);               // scope 17 at src\oaes.rs:117:38: 117:63
        StorageLive(_111);               // scope 17 at src\oaes.rs:117:38: 117:59
        StorageLive(_112);               // scope 17 at src\oaes.rs:117:38: 117:39
        _112 = _40;                      // scope 17 at src\oaes.rs:117:38: 117:39
        StorageLive(_113);               // scope 17 at src\oaes.rs:117:42: 117:59
        _113 = (((*_1).0: oaes::AesKey).5: usize); // scope 17 at src\oaes.rs:117:42: 117:59
        _114 = Eq(_113, const 0usize);   // scope 17 at src\oaes.rs:117:38: 117:59
        assert(!_114, "attempt to divide by zero") -> bb37; // scope 17 at src\oaes.rs:117:38: 117:59
    }

    bb33: {                             
        StorageLive(_91);                // scope 32 at src\oaes.rs:114:17: 116:18
        _91 = ((_88 as Some).0: usize);  // scope 32 at src\oaes.rs:114:17: 116:18
        StorageLive(_93);                // scope 32 at src\oaes.rs:114:17: 116:18
        _93 = _91;                       // scope 32 at src\oaes.rs:114:17: 116:18
        _87 = _93;                       // scope 32 at src\oaes.rs:114:17: 116:18
        StorageDead(_93);                // scope 32 at src\oaes.rs:116:18: 116:18
        StorageDead(_91);                // scope 30 at src\oaes.rs:116:18: 116:18
        StorageDead(_88);                // scope 30 at src\oaes.rs:116:18: 116:18
        StorageDead(_90);                // scope 30 at src\oaes.rs:116:18: 116:18
        StorageLive(_94);                // scope 33 at src\oaes.rs:114:21: 114:22
        StorageLive(_95);                // scope 33 at src\oaes.rs:114:17: 116:18
        _95 = _87;                       // scope 33 at src\oaes.rs:114:17: 116:18
        _94 = _95;                       // scope 33 at src\oaes.rs:114:17: 116:18
        StorageDead(_95);                // scope 33 at src\oaes.rs:116:18: 116:18
        StorageLive(_97);                // scope 33 at src\oaes.rs:115:31: 115:53
        StorageLive(_98);                // scope 33 at src\oaes.rs:115:45: 115:52
        StorageLive(_99);                // scope 33 at src\oaes.rs:115:50: 115:51
        _99 = _94;                       // scope 33 at src\oaes.rs:115:50: 115:51
        _100 = Len(_43);                 // scope 33 at src\oaes.rs:115:45: 115:52
        _101 = Lt(_99, _100);            // scope 33 at src\oaes.rs:115:45: 115:52
        assert(_101, "index out of bounds: the len is {} but the index is {}", _100, _99) -> bb34; // scope 33 at src\oaes.rs:115:45: 115:52
    }

    bb34: {                             
        _98 = _43[_99];                  // scope 33 at src\oaes.rs:115:45: 115:52
        _97 = const oaes::oaes_sub_byte(_98) -> bb35; // scope 33 at src\oaes.rs:115:31: 115:53
    }

    bb35: {                             
        StorageDead(_98);                // scope 33 at src\oaes.rs:115:53: 115:53
        StorageLive(_102);               // scope 33 at src\oaes.rs:115:26: 115:27
        _102 = _94;                      // scope 33 at src\oaes.rs:115:26: 115:27
        _103 = Len(_43);                 // scope 33 at src\oaes.rs:115:21: 115:28
        _104 = Lt(_102, _103);           // scope 33 at src\oaes.rs:115:21: 115:28
        assert(_104, "index out of bounds: the len is {} but the index is {}", _103, _102) -> bb36; // scope 33 at src\oaes.rs:115:21: 115:28
    }

    bb36: {                             
        _43[_102] = _97;                 // scope 33 at src\oaes.rs:115:21: 115:53
        StorageDead(_97);                // scope 33 at src\oaes.rs:115:53: 115:53
        _96 = ();                        // scope 33 at src\oaes.rs:114:42: 116:18
        _10 = ();                        // scope 29 at src\oaes.rs:114:17: 116:18
        StorageDead(_94);                // scope 30 at src\oaes.rs:116:18: 116:18
        StorageDead(_87);                // scope 29 at src\oaes.rs:116:18: 116:18
        goto -> bb30;                    // scope 29 at src\oaes.rs:114:17: 116:18
    }

    bb37: {                             
        _111 = Div(_112, _113);          // scope 17 at src\oaes.rs:117:38: 117:59
        StorageDead(_113);               // scope 17 at src\oaes.rs:117:59: 117:59
        StorageDead(_112);               // scope 17 at src\oaes.rs:117:59: 117:59
        _115 = CheckedSub(_111, const 1usize); // scope 17 at src\oaes.rs:117:38: 117:63
        assert(!(_115.1: bool), "attempt to subtract with overflow") -> bb38; // scope 17 at src\oaes.rs:117:38: 117:63
    }

    bb38: {                             
        _110 = (_115.0: usize);          // scope 17 at src\oaes.rs:117:38: 117:63
        StorageDead(_111);               // scope 17 at src\oaes.rs:117:63: 117:63
        _107 = const std::ops::Index::index(_108, _110) -> bb39; // scope 17 at src\oaes.rs:117:28: 117:64
    }

    bb39: {                             
        _106 = (*_107);                  // scope 17 at src\oaes.rs:117:28: 117:64
        StorageDead(_110);               // scope 17 at src\oaes.rs:117:64: 117:64
        StorageDead(_108);               // scope 17 at src\oaes.rs:117:64: 117:64
        StorageLive(_116);               // scope 17 at src\oaes.rs:117:22: 117:23
        _116 = const 0usize;             // scope 17 at src\oaes.rs:117:22: 117:23
        _117 = Len(_43);                 // scope 17 at src\oaes.rs:117:17: 117:24
        _118 = Lt(_116, _117);           // scope 17 at src\oaes.rs:117:17: 117:24
        assert(_118, "index out of bounds: the len is {} but the index is {}", _117, _116) -> bb40; // scope 17 at src\oaes.rs:117:17: 117:24
    }

    bb40: {                             
        _43[_116] = BitXor(_43[_116], _106); // scope 17 at src\oaes.rs:117:17: 117:64
        StorageDead(_106);               // scope 17 at src\oaes.rs:117:64: 117:64
        StorageDead(_107);               // scope 17 at src\oaes.rs:117:65: 117:65
        _74 = ();                        // scope 17 at src\oaes.rs:112:27: 118:14
        goto -> bb53;                    // scope 17 at src\oaes.rs:112:13: 122:14
    }

    bb41: {                             
        _120 = Rem(_121, _122);          // scope 17 at src\oaes.rs:118:23: 118:44
        StorageDead(_122);               // scope 17 at src\oaes.rs:118:44: 118:44
        StorageDead(_121);               // scope 17 at src\oaes.rs:118:44: 118:44
        _119 = Eq(_120, const 4usize);   // scope 17 at src\oaes.rs:118:23: 118:49
        StorageDead(_120);               // scope 17 at src\oaes.rs:118:49: 118:49
        switchInt(_119) -> [0u8: bb43, otherwise: bb42]; // scope 17 at src\oaes.rs:118:20: 122:14
    }

    bb42: {                             
        StorageLive(_124);               // scope 35 at src\oaes.rs:119:17: 121:18
        StorageLive(_125);               // scope 35 at src\oaes.rs:119:17: 121:18
        StorageLive(_126);               // scope 35 at src\oaes.rs:119:26: 119:41
        _126 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])) }; // scope 35 at src\oaes.rs:119:26: 119:41
        _125 = const std::iter::IntoIterator::into_iter(_126) -> bb44; // scope 35 at src\oaes.rs:119:17: 121:18
    }

    bb43: {                             
        _74 = ();                        // scope 17 at src\oaes.rs:118:20: 122:14
        goto -> bb52;                    // scope 17 at src\oaes.rs:118:20: 122:14
    }

    bb44: {                             
        StorageDead(_126);               // scope 35 at src\oaes.rs:121:18: 121:18
        StorageLive(_127);               // scope 37 at src\oaes.rs:119:17: 121:18
        _127 = _125;                     // scope 37 at src\oaes.rs:119:17: 121:18
        goto -> bb45;                    // scope 37 at src\oaes.rs:119:17: 121:18
    }

    bb45: {                             
        StorageLive(_128);               // scope 38 at src\oaes.rs:119:17: 121:18
        StorageLive(_129);               // scope 38 at src\oaes.rs:119:17: 121:18
        StorageLive(_130);               // scope 38 at src\oaes.rs:119:17: 121:18
        StorageLive(_131);               // scope 38 at src\oaes.rs:119:17: 121:18
        _131 = &mut _127;                // scope 38 at src\oaes.rs:119:17: 121:18
        _130 = _131;                     // scope 38 at src\oaes.rs:119:17: 121:18
        _129 = const std::iter::Iterator::next(_130) -> bb46; // scope 38 at src\oaes.rs:119:17: 121:18
    }

    bb46: {                             
        StorageDead(_130);               // scope 38 at src\oaes.rs:121:18: 121:18
        _133 = discriminant(_129);       // scope 40 at src\oaes.rs:119:17: 121:18
        switchInt(_133) -> [0isize: bb47, 1isize: bb48, otherwise: bb6]; // scope 40 at src\oaes.rs:119:17: 121:18
    }

    bb47: {                             
        _124 = ();                       // scope 40 at src\oaes.rs:119:17: 121:18
        StorageDead(_132);               // scope 38 at src\oaes.rs:121:18: 121:18
        StorageDead(_129);               // scope 38 at src\oaes.rs:121:18: 121:18
        StorageDead(_131);               // scope 38 at src\oaes.rs:121:18: 121:18
        StorageDead(_128);               // scope 37 at src\oaes.rs:121:18: 121:18
        StorageDead(_127);               // scope 35 at src\oaes.rs:121:18: 121:18
        StorageDead(_125);               // scope 35 at src\oaes.rs:121:18: 121:18
        StorageLive(_146);               // scope 35 at src\oaes.rs:119:17: 121:18
        _146 = _124;                     // scope 35 at src\oaes.rs:119:17: 121:18
        _74 = _146;                      // scope 35 at src\oaes.rs:119:17: 121:18
        StorageDead(_146);               // scope 35 at src\oaes.rs:121:18: 121:18
        StorageDead(_124);               // scope 17 at src\oaes.rs:121:18: 121:18
        goto -> bb52;                    // scope 17 at src\oaes.rs:118:20: 122:14
    }

    bb48: {                             
        StorageLive(_132);               // scope 40 at src\oaes.rs:119:17: 121:18
        _132 = ((_129 as Some).0: usize); // scope 40 at src\oaes.rs:119:17: 121:18
        StorageLive(_134);               // scope 40 at src\oaes.rs:119:17: 121:18
        _134 = _132;                     // scope 40 at src\oaes.rs:119:17: 121:18
        _128 = _134;                     // scope 40 at src\oaes.rs:119:17: 121:18
        StorageDead(_134);               // scope 40 at src\oaes.rs:121:18: 121:18
        StorageDead(_132);               // scope 38 at src\oaes.rs:121:18: 121:18
        StorageDead(_129);               // scope 38 at src\oaes.rs:121:18: 121:18
        StorageDead(_131);               // scope 38 at src\oaes.rs:121:18: 121:18
        StorageLive(_135);               // scope 41 at src\oaes.rs:119:21: 119:22
        StorageLive(_136);               // scope 41 at src\oaes.rs:119:17: 121:18
        _136 = _128;                     // scope 41 at src\oaes.rs:119:17: 121:18
        _135 = _136;                     // scope 41 at src\oaes.rs:119:17: 121:18
        StorageDead(_136);               // scope 41 at src\oaes.rs:121:18: 121:18
        StorageLive(_138);               // scope 41 at src\oaes.rs:120:31: 120:53
        StorageLive(_139);               // scope 41 at src\oaes.rs:120:45: 120:52
        StorageLive(_140);               // scope 41 at src\oaes.rs:120:50: 120:51
        _140 = _135;                     // scope 41 at src\oaes.rs:120:50: 120:51
        _141 = Len(_43);                 // scope 41 at src\oaes.rs:120:45: 120:52
        _142 = Lt(_140, _141);           // scope 41 at src\oaes.rs:120:45: 120:52
        assert(_142, "index out of bounds: the len is {} but the index is {}", _141, _140) -> bb49; // scope 41 at src\oaes.rs:120:45: 120:52
    }

    bb49: {                             
        _139 = _43[_140];                // scope 41 at src\oaes.rs:120:45: 120:52
        _138 = const oaes::oaes_sub_byte(_139) -> bb50; // scope 41 at src\oaes.rs:120:31: 120:53
    }

    bb50: {                             
        StorageDead(_139);               // scope 41 at src\oaes.rs:120:53: 120:53
        StorageLive(_143);               // scope 41 at src\oaes.rs:120:26: 120:27
        _143 = _135;                     // scope 41 at src\oaes.rs:120:26: 120:27
        _144 = Len(_43);                 // scope 41 at src\oaes.rs:120:21: 120:28
        _145 = Lt(_143, _144);           // scope 41 at src\oaes.rs:120:21: 120:28
        assert(_145, "index out of bounds: the len is {} but the index is {}", _144, _143) -> bb51; // scope 41 at src\oaes.rs:120:21: 120:28
    }

    bb51: {                             
        _43[_143] = _138;                // scope 41 at src\oaes.rs:120:21: 120:53
        StorageDead(_138);               // scope 41 at src\oaes.rs:120:53: 120:53
        _137 = ();                       // scope 41 at src\oaes.rs:119:42: 121:18
        _10 = ();                        // scope 37 at src\oaes.rs:119:17: 121:18
        StorageDead(_135);               // scope 38 at src\oaes.rs:121:18: 121:18
        StorageDead(_128);               // scope 37 at src\oaes.rs:121:18: 121:18
        goto -> bb45;                    // scope 37 at src\oaes.rs:119:17: 121:18
    }

    bb52: {                             
        StorageDead(_119);               // scope 17 at src\oaes.rs:122:14: 122:14
        goto -> bb53;                    // scope 17 at src\oaes.rs:112:13: 122:14
    }

    bb53: {                             
        StorageDead(_75);                // scope 17 at src\oaes.rs:122:14: 122:14
        StorageLive(_147);               // scope 43 at src\oaes.rs:123:13: 127:14
        StorageLive(_148);               // scope 43 at src\oaes.rs:123:13: 127:14
        StorageLive(_149);               // scope 43 at src\oaes.rs:123:22: 123:37
        _149 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:19) => cnminer[5424]::oaes[0]::OAES_COL_LEN[0] }, Slice([])) }; // scope 43 at src\oaes.rs:123:22: 123:37
        _148 = const std::iter::IntoIterator::into_iter(_149) -> bb54; // scope 43 at src\oaes.rs:123:13: 127:14
    }

    bb54: {                             
        StorageDead(_149);               // scope 43 at src\oaes.rs:127:14: 127:14
        StorageLive(_150);               // scope 45 at src\oaes.rs:123:13: 127:14
        _150 = _148;                     // scope 45 at src\oaes.rs:123:13: 127:14
        goto -> bb55;                    // scope 45 at src\oaes.rs:123:13: 127:14
    }

    bb55: {                             
        StorageLive(_151);               // scope 46 at src\oaes.rs:123:13: 127:14
        StorageLive(_152);               // scope 46 at src\oaes.rs:123:13: 127:14
        StorageLive(_153);               // scope 46 at src\oaes.rs:123:13: 127:14
        StorageLive(_154);               // scope 46 at src\oaes.rs:123:13: 127:14
        _154 = &mut _150;                // scope 46 at src\oaes.rs:123:13: 127:14
        _153 = _154;                     // scope 46 at src\oaes.rs:123:13: 127:14
        _152 = const std::iter::Iterator::next(_153) -> bb56; // scope 46 at src\oaes.rs:123:13: 127:14
    }

    bb56: {                             
        StorageDead(_153);               // scope 46 at src\oaes.rs:127:14: 127:14
        _156 = discriminant(_152);       // scope 48 at src\oaes.rs:123:13: 127:14
        switchInt(_156) -> [0isize: bb57, 1isize: bb58, otherwise: bb6]; // scope 48 at src\oaes.rs:123:13: 127:14
    }

    bb57: {                             
        _147 = ();                       // scope 48 at src\oaes.rs:123:13: 127:14
        StorageDead(_155);               // scope 46 at src\oaes.rs:127:14: 127:14
        StorageDead(_152);               // scope 46 at src\oaes.rs:127:14: 127:14
        StorageDead(_154);               // scope 46 at src\oaes.rs:127:14: 127:14
        StorageDead(_151);               // scope 45 at src\oaes.rs:127:14: 127:14
        StorageDead(_150);               // scope 43 at src\oaes.rs:127:14: 127:14
        StorageDead(_148);               // scope 43 at src\oaes.rs:127:14: 127:14
        StorageLive(_186);               // scope 43 at src\oaes.rs:123:13: 127:14
        _186 = _147;                     // scope 43 at src\oaes.rs:123:13: 127:14
        _42 = _186;                      // scope 43 at src\oaes.rs:123:13: 127:14
        StorageDead(_186);               // scope 43 at src\oaes.rs:127:14: 127:14
        StorageDead(_147);               // scope 17 at src\oaes.rs:127:14: 127:14
        StorageDead(_43);                // scope 15 at src\oaes.rs:128:10: 128:10
        _10 = ();                        // scope 11 at src\oaes.rs:107:9: 128:10
        StorageDead(_40);                // scope 12 at src\oaes.rs:128:10: 128:10
        StorageDead(_33);                // scope 11 at src\oaes.rs:128:10: 128:10
        goto -> bb11;                    // scope 11 at src\oaes.rs:107:9: 128:10
    }

    bb58: {                             
        StorageLive(_155);               // scope 48 at src\oaes.rs:123:13: 127:14
        _155 = ((_152 as Some).0: usize); // scope 48 at src\oaes.rs:123:13: 127:14
        StorageLive(_157);               // scope 48 at src\oaes.rs:123:13: 127:14
        _157 = _155;                     // scope 48 at src\oaes.rs:123:13: 127:14
        _151 = _157;                     // scope 48 at src\oaes.rs:123:13: 127:14
        StorageDead(_157);               // scope 48 at src\oaes.rs:127:14: 127:14
        StorageDead(_155);               // scope 46 at src\oaes.rs:127:14: 127:14
        StorageDead(_152);               // scope 46 at src\oaes.rs:127:14: 127:14
        StorageDead(_154);               // scope 46 at src\oaes.rs:127:14: 127:14
        StorageLive(_158);               // scope 49 at src\oaes.rs:123:17: 123:18
        StorageLive(_159);               // scope 49 at src\oaes.rs:123:13: 127:14
        _159 = _151;                     // scope 49 at src\oaes.rs:123:13: 127:14
        _158 = _159;                     // scope 49 at src\oaes.rs:123:13: 127:14
        StorageDead(_159);               // scope 49 at src\oaes.rs:127:14: 127:14
        StorageLive(_161);               // scope 51 at src\oaes.rs:124:21: 124:26
        StorageLive(_162);               // scope 51 at src\oaes.rs:124:29: 124:68
        StorageLive(_163);               // scope 51 at src\oaes.rs:124:29: 124:52
        StorageLive(_164);               // scope 51 at src\oaes.rs:124:30: 124:31
        _164 = _40;                      // scope 51 at src\oaes.rs:124:30: 124:31
        StorageLive(_165);               // scope 51 at src\oaes.rs:124:34: 124:51
        _165 = (((*_1).0: oaes::AesKey).5: usize); // scope 51 at src\oaes.rs:124:34: 124:51
        _166 = CheckedSub(_164, _165);   // scope 51 at src\oaes.rs:124:29: 124:52
        assert(!(_166.1: bool), "attempt to subtract with overflow") -> bb59; // scope 51 at src\oaes.rs:124:29: 124:52
    }

    bb59: {                             
        _163 = (_166.0: usize);          // scope 51 at src\oaes.rs:124:29: 124:52
        StorageDead(_165);               // scope 51 at src\oaes.rs:124:52: 124:52
        StorageDead(_164);               // scope 51 at src\oaes.rs:124:52: 124:52
        _167 = CheckedMul(_163, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:18) => cnminer[5424]::oaes[0]::OAES_RKEY_LEN[0] }, Slice([]))); // scope 51 at src\oaes.rs:124:29: 124:68
        assert(!(_167.1: bool), "attempt to multiply with overflow") -> bb60; // scope 51 at src\oaes.rs:124:29: 124:68
    }

    bb60: {                             
        _162 = (_167.0: usize);          // scope 51 at src\oaes.rs:124:29: 124:68
        StorageDead(_163);               // scope 51 at src\oaes.rs:124:68: 124:68
        StorageLive(_168);               // scope 51 at src\oaes.rs:124:71: 124:72
        _168 = _158;                     // scope 51 at src\oaes.rs:124:71: 124:72
        _169 = CheckedAdd(_162, _168);   // scope 51 at src\oaes.rs:124:29: 124:72
        assert(!(_169.1: bool), "attempt to add with overflow") -> bb61; // scope 51 at src\oaes.rs:124:29: 124:72
    }

    bb61: {                             
        _161 = (_169.0: usize);          // scope 51 at src\oaes.rs:124:29: 124:72
        StorageDead(_168);               // scope 51 at src\oaes.rs:124:72: 124:72
        StorageDead(_162);               // scope 51 at src\oaes.rs:124:72: 124:72
        StorageLive(_170);               // scope 51 at src\oaes.rs:126:21: 126:45
        StorageLive(_171);               // scope 51 at src\oaes.rs:126:21: 126:45
        StorageLive(_172);               // scope 51 at src\oaes.rs:126:21: 126:38
        _172 = &(((*_1).0: oaes::AesKey).2: std::vec::Vec<u8>); // scope 51 at src\oaes.rs:126:21: 126:38
        StorageLive(_173);               // scope 51 at src\oaes.rs:126:39: 126:44
        _173 = _161;                     // scope 51 at src\oaes.rs:126:39: 126:44
        _171 = const std::ops::Index::index(_172, _173) -> bb62; // scope 51 at src\oaes.rs:126:21: 126:45
    }

    bb62: {                             
        _170 = (*_171);                  // scope 51 at src\oaes.rs:126:21: 126:45
        StorageDead(_173);               // scope 51 at src\oaes.rs:126:45: 126:45
        StorageDead(_172);               // scope 51 at src\oaes.rs:126:45: 126:45
        StorageLive(_174);               // scope 51 at src\oaes.rs:126:48: 126:55
        StorageLive(_175);               // scope 51 at src\oaes.rs:126:53: 126:54
        _175 = _158;                     // scope 51 at src\oaes.rs:126:53: 126:54
        _176 = Len(_43);                 // scope 51 at src\oaes.rs:126:48: 126:55
        _177 = Lt(_175, _176);           // scope 51 at src\oaes.rs:126:48: 126:55
        assert(_177, "index out of bounds: the len is {} but the index is {}", _176, _175) -> bb63; // scope 51 at src\oaes.rs:126:48: 126:55
    }

    bb63: {                             
        _174 = _43[_175];                // scope 51 at src\oaes.rs:126:48: 126:55
        StorageLive(_178);               // scope 51 at src\oaes.rs:125:17: 125:57
        StorageLive(_179);               // scope 51 at src\oaes.rs:125:17: 125:34
        _179 = &mut (((*_1).0: oaes::AesKey).2: std::vec::Vec<u8>); // scope 51 at src\oaes.rs:125:17: 125:34
        StorageLive(_180);               // scope 51 at src\oaes.rs:125:35: 125:56
        StorageLive(_181);               // scope 51 at src\oaes.rs:125:35: 125:52
        StorageLive(_182);               // scope 51 at src\oaes.rs:125:35: 125:36
        _182 = _40;                      // scope 51 at src\oaes.rs:125:35: 125:36
        _183 = CheckedMul(_182, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:18) => cnminer[5424]::oaes[0]::OAES_RKEY_LEN[0] }, Slice([]))); // scope 51 at src\oaes.rs:125:35: 125:52
        assert(!(_183.1: bool), "attempt to multiply with overflow") -> bb64; // scope 51 at src\oaes.rs:125:35: 125:52
    }

    bb64: {                             
        _181 = (_183.0: usize);          // scope 51 at src\oaes.rs:125:35: 125:52
        StorageDead(_182);               // scope 51 at src\oaes.rs:125:52: 125:52
        StorageLive(_184);               // scope 51 at src\oaes.rs:125:55: 125:56
        _184 = _158;                     // scope 51 at src\oaes.rs:125:55: 125:56
        _185 = CheckedAdd(_181, _184);   // scope 51 at src\oaes.rs:125:35: 125:56
        assert(!(_185.1: bool), "attempt to add with overflow") -> bb65; // scope 51 at src\oaes.rs:125:35: 125:56
    }

    bb65: {                             
        _180 = (_185.0: usize);          // scope 51 at src\oaes.rs:125:35: 125:56
        StorageDead(_184);               // scope 51 at src\oaes.rs:125:56: 125:56
        StorageDead(_181);               // scope 51 at src\oaes.rs:125:56: 125:56
        _178 = const std::ops::IndexMut::index_mut(_179, _180) -> bb66; // scope 51 at src\oaes.rs:125:17: 125:57
    }

    bb66: {                             
        StorageDead(_180);               // scope 51 at src\oaes.rs:125:57: 125:57
        StorageDead(_179);               // scope 51 at src\oaes.rs:125:57: 125:57
        (*_178) = BitXor(_170, _174);    // scope 51 at src\oaes.rs:125:17: 126:55
        StorageDead(_174);               // scope 51 at src\oaes.rs:126:55: 126:55
        StorageDead(_170);               // scope 51 at src\oaes.rs:126:55: 126:55
        StorageDead(_178);               // scope 51 at src\oaes.rs:126:56: 126:56
        StorageDead(_171);               // scope 51 at src\oaes.rs:126:56: 126:56
        _160 = ();                       // scope 49 at src\oaes.rs:123:38: 127:14
        StorageDead(_161);               // scope 49 at src\oaes.rs:127:14: 127:14
        _10 = ();                        // scope 45 at src\oaes.rs:123:13: 127:14
        StorageDead(_158);               // scope 46 at src\oaes.rs:127:14: 127:14
        StorageDead(_151);               // scope 45 at src\oaes.rs:127:14: 127:14
        goto -> bb55;                    // scope 45 at src\oaes.rs:123:13: 127:14
    }

    bb67: {                              // cleanup
        (((*_1).0: oaes::AesKey).2: std::vec::Vec<u8>) = _2; // scope 0 at src\oaes.rs:100:9: 100:26
        resume;                          // scope 0 at src\oaes.rs:96:5: 129:6
    }

    bb68: {                             
        (((*_1).0: oaes::AesKey).2: std::vec::Vec<u8>) = _2; // scope 0 at src\oaes.rs:100:9: 100:26
        StorageDead(_2);                 // scope 0 at src\oaes.rs:100:61: 100:61
        StorageLive(_5);                 // scope 1 at src\oaes.rs:102:9: 104:10
        StorageLive(_6);                 // scope 1 at src\oaes.rs:102:9: 104:10
        StorageLive(_7);                 // scope 1 at src\oaes.rs:102:18: 102:42
        StorageLive(_8);                 // scope 1 at src\oaes.rs:102:21: 102:42
        _8 = (((*_1).0: oaes::AesKey).3: usize); // scope 1 at src\oaes.rs:102:21: 102:42
        _7 = std::ops::Range<usize> { start: const 0usize, end: _8 }; // scope 1 at src\oaes.rs:102:18: 102:42
        StorageDead(_8);                 // scope 1 at src\oaes.rs:102:42: 102:42
        _6 = const std::iter::IntoIterator::into_iter(_7) -> bb2; // scope 1 at src\oaes.rs:102:9: 104:10
    }
}

const oaes::OAES_SUB_BYTE_VALUE::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 16usize;              // scope 0 at src\oaes.rs:23:41: 23:43
        return;                          // scope 0 at src\oaes.rs:23:41: 23:43
    }
}

const keccak::keccakf::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 5usize;               // scope 0 at src\keccak.rs:88:25: 88:26
        return;                          // scope 0 at src\keccak.rs:88:25: 88:26
    }
}

fn cryptonight::cn_hash_ctx(_1: &mut [u8], _2: &[u8], _3: &mut cryptonight::CNContext) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
    }
    scope 2 {
        let _46: ();                     // "_result" in scope 2 at src\cryptonight.rs:186:5: 188:6
        scope 4 {
            let mut _49: std::ops::Range<usize>; // "iter" in scope 4 at src\cryptonight.rs:186:5: 188:6
            scope 5 {
                let mut _51: usize;      // "__next" in scope 5 at src\cryptonight.rs:186:5: 188:6
                scope 7 {
                    let _55: usize;      // "val" in scope 7 at src\cryptonight.rs:186:5: 188:6
                }
                scope 8 {
                    let _58: usize;      // "i" in scope 8 at src\cryptonight.rs:186:9: 186:10
                    scope 10 {
                    }
                }
                scope 9 {
                }
            }
            scope 6 {
            }
        }
    }
    scope 3 {
    }
    scope 11 {
    }
    scope 12 {
        let mut _96: usize;              // "i" in scope 12 at src\cryptonight.rs:192:13: 192:18
        scope 14 {
            let _97: *mut u8;            // "text_ptr" in scope 14 at src\cryptonight.rs:193:13: 193:21
            scope 16 {
                let _100: *const u8;     // "exp_ptr" in scope 16 at src\cryptonight.rs:194:13: 194:20
                scope 18 {
                    let _107: ();        // "_result" in scope 18 at src\cryptonight.rs:196:13: 208:14
                    scope 20 {
                        let mut _110: std::ops::Range<isize>; // "iter" in scope 20 at src\cryptonight.rs:196:13: 208:14
                        scope 21 {
                            let mut _111: isize; // "__next" in scope 21 at src\cryptonight.rs:196:13: 208:14
                            scope 23 {
                                let _115: isize; // "val" in scope 23 at src\cryptonight.rs:196:13: 208:14
                            }
                            scope 24 {
                                let _118: isize; // "j" in scope 24 at src\cryptonight.rs:196:17: 196:18
                                scope 26 {
                                    scope 27 {
                                        let _121: *const u32; // "exp_ptr" in scope 27 at src\cryptonight.rs:198:25: 198:32
                                    }
                                    scope 28 {
                                    }
                                }
                            }
                            scope 25 {
                            }
                        }
                        scope 22 {
                        }
                    }
                }
                scope 19 {
                }
                scope 29 {
                    let _168: ();        // "_result" in scope 29 at src\cryptonight.rs:209:13: 211:14
                    scope 31 {
                        let mut _171: std::ops::Range<usize>; // "iter" in scope 31 at src\cryptonight.rs:209:13: 211:14
                        scope 32 {
                            let mut _172: usize; // "__next" in scope 32 at src\cryptonight.rs:209:13: 211:14
                            scope 34 {
                                let _176: usize; // "val" in scope 34 at src\cryptonight.rs:209:13: 211:14
                            }
                            scope 35 {
                                let _179: usize; // "j" in scope 35 at src\cryptonight.rs:209:17: 209:18
                            }
                            scope 36 {
                            }
                        }
                        scope 33 {
                        }
                    }
                }
                scope 30 {
                }
            }
            scope 17 {
            }
        }
        scope 15 {
        }
    }
    scope 13 {
    }
    scope 37 {
        let _196: *mut u64;              // "a_ptr" in scope 37 at src\cryptonight.rs:216:13: 216:18
        scope 39 {
            let _200: *mut u64;          // "b_ptr" in scope 39 at src\cryptonight.rs:217:13: 217:18
            scope 41 {
                let _204: *const u64;    // "k_ptr" in scope 41 at src\cryptonight.rs:218:13: 218:18
                scope 43 {
                }
                scope 44 {
                    let _210: ();        // "_result" in scope 44 at src\cryptonight.rs:219:9: 224:10
                    scope 46 {
                        let mut _213: std::ops::Range<isize>; // "iter" in scope 46 at src\cryptonight.rs:219:9: 224:10
                        scope 47 {
                            let mut _214: isize; // "__next" in scope 47 at src\cryptonight.rs:219:9: 224:10
                            scope 49 {
                                let _218: isize; // "val" in scope 49 at src\cryptonight.rs:219:9: 224:10
                            }
                            scope 50 {
                                let _221: isize; // "i" in scope 50 at src\cryptonight.rs:219:13: 219:14
                                scope 52 {
                                }
                            }
                            scope 51 {
                            }
                        }
                        scope 48 {
                        }
                    }
                }
                scope 45 {
                }
            }
            scope 42 {
            }
        }
        scope 40 {
        }
    }
    scope 38 {
    }
    scope 53 {
        let mut _254: usize;             // "i" in scope 53 at src\cryptonight.rs:227:13: 227:18
        scope 55 {
            let _255: *mut u8;           // "a_ptr" in scope 55 at src\cryptonight.rs:228:13: 228:18
            scope 57 {
                let _258: *mut u8;       // "b_ptr" in scope 57 at src\cryptonight.rs:229:13: 229:18
                scope 59 {
                    let _261: *mut u8;   // "c_ptr" in scope 59 at src\cryptonight.rs:230:13: 230:18
                    scope 61 {
                        let _264: *mut u8; // "ls_ptr" in scope 61 at src\cryptonight.rs:231:13: 231:19
                        scope 63 {
                        }
                    }
                    scope 62 {
                    }
                }
                scope 60 {
                }
            }
            scope 58 {
            }
        }
        scope 56 {
        }
    }
    scope 54 {
    }
    scope 64 {
        let _346: ();                    // "_result" in scope 64 at src\cryptonight.rs:250:5: 252:6
        scope 66 {
            let mut _349: std::ops::Range<usize>; // "iter" in scope 66 at src\cryptonight.rs:250:5: 252:6
            scope 67 {
                let mut _350: usize;     // "__next" in scope 67 at src\cryptonight.rs:250:5: 252:6
                scope 69 {
                    let _354: usize;     // "val" in scope 69 at src\cryptonight.rs:250:5: 252:6
                }
                scope 70 {
                    let _357: usize;     // "i" in scope 70 at src\cryptonight.rs:250:9: 250:10
                    scope 72 {
                    }
                }
                scope 71 {
                }
            }
            scope 68 {
            }
        }
    }
    scope 65 {
    }
    scope 73 {
    }
    scope 74 {
        let mut _382: isize;             // "i" in scope 74 at src\cryptonight.rs:256:13: 256:18
        scope 76 {
            let _383: *mut u8;           // "text_ptr" in scope 76 at src\cryptonight.rs:257:13: 257:21
            scope 78 {
                let _386: *const u8;     // "ls_ptr" in scope 78 at src\cryptonight.rs:258:13: 258:19
                scope 80 {
                    let _389: *const u8; // "exp_ptr" in scope 80 at src\cryptonight.rs:259:13: 259:20
                    scope 82 {
                        scope 83 {
                            let _458: (); // "_result" in scope 83 at src\cryptonight.rs:270:17: 280:18
                            scope 85 {
                                let mut _461: std::ops::Range<isize>; // "iter" in scope 85 at src\cryptonight.rs:270:17: 280:18
                                scope 86 {
                                    let mut _462: isize; // "__next" in scope 86 at src\cryptonight.rs:270:17: 280:18
                                    scope 88 {
                                        let _466: isize; // "val" in scope 88 at src\cryptonight.rs:270:17: 280:18
                                    }
                                    scope 89 {
                                        let _469: isize; // "j" in scope 89 at src\cryptonight.rs:270:21: 270:22
                                        scope 91 {
                                            let _472: *const u32; // "exp_ptr" in scope 91 at src\cryptonight.rs:271:25: 271:32
                                        }
                                        scope 92 {
                                        }
                                    }
                                    scope 90 {
                                    }
                                }
                                scope 87 {
                                }
                            }
                        }
                        scope 84 {
                        }
                    }
                }
                scope 81 {
                }
            }
            scope 79 {
            }
        }
        scope 77 {
        }
    }
    scope 75 {
    }
    scope 93 {
        let _521: ();                    // "_result" in scope 93 at src\cryptonight.rs:285:5: 287:6
        scope 95 {
            let mut _524: std::ops::Range<usize>; // "iter" in scope 95 at src\cryptonight.rs:285:5: 287:6
            scope 96 {
                let mut _525: usize;     // "__next" in scope 96 at src\cryptonight.rs:285:5: 287:6
                scope 98 {
                    let _529: usize;     // "val" in scope 98 at src\cryptonight.rs:285:5: 287:6
                }
                scope 99 {
                    let _532: usize;     // "i" in scope 99 at src\cryptonight.rs:285:9: 285:10
                    scope 101 {
                    }
                }
                scope 100 {
                }
            }
            scope 97 {
            }
        }
    }
    scope 94 {
    }
    scope 102 {
    }
    let mut _4: ();
    let mut _5: ();
    let mut _6: std::fmt::Arguments;
    let mut _7: &[&str];
    let mut _8: &[&str; 1];
    let mut _9: &[&str; 1];
    let mut _10: &[std::fmt::ArgumentV1];
    let mut _11: &[std::fmt::ArgumentV1; 0];
    let mut _12: &[std::fmt::ArgumentV1; 0];
    let mut _13: ();
    let mut _14: ();
    let mut _15: std::result::Result<(), std::io::Error>;
    let mut _16: &mut std::io::Stdout;
    let mut _17: std::io::Stdout;
    let mut _18: oaes::AesContext;
    let mut _19: ();
    let mut _20: &[u8];
    let mut _21: &[u8];
    let mut _22: &[u8];
    let mut _23: &[u8];
    let mut _24: std::ops::Range<usize>;
    let mut _25: &mut [u8];
    let mut _26: &mut [u8];
    let mut _27: &mut [u8];
    let mut _28: &mut [u8; 200];
    let mut _29: [u8; 200];
    let mut _30: [u8; 200];
    let mut _31: ();
    let mut _32: ();
    let mut _33: std::fmt::Arguments;
    let mut _34: &[&str];
    let mut _35: &[&str; 1];
    let mut _36: &[&str; 1];
    let mut _37: &[std::fmt::ArgumentV1];
    let mut _38: &[std::fmt::ArgumentV1; 0];
    let mut _39: &[std::fmt::ArgumentV1; 0];
    let mut _40: ();
    let mut _41: ();
    let mut _42: std::result::Result<(), std::io::Error>;
    let mut _43: &mut std::io::Stdout;
    let mut _44: std::io::Stdout;
    let mut _45: ();
    let mut _47: std::ops::Range<usize>;
    let mut _48: std::ops::Range<usize>;
    let mut _50: ();
    let mut _52: std::option::Option<usize>;
    let mut _53: &mut std::ops::Range<usize>;
    let mut _54: &mut std::ops::Range<usize>;
    let mut _56: isize;
    let mut _57: usize;
    let mut _59: usize;
    let mut _60: ();
    let mut _61: u8;
    let mut _62: cryptonight::SlowHashStateInner;
    let mut _63: cryptonight::SlowHashStateInner;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: bool;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: bool;
    let mut _70: ();
    let mut _71: ();
    let mut _72: &mut oaes::AesContext;
    let mut _73: &[u8];
    let mut _74: &[u8];
    let mut _75: &[u8];
    let mut _76: &[u8];
    let mut _77: &[u8; 200];
    let mut _78: [u8; 200];
    let mut _79: [u8; 200];
    let mut _80: std::ops::RangeFull;
    let mut _81: ();
    let mut _82: ();
    let mut _83: std::fmt::Arguments;
    let mut _84: &[&str];
    let mut _85: &[&str; 1];
    let mut _86: &[&str; 1];
    let mut _87: &[std::fmt::ArgumentV1];
    let mut _88: &[std::fmt::ArgumentV1; 0];
    let mut _89: &[std::fmt::ArgumentV1; 0];
    let mut _90: ();
    let mut _91: ();
    let mut _92: std::result::Result<(), std::io::Error>;
    let mut _93: &mut std::io::Stdout;
    let mut _94: std::io::Stdout;
    let mut _95: ();
    let mut _98: &mut [u8];
    let mut _99: &mut [u8; 128];
    let mut _101: &[u8];
    let mut _102: &[u8];
    let mut _103: &std::vec::Vec<u8>;
    let mut _104: bool;
    let mut _105: usize;
    let mut _106: ();
    let mut _108: std::ops::Range<isize>;
    let mut _109: std::ops::Range<isize>;
    let mut _112: std::option::Option<isize>;
    let mut _113: &mut std::ops::Range<isize>;
    let mut _114: &mut std::ops::Range<isize>;
    let mut _116: isize;
    let mut _117: isize;
    let mut _119: isize;
    let mut _120: ();
    let mut _122: *const u8;
    let mut _123: *const u8;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: (isize, bool);
    let mut _127: ();
    let mut _128: *mut u32;
    let mut _129: *mut u8;
    let mut _130: *const u32;
    let mut _131: ();
    let mut _132: *mut u32;
    let mut _133: *mut u8;
    let mut _134: *mut u8;
    let mut _135: *const u32;
    let mut _136: ();
    let mut _137: *mut u32;
    let mut _138: *mut u8;
    let mut _139: *mut u8;
    let mut _140: *const u32;
    let mut _141: ();
    let mut _142: *mut u32;
    let mut _143: *mut u8;
    let mut _144: *mut u8;
    let mut _145: *const u32;
    let mut _146: ();
    let mut _147: *mut u32;
    let mut _148: *mut u8;
    let mut _149: *mut u8;
    let mut _150: *const u32;
    let mut _151: ();
    let mut _152: *mut u32;
    let mut _153: *mut u8;
    let mut _154: *mut u8;
    let mut _155: *const u32;
    let mut _156: ();
    let mut _157: *mut u32;
    let mut _158: *mut u8;
    let mut _159: *mut u8;
    let mut _160: *const u32;
    let mut _161: ();
    let mut _162: *mut u32;
    let mut _163: *mut u8;
    let mut _164: *mut u8;
    let mut _165: *const u32;
    let mut _166: ();
    let mut _167: ();
    let mut _169: std::ops::Range<usize>;
    let mut _170: std::ops::Range<usize>;
    let mut _173: std::option::Option<usize>;
    let mut _174: &mut std::ops::Range<usize>;
    let mut _175: &mut std::ops::Range<usize>;
    let mut _177: isize;
    let mut _178: usize;
    let mut _180: usize;
    let mut _181: ();
    let mut _182: u8;
    let mut _183: usize;
    let mut _184: usize;
    let mut _185: bool;
    let mut _186: &mut u8;
    let mut _187: &mut [u8];
    let mut _188: &mut [u8; 2097152];
    let mut _189: usize;
    let mut _190: usize;
    let mut _191: usize;
    let mut _192: (usize, bool);
    let mut _193: ();
    let mut _194: (usize, bool);
    let mut _195: ();
    let mut _197: *mut u8;
    let mut _198: &mut [u8];
    let mut _199: &mut [u8; 16];
    let mut _201: *mut u8;
    let mut _202: &mut [u8];
    let mut _203: &mut [u8; 16];
    let mut _205: *const u8;
    let mut _206: &[u8];
    let mut _207: &[u8; 64];
    let mut _208: [u8; 64];
    let mut _209: [u8; 64];
    let mut _211: std::ops::Range<isize>;
    let mut _212: std::ops::Range<isize>;
    let mut _215: std::option::Option<isize>;
    let mut _216: &mut std::ops::Range<isize>;
    let mut _217: &mut std::ops::Range<isize>;
    let mut _219: isize;
    let mut _220: isize;
    let mut _222: isize;
    let mut _223: ();
    let mut _224: u64;
    let mut _225: *const u64;
    let mut _226: *const u64;
    let mut _227: isize;
    let mut _228: u64;
    let mut _229: *const u64;
    let mut _230: *const u64;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: (isize, bool);
    let mut _234: *mut u64;
    let mut _235: *mut u64;
    let mut _236: isize;
    let mut _237: u64;
    let mut _238: *const u64;
    let mut _239: *const u64;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: (isize, bool);
    let mut _243: u64;
    let mut _244: *const u64;
    let mut _245: *const u64;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: (isize, bool);
    let mut _249: *mut u64;
    let mut _250: *mut u64;
    let mut _251: isize;
    let mut _252: ();
    let mut _253: ();
    let mut _256: &mut [u8];
    let mut _257: &mut [u8; 16];
    let mut _259: &mut [u8];
    let mut _260: &mut [u8; 16];
    let mut _262: &mut [u8];
    let mut _263: &mut [u8; 16];
    let mut _265: &mut [u8];
    let mut _266: &mut [u8; 2097152];
    let mut _267: bool;
    let mut _268: usize;
    let mut _269: usize;
    let mut _270: bool;
    let mut _271: ();
    let mut _272: ();
    let mut _273: *mut u32;
    let mut _274: *mut u8;
    let mut _275: *const u32;
    let mut _276: *mut u8;
    let mut _277: *mut u8;
    let mut _278: isize;
    let mut _279: u64;
    let mut _280: u64;
    let mut _281: *const u64;
    let mut _282: *mut u8;
    let mut _283: *const u32;
    let mut _284: *mut u8;
    let mut _285: ();
    let mut _286: *const u8;
    let mut _287: *mut u8;
    let mut _288: *const u8;
    let mut _289: *mut u8;
    let mut _290: *mut u8;
    let mut _291: *mut u8;
    let mut _292: isize;
    let mut _293: u64;
    let mut _294: u64;
    let mut _295: *const u64;
    let mut _296: *mut u8;
    let mut _297: ();
    let mut _298: *const u8;
    let mut _299: *mut u8;
    let mut _300: *mut u8;
    let mut _301: *mut u8;
    let mut _302: *mut u8;
    let mut _303: isize;
    let mut _304: u64;
    let mut _305: u64;
    let mut _306: *const u64;
    let mut _307: *mut u8;
    let mut _308: ();
    let mut _309: *mut u32;
    let mut _310: *mut u8;
    let mut _311: *const u32;
    let mut _312: *mut u8;
    let mut _313: *mut u8;
    let mut _314: isize;
    let mut _315: u64;
    let mut _316: u64;
    let mut _317: *const u64;
    let mut _318: *mut u8;
    let mut _319: *const u32;
    let mut _320: *mut u8;
    let mut _321: ();
    let mut _322: *const u8;
    let mut _323: *mut u8;
    let mut _324: *const u8;
    let mut _325: *mut u8;
    let mut _326: *mut u8;
    let mut _327: *mut u8;
    let mut _328: isize;
    let mut _329: u64;
    let mut _330: u64;
    let mut _331: *const u64;
    let mut _332: *mut u8;
    let mut _333: ();
    let mut _334: *const u8;
    let mut _335: *mut u8;
    let mut _336: *mut u8;
    let mut _337: *mut u8;
    let mut _338: *mut u8;
    let mut _339: isize;
    let mut _340: u64;
    let mut _341: u64;
    let mut _342: *const u64;
    let mut _343: *mut u8;
    let mut _344: (usize, bool);
    let mut _345: ();
    let mut _347: std::ops::Range<usize>;
    let mut _348: std::ops::Range<usize>;
    let mut _351: std::option::Option<usize>;
    let mut _352: &mut std::ops::Range<usize>;
    let mut _353: &mut std::ops::Range<usize>;
    let mut _355: isize;
    let mut _356: usize;
    let mut _358: usize;
    let mut _359: ();
    let mut _360: u8;
    let mut _361: cryptonight::SlowHashStateInner;
    let mut _362: cryptonight::SlowHashStateInner;
    let mut _363: usize;
    let mut _364: usize;
    let mut _365: bool;
    let mut _366: usize;
    let mut _367: usize;
    let mut _368: bool;
    let mut _369: ();
    let mut _370: oaes::AesContext;
    let mut _371: ();
    let mut _372: &mut oaes::AesContext;
    let mut _373: &[u8];
    let mut _374: &[u8];
    let mut _375: &[u8];
    let mut _376: &[u8];
    let mut _377: &[u8; 200];
    let mut _378: [u8; 200];
    let mut _379: [u8; 200];
    let mut _380: std::ops::RangeFrom<usize>;
    let mut _381: ();
    let mut _384: &mut [u8];
    let mut _385: &mut [u8; 128];
    let mut _387: &[u8];
    let mut _388: &[u8; 2097152];
    let mut _390: &[u8];
    let mut _391: &[u8];
    let mut _392: &std::vec::Vec<u8>;
    let mut _393: bool;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: ();
    let mut _397: ();
    let mut _398: *mut u8;
    let mut _399: *const u8;
    let mut _400: *const u8;
    let mut _401: isize;
    let mut _402: ();
    let mut _403: *mut u8;
    let mut _404: *mut u8;
    let mut _405: *const u8;
    let mut _406: *const u8;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: (isize, bool);
    let mut _410: ();
    let mut _411: *mut u8;
    let mut _412: *mut u8;
    let mut _413: *const u8;
    let mut _414: *const u8;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: (isize, bool);
    let mut _418: ();
    let mut _419: *mut u8;
    let mut _420: *mut u8;
    let mut _421: *const u8;
    let mut _422: *const u8;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: (isize, bool);
    let mut _426: ();
    let mut _427: *mut u8;
    let mut _428: *mut u8;
    let mut _429: *const u8;
    let mut _430: *const u8;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: (isize, bool);
    let mut _434: ();
    let mut _435: *mut u8;
    let mut _436: *mut u8;
    let mut _437: *const u8;
    let mut _438: *const u8;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: (isize, bool);
    let mut _442: ();
    let mut _443: *mut u8;
    let mut _444: *mut u8;
    let mut _445: *const u8;
    let mut _446: *const u8;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: (isize, bool);
    let mut _450: ();
    let mut _451: *mut u8;
    let mut _452: *mut u8;
    let mut _453: *const u8;
    let mut _454: *const u8;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: (isize, bool);
    let mut _459: std::ops::Range<isize>;
    let mut _460: std::ops::Range<isize>;
    let mut _463: std::option::Option<isize>;
    let mut _464: &mut std::ops::Range<isize>;
    let mut _465: &mut std::ops::Range<isize>;
    let mut _467: isize;
    let mut _468: isize;
    let mut _470: isize;
    let mut _471: ();
    let mut _473: *const u8;
    let mut _474: *const u8;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: (isize, bool);
    let mut _478: ();
    let mut _479: *mut u32;
    let mut _480: *mut u8;
    let mut _481: *const u32;
    let mut _482: ();
    let mut _483: *mut u32;
    let mut _484: *mut u8;
    let mut _485: *mut u8;
    let mut _486: *const u32;
    let mut _487: ();
    let mut _488: *mut u32;
    let mut _489: *mut u8;
    let mut _490: *mut u8;
    let mut _491: *const u32;
    let mut _492: ();
    let mut _493: *mut u32;
    let mut _494: *mut u8;
    let mut _495: *mut u8;
    let mut _496: *const u32;
    let mut _497: ();
    let mut _498: *mut u32;
    let mut _499: *mut u8;
    let mut _500: *mut u8;
    let mut _501: *const u32;
    let mut _502: ();
    let mut _503: *mut u32;
    let mut _504: *mut u8;
    let mut _505: *mut u8;
    let mut _506: *const u32;
    let mut _507: ();
    let mut _508: *mut u32;
    let mut _509: *mut u8;
    let mut _510: *mut u8;
    let mut _511: *const u32;
    let mut _512: ();
    let mut _513: *mut u32;
    let mut _514: *mut u8;
    let mut _515: *mut u8;
    let mut _516: *const u32;
    let mut _517: ();
    let mut _518: isize;
    let mut _519: (isize, bool);
    let mut _520: ();
    let mut _522: std::ops::Range<usize>;
    let mut _523: std::ops::Range<usize>;
    let mut _526: std::option::Option<usize>;
    let mut _527: &mut std::ops::Range<usize>;
    let mut _528: &mut std::ops::Range<usize>;
    let mut _530: isize;
    let mut _531: usize;
    let mut _533: usize;
    let mut _534: ();
    let mut _535: u8;
    let mut _536: usize;
    let mut _537: usize;
    let mut _538: bool;
    let mut _539: cryptonight::SlowHashStateInner;
    let mut _540: cryptonight::SlowHashStateInner;
    let mut _541: usize;
    let mut _542: usize;
    let mut _543: bool;
    let mut _544: ();
    let mut _545: ();
    let mut _546: &mut [u64; 25];
    let mut _547: &mut [u64; 25];
    let mut _548: [u64; 25];
    let mut _549: [u64; 25];

    bb0: {                              
        StorageLive(_6);                 // scope 0 at <print macros>:2:27: 2:58
        StorageLive(_7);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_8);                 // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_9);                 // scope 0 at <println macros>:2:11: 2:36
        _9 = promoted[5];                // scope 0 at <println macros>:2:11: 2:36
        _8 = _9;                         // scope 0 at <println macros>:2:11: 2:36
        _7 = _8 as &[&str] (Unsize);     // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_8);                 // scope 0 at <println macros>:2:36: 2:36
        StorageLive(_10);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_11);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_12);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_13);                // scope 0 at <println macros>:2:11: 2:36
        _13 = ();                        // scope 0 at <println macros>:2:11: 2:36
        _12 = promoted[4];               // scope 0 at <println macros>:2:11: 2:36
        _11 = _12;                       // scope 0 at <println macros>:2:11: 2:36
        _10 = _11 as &[std::fmt::ArgumentV1] (Unsize); // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_11);                // scope 0 at <println macros>:2:36: 2:36
        _6 = const std::fmt::Arguments::new_v1(_7, _10) -> bb1; // scope 0 at <print macros>:2:27: 2:58
    }

    bb1: {                              
        StorageDead(_10);                // scope 0 at <print macros>:2:58: 2:58
        StorageDead(_7);                 // scope 0 at <print macros>:2:58: 2:58
        _5 = const std::io::_print(_6) -> bb2; // scope 0 at <print macros>:2:1: 2:60
    }

    bb2: {                              
        StorageDead(_6);                 // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_12);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_13);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_9);                 // scope 0 at <print macros>:2:60: 2:60
        StorageLive(_15);                // scope 0 at src\cryptonight.rs:10:9: 10:36
        StorageLive(_16);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        StorageLive(_17);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        _17 = const std::io::stdout() -> bb3; // scope 0 at src\cryptonight.rs:10:9: 10:28
    }

    bb3: {                              
        _16 = &mut _17;                  // scope 0 at src\cryptonight.rs:10:9: 10:28
        _15 = const std::io::Write::flush(_16) -> [return: bb4, unwind: bb6]; // scope 0 at src\cryptonight.rs:10:9: 10:36
    }

    bb4: {                              
        StorageDead(_16);                // scope 0 at src\cryptonight.rs:10:36: 10:36
        _14 = const <std::result::Result<T, E>>::unwrap(_15) -> [return: bb7, unwind: bb6]; // scope 0 at src\cryptonight.rs:10:9: 10:45
    }

    bb5: {                               // cleanup
        resume;                          // scope 0 at src\cryptonight.rs:181:1: 291:2
    }

    bb6: {                               // cleanup
        drop(_17) -> bb5;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb7: {                              
        StorageDead(_15);                // scope 0 at src\cryptonight.rs:10:45: 10:45
        drop(_17) -> bb8;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb8: {                              
        StorageDead(_17);                // scope 0 at src\cryptonight.rs:10:46: 10:46
        _4 = ();                         // scope 0 at src\cryptonight.rs:7:21: 11:6
        StorageLive(_18);                // scope 0 at src\cryptonight.rs:183:19: 183:40
        _18 = const std::default::Default::default() -> bb9; // scope 0 at src\cryptonight.rs:183:19: 183:40
    }

    bb9: {                              
        drop(((*_3).6: oaes::AesContext)) -> [return: bb191, unwind: bb190]; // scope 0 at src\cryptonight.rs:183:5: 183:16
    }

    bb10: {                             
        StorageDead(_24);                // scope 0 at src\cryptonight.rs:184:25: 184:25
        StorageDead(_23);                // scope 0 at src\cryptonight.rs:184:25: 184:25
        _21 = _22;                       // scope 0 at src\cryptonight.rs:184:12: 184:25
        _20 = _21;                       // scope 0 at src\cryptonight.rs:184:12: 184:25
        StorageLive(_25);                // scope 0 at src\cryptonight.rs:184:27: 184:58
        StorageLive(_26);                // scope 0 at src\cryptonight.rs:184:27: 184:58
        StorageLive(_27);                // scope 0 at src\cryptonight.rs:184:27: 184:49
        StorageLive(_28);                // scope 0 at src\cryptonight.rs:184:27: 184:49
        StorageLive(_29);                // scope 0 at src\cryptonight.rs:184:27: 184:49
        StorageLive(_30);                // scope 1 at src\cryptonight.rs:184:34: 184:48
        _30 = ((((*_3).1: cryptonight::SlowHashState).0: cryptonight::HashState).0: [u8; 200]); // scope 1 at src\cryptonight.rs:184:34: 184:48
        _29 = _30;                       // scope 1 at src\cryptonight.rs:184:34: 184:48
        StorageDead(_30);                // scope 1 at src\cryptonight.rs:184:48: 184:48
        _28 = &mut _29;                  // scope 0 at src\cryptonight.rs:184:27: 184:49
        _27 = _28 as &mut [u8] (Unsize); // scope 0 at src\cryptonight.rs:184:27: 184:49
        StorageDead(_28);                // scope 0 at src\cryptonight.rs:184:49: 184:49
        _26 = const std::convert::AsMut::as_mut(_27) -> bb11; // scope 0 at src\cryptonight.rs:184:27: 184:58
    }

    bb11: {                             
        _25 = _26;                       // scope 0 at src\cryptonight.rs:184:27: 184:58
        StorageDead(_27);                // scope 0 at src\cryptonight.rs:184:58: 184:58
        _19 = const keccak::keccak(_20, _25) -> bb12; // scope 0 at src\cryptonight.rs:184:5: 184:59
    }

    bb12: {                             
        StorageDead(_25);                // scope 0 at src\cryptonight.rs:184:59: 184:59
        StorageDead(_20);                // scope 0 at src\cryptonight.rs:184:59: 184:59
        StorageDead(_26);                // scope 0 at src\cryptonight.rs:184:60: 184:60
        StorageDead(_29);                // scope 0 at src\cryptonight.rs:184:60: 184:60
        StorageDead(_21);                // scope 0 at src\cryptonight.rs:184:60: 184:60
        StorageDead(_22);                // scope 0 at src\cryptonight.rs:184:60: 184:60
        StorageLive(_33);                // scope 0 at <print macros>:2:27: 2:58
        StorageLive(_34);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_35);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_36);                // scope 0 at <println macros>:2:11: 2:36
        _36 = promoted[3];               // scope 0 at <println macros>:2:11: 2:36
        _35 = _36;                       // scope 0 at <println macros>:2:11: 2:36
        _34 = _35 as &[&str] (Unsize);   // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_35);                // scope 0 at <println macros>:2:36: 2:36
        StorageLive(_37);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_38);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_39);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_40);                // scope 0 at <println macros>:2:11: 2:36
        _40 = ();                        // scope 0 at <println macros>:2:11: 2:36
        _39 = promoted[2];               // scope 0 at <println macros>:2:11: 2:36
        _38 = _39;                       // scope 0 at <println macros>:2:11: 2:36
        _37 = _38 as &[std::fmt::ArgumentV1] (Unsize); // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_38);                // scope 0 at <println macros>:2:36: 2:36
        _33 = const std::fmt::Arguments::new_v1(_34, _37) -> bb13; // scope 0 at <print macros>:2:27: 2:58
    }

    bb13: {                             
        StorageDead(_37);                // scope 0 at <print macros>:2:58: 2:58
        StorageDead(_34);                // scope 0 at <print macros>:2:58: 2:58
        _32 = const std::io::_print(_33) -> bb14; // scope 0 at <print macros>:2:1: 2:60
    }

    bb14: {                             
        StorageDead(_33);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_39);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_40);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_36);                // scope 0 at <print macros>:2:60: 2:60
        StorageLive(_42);                // scope 0 at src\cryptonight.rs:10:9: 10:36
        StorageLive(_43);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        StorageLive(_44);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        _44 = const std::io::stdout() -> bb15; // scope 0 at src\cryptonight.rs:10:9: 10:28
    }

    bb15: {                             
        _43 = &mut _44;                  // scope 0 at src\cryptonight.rs:10:9: 10:28
        _42 = const std::io::Write::flush(_43) -> [return: bb16, unwind: bb17]; // scope 0 at src\cryptonight.rs:10:9: 10:36
    }

    bb16: {                             
        StorageDead(_43);                // scope 0 at src\cryptonight.rs:10:36: 10:36
        _41 = const <std::result::Result<T, E>>::unwrap(_42) -> [return: bb18, unwind: bb17]; // scope 0 at src\cryptonight.rs:10:9: 10:45
    }

    bb17: {                              // cleanup
        drop(_44) -> bb5;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb18: {                             
        StorageDead(_42);                // scope 0 at src\cryptonight.rs:10:45: 10:45
        drop(_44) -> bb19;               // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb19: {                             
        StorageDead(_44);                // scope 0 at src\cryptonight.rs:10:46: 10:46
        _31 = ();                        // scope 0 at src\cryptonight.rs:7:21: 11:6
        StorageLive(_46);                // scope 2 at src\cryptonight.rs:186:5: 188:6
        StorageLive(_47);                // scope 2 at src\cryptonight.rs:186:5: 188:6
        StorageLive(_48);                // scope 2 at src\cryptonight.rs:186:14: 186:31
        _48 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])) }; // scope 2 at src\cryptonight.rs:186:14: 186:31
        _47 = const std::iter::IntoIterator::into_iter(_48) -> bb20; // scope 2 at src\cryptonight.rs:186:5: 188:6
    }

    bb20: {                             
        StorageDead(_48);                // scope 2 at src\cryptonight.rs:188:6: 188:6
        StorageLive(_49);                // scope 4 at src\cryptonight.rs:186:5: 188:6
        _49 = _47;                       // scope 4 at src\cryptonight.rs:186:5: 188:6
        goto -> bb21;                    // scope 4 at src\cryptonight.rs:186:5: 188:6
    }

    bb21: {                             
        StorageLive(_51);                // scope 5 at src\cryptonight.rs:186:5: 188:6
        StorageLive(_52);                // scope 5 at src\cryptonight.rs:186:5: 188:6
        StorageLive(_53);                // scope 5 at src\cryptonight.rs:186:5: 188:6
        StorageLive(_54);                // scope 5 at src\cryptonight.rs:186:5: 188:6
        _54 = &mut _49;                  // scope 5 at src\cryptonight.rs:186:5: 188:6
        _53 = _54;                       // scope 5 at src\cryptonight.rs:186:5: 188:6
        _52 = const std::iter::Iterator::next(_53) -> bb22; // scope 5 at src\cryptonight.rs:186:5: 188:6
    }

    bb22: {                             
        StorageDead(_53);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        _56 = discriminant(_52);         // scope 7 at src\cryptonight.rs:186:5: 188:6
        switchInt(_56) -> [0isize: bb23, 1isize: bb25, otherwise: bb24]; // scope 7 at src\cryptonight.rs:186:5: 188:6
    }

    bb23: {                             
        _46 = ();                        // scope 7 at src\cryptonight.rs:186:5: 188:6
        StorageDead(_55);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_52);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_54);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_51);                // scope 4 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_49);                // scope 2 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_47);                // scope 2 at src\cryptonight.rs:188:6: 188:6
        StorageLive(_70);                // scope 2 at src\cryptonight.rs:186:5: 188:6
        _70 = _46;                       // scope 2 at src\cryptonight.rs:186:5: 188:6
        _45 = _70;                       // scope 2 at src\cryptonight.rs:186:5: 188:6
        StorageDead(_70);                // scope 2 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_46);                // scope 0 at src\cryptonight.rs:188:6: 188:6
        StorageLive(_72);                // scope 0 at src\cryptonight.rs:189:5: 189:16
        _72 = &mut ((*_3).6: oaes::AesContext); // scope 0 at src\cryptonight.rs:189:5: 189:16
        StorageLive(_73);                // scope 0 at src\cryptonight.rs:189:33: 189:60
        StorageLive(_74);                // scope 0 at src\cryptonight.rs:189:33: 189:60
        StorageLive(_75);                // scope 0 at src\cryptonight.rs:189:34: 189:60
        StorageLive(_76);                // scope 0 at src\cryptonight.rs:189:34: 189:56
        StorageLive(_77);                // scope 0 at src\cryptonight.rs:189:34: 189:56
        StorageLive(_78);                // scope 0 at src\cryptonight.rs:189:34: 189:56
        StorageLive(_79);                // scope 11 at src\cryptonight.rs:189:41: 189:55
        _79 = ((((*_3).1: cryptonight::SlowHashState).0: cryptonight::HashState).0: [u8; 200]); // scope 11 at src\cryptonight.rs:189:41: 189:55
        _78 = _79;                       // scope 11 at src\cryptonight.rs:189:41: 189:55
        StorageDead(_79);                // scope 11 at src\cryptonight.rs:189:55: 189:55
        _77 = &_78;                      // scope 0 at src\cryptonight.rs:189:34: 189:56
        _76 = _77 as &[u8] (Unsize);     // scope 0 at src\cryptonight.rs:189:34: 189:56
        StorageDead(_77);                // scope 0 at src\cryptonight.rs:189:56: 189:56
        StorageLive(_80);                // scope 0 at src\cryptonight.rs:189:57: 189:59
        _80 = std::ops::RangeFull::{{constructor}}; // scope 0 at src\cryptonight.rs:189:57: 189:59
        _75 = const std::ops::Index::index(_76, _80) -> bb28; // scope 0 at src\cryptonight.rs:189:34: 189:60
    }

    bb24: {                             
        unreachable;                     // scope 0 at src\cryptonight.rs:291:2: 291:2
    }

    bb25: {                             
        StorageLive(_55);                // scope 7 at src\cryptonight.rs:186:5: 188:6
        _55 = ((_52 as Some).0: usize);  // scope 7 at src\cryptonight.rs:186:5: 188:6
        StorageLive(_57);                // scope 7 at src\cryptonight.rs:186:5: 188:6
        _57 = _55;                       // scope 7 at src\cryptonight.rs:186:5: 188:6
        _51 = _57;                       // scope 7 at src\cryptonight.rs:186:5: 188:6
        StorageDead(_57);                // scope 7 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_55);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_52);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_54);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        StorageLive(_58);                // scope 8 at src\cryptonight.rs:186:9: 186:10
        StorageLive(_59);                // scope 8 at src\cryptonight.rs:186:5: 188:6
        _59 = _51;                       // scope 8 at src\cryptonight.rs:186:5: 188:6
        _58 = _59;                       // scope 8 at src\cryptonight.rs:186:5: 188:6
        StorageDead(_59);                // scope 8 at src\cryptonight.rs:188:6: 188:6
        StorageLive(_61);                // scope 8 at src\cryptonight.rs:187:23: 187:54
        StorageLive(_62);                // scope 8 at src\cryptonight.rs:187:23: 187:46
        StorageLive(_63);                // scope 10 at src\cryptonight.rs:187:30: 187:45
        _63 = (((*_3).1: cryptonight::SlowHashState).1: cryptonight::SlowHashStateInner); // scope 10 at src\cryptonight.rs:187:30: 187:45
        _62 = _63;                       // scope 10 at src\cryptonight.rs:187:30: 187:45
        StorageDead(_63);                // scope 10 at src\cryptonight.rs:187:45: 187:45
        StorageLive(_64);                // scope 8 at src\cryptonight.rs:187:52: 187:53
        _64 = _58;                       // scope 8 at src\cryptonight.rs:187:52: 187:53
        _65 = Len((_62.1: [u8; 128]));   // scope 8 at src\cryptonight.rs:187:23: 187:54
        _66 = Lt(_64, _65);              // scope 8 at src\cryptonight.rs:187:23: 187:54
        assert(_66, "index out of bounds: the len is {} but the index is {}", _65, _64) -> bb26; // scope 8 at src\cryptonight.rs:187:23: 187:54
    }

    bb26: {                             
        _61 = (_62.1: [u8; 128])[_64];   // scope 8 at src\cryptonight.rs:187:23: 187:54
        StorageLive(_67);                // scope 8 at src\cryptonight.rs:187:18: 187:19
        _67 = _58;                       // scope 8 at src\cryptonight.rs:187:18: 187:19
        _68 = Len(((*_3).2: [u8; 128])); // scope 8 at src\cryptonight.rs:187:9: 187:20
        _69 = Lt(_67, _68);              // scope 8 at src\cryptonight.rs:187:9: 187:20
        assert(_69, "index out of bounds: the len is {} but the index is {}", _68, _67) -> bb27; // scope 8 at src\cryptonight.rs:187:9: 187:20
    }

    bb27: {                             
        ((*_3).2: [u8; 128])[_67] = _61; // scope 8 at src\cryptonight.rs:187:9: 187:54
        StorageDead(_61);                // scope 8 at src\cryptonight.rs:187:54: 187:54
        StorageDead(_62);                // scope 8 at src\cryptonight.rs:187:55: 187:55
        _60 = ();                        // scope 8 at src\cryptonight.rs:186:32: 188:6
        _50 = ();                        // scope 4 at src\cryptonight.rs:186:5: 188:6
        StorageDead(_58);                // scope 5 at src\cryptonight.rs:188:6: 188:6
        StorageDead(_51);                // scope 4 at src\cryptonight.rs:188:6: 188:6
        goto -> bb21;                    // scope 4 at src\cryptonight.rs:186:5: 188:6
    }

    bb28: {                             
        StorageDead(_80);                // scope 0 at src\cryptonight.rs:189:60: 189:60
        StorageDead(_76);                // scope 0 at src\cryptonight.rs:189:60: 189:60
        _74 = _75;                       // scope 0 at src\cryptonight.rs:189:33: 189:60
        _73 = _74;                       // scope 0 at src\cryptonight.rs:189:33: 189:60
        _71 = const oaes::AesContext::import_key_data(_72, _73, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:43) => cnminer[5424]::cryptonight[0]::AES_KEY_SIZE[0] }, Slice([]))) -> bb29; // scope 0 at src\cryptonight.rs:189:5: 189:75
    }

    bb29: {                             
        StorageDead(_73);                // scope 0 at src\cryptonight.rs:189:75: 189:75
        StorageDead(_72);                // scope 0 at src\cryptonight.rs:189:75: 189:75
        StorageDead(_74);                // scope 0 at src\cryptonight.rs:189:76: 189:76
        StorageDead(_75);                // scope 0 at src\cryptonight.rs:189:76: 189:76
        StorageDead(_78);                // scope 0 at src\cryptonight.rs:189:76: 189:76
        StorageLive(_83);                // scope 0 at <print macros>:2:27: 2:58
        StorageLive(_84);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_85);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_86);                // scope 0 at <println macros>:2:11: 2:36
        _86 = promoted[1];               // scope 0 at <println macros>:2:11: 2:36
        _85 = _86;                       // scope 0 at <println macros>:2:11: 2:36
        _84 = _85 as &[&str] (Unsize);   // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_85);                // scope 0 at <println macros>:2:36: 2:36
        StorageLive(_87);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_88);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_89);                // scope 0 at <println macros>:2:11: 2:36
        StorageLive(_90);                // scope 0 at <println macros>:2:11: 2:36
        _90 = ();                        // scope 0 at <println macros>:2:11: 2:36
        _89 = promoted[0];               // scope 0 at <println macros>:2:11: 2:36
        _88 = _89;                       // scope 0 at <println macros>:2:11: 2:36
        _87 = _88 as &[std::fmt::ArgumentV1] (Unsize); // scope 0 at <println macros>:2:11: 2:36
        StorageDead(_88);                // scope 0 at <println macros>:2:36: 2:36
        _83 = const std::fmt::Arguments::new_v1(_84, _87) -> bb30; // scope 0 at <print macros>:2:27: 2:58
    }

    bb30: {                             
        StorageDead(_87);                // scope 0 at <print macros>:2:58: 2:58
        StorageDead(_84);                // scope 0 at <print macros>:2:58: 2:58
        _82 = const std::io::_print(_83) -> bb31; // scope 0 at <print macros>:2:1: 2:60
    }

    bb31: {                             
        StorageDead(_83);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_89);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_90);                // scope 0 at <print macros>:2:60: 2:60
        StorageDead(_86);                // scope 0 at <print macros>:2:60: 2:60
        StorageLive(_92);                // scope 0 at src\cryptonight.rs:10:9: 10:36
        StorageLive(_93);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        StorageLive(_94);                // scope 0 at src\cryptonight.rs:10:9: 10:28
        _94 = const std::io::stdout() -> bb32; // scope 0 at src\cryptonight.rs:10:9: 10:28
    }

    bb32: {                             
        _93 = &mut _94;                  // scope 0 at src\cryptonight.rs:10:9: 10:28
        _92 = const std::io::Write::flush(_93) -> [return: bb33, unwind: bb34]; // scope 0 at src\cryptonight.rs:10:9: 10:36
    }

    bb33: {                             
        StorageDead(_93);                // scope 0 at src\cryptonight.rs:10:36: 10:36
        _91 = const <std::result::Result<T, E>>::unwrap(_92) -> [return: bb35, unwind: bb34]; // scope 0 at src\cryptonight.rs:10:9: 10:45
    }

    bb34: {                              // cleanup
        drop(_94) -> bb5;                // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb35: {                             
        StorageDead(_92);                // scope 0 at src\cryptonight.rs:10:45: 10:45
        drop(_94) -> bb36;               // scope 0 at src\cryptonight.rs:10:46: 10:46
    }

    bb36: {                             
        StorageDead(_94);                // scope 0 at src\cryptonight.rs:10:46: 10:46
        _81 = ();                        // scope 0 at src\cryptonight.rs:7:21: 11:6
        StorageLive(_96);                // scope 12 at src\cryptonight.rs:192:13: 192:18
        _96 = const 0usize;              // scope 12 at src\cryptonight.rs:192:21: 192:22
        StorageLive(_97);                // scope 14 at src\cryptonight.rs:193:13: 193:21
        StorageLive(_98);                // scope 14 at src\cryptonight.rs:193:24: 193:32
        StorageLive(_99);                // scope 14 at src\cryptonight.rs:193:24: 193:32
        _99 = &mut ((*_3).2: [u8; 128]); // scope 14 at src\cryptonight.rs:193:24: 193:32
        _98 = _99 as &mut [u8] (Unsize); // scope 14 at src\cryptonight.rs:193:24: 193:32
        StorageDead(_99);                // scope 14 at src\cryptonight.rs:193:32: 193:32
        _97 = const std::slice::<impl [T]>::as_mut_ptr(_98) -> bb37; // scope 14 at src\cryptonight.rs:193:24: 193:45
    }

    bb37: {                             
        StorageDead(_98);                // scope 14 at src\cryptonight.rs:193:45: 193:45
        StorageLive(_100);               // scope 16 at src\cryptonight.rs:194:13: 194:20
        StorageLive(_101);               // scope 16 at src\cryptonight.rs:194:23: 194:47
        StorageLive(_102);               // scope 16 at src\cryptonight.rs:194:23: 194:47
        StorageLive(_103);               // scope 16 at src\cryptonight.rs:194:23: 194:47
        _103 = &((((*_3).6: oaes::AesContext).0: oaes::AesKey).2: std::vec::Vec<u8>); // scope 16 at src\cryptonight.rs:194:23: 194:47
        _102 = const std::ops::Deref::deref(_103) -> bb38; // scope 16 at src\cryptonight.rs:194:23: 194:47
    }

    bb38: {                             
        _101 = _102;                     // scope 16 at src\cryptonight.rs:194:23: 194:47
        StorageDead(_103);               // scope 16 at src\cryptonight.rs:194:47: 194:47
        _100 = const std::slice::<impl [T]>::as_ptr(_101) -> bb39; // scope 16 at src\cryptonight.rs:194:23: 194:56
    }

    bb39: {                             
        StorageDead(_101);               // scope 16 at src\cryptonight.rs:194:56: 194:56
        StorageDead(_102);               // scope 16 at src\cryptonight.rs:194:57: 194:57
        goto -> bb40;                    // scope 16 at src\cryptonight.rs:195:9: 213:10
    }

    bb40: {                             
        StorageLive(_104);               // scope 16 at src\cryptonight.rs:195:15: 195:25
        StorageLive(_105);               // scope 16 at src\cryptonight.rs:195:15: 195:16
        _105 = _96;                      // scope 16 at src\cryptonight.rs:195:15: 195:16
        _104 = Lt(_105, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:40) => cnminer[5424]::cryptonight[0]::MEMORY[0] }, Slice([]))); // scope 16 at src\cryptonight.rs:195:15: 195:25
        StorageDead(_105);               // scope 16 at src\cryptonight.rs:195:25: 195:25
        switchInt(_104) -> [0u8: bb41, otherwise: bb42]; // scope 16 at src\cryptonight.rs:195:9: 213:10
    }

    bb41: {                             
        _95 = ();                        // scope 16 at src\cryptonight.rs:195:9: 213:10
        StorageDead(_104);               // scope 16 at src\cryptonight.rs:213:10: 213:10
        StorageDead(_100);               // scope 14 at src\cryptonight.rs:214:6: 214:6
        StorageDead(_97);                // scope 12 at src\cryptonight.rs:214:6: 214:6
        StorageDead(_96);                // scope 0 at src\cryptonight.rs:214:6: 214:6
        StorageLive(_196);               // scope 37 at src\cryptonight.rs:216:13: 216:18
        StorageLive(_197);               // scope 37 at src\cryptonight.rs:216:21: 216:39
        StorageLive(_198);               // scope 37 at src\cryptonight.rs:216:21: 216:26
        StorageLive(_199);               // scope 37 at src\cryptonight.rs:216:21: 216:26
        _199 = &mut ((*_3).3: [u8; 16]); // scope 37 at src\cryptonight.rs:216:21: 216:26
        _198 = _199 as &mut [u8] (Unsize); // scope 37 at src\cryptonight.rs:216:21: 216:26
        StorageDead(_199);               // scope 37 at src\cryptonight.rs:216:26: 216:26
        _197 = const std::slice::<impl [T]>::as_mut_ptr(_198) -> bb74; // scope 37 at src\cryptonight.rs:216:21: 216:39
    }

    bb42: {                             
        StorageLive(_107);               // scope 18 at src\cryptonight.rs:196:13: 208:14
        StorageLive(_108);               // scope 18 at src\cryptonight.rs:196:13: 208:14
        StorageLive(_109);               // scope 18 at src\cryptonight.rs:196:22: 196:27
        _109 = std::ops::Range<isize> { start: const 0isize, end: const 10isize }; // scope 18 at src\cryptonight.rs:196:22: 196:27
        _108 = const std::iter::IntoIterator::into_iter(_109) -> bb43; // scope 18 at src\cryptonight.rs:196:13: 208:14
    }

    bb43: {                             
        StorageDead(_109);               // scope 18 at src\cryptonight.rs:208:14: 208:14
        StorageLive(_110);               // scope 20 at src\cryptonight.rs:196:13: 208:14
        _110 = _108;                     // scope 20 at src\cryptonight.rs:196:13: 208:14
        goto -> bb44;                    // scope 20 at src\cryptonight.rs:196:13: 208:14
    }

    bb44: {                             
        StorageLive(_111);               // scope 21 at src\cryptonight.rs:196:13: 208:14
        StorageLive(_112);               // scope 21 at src\cryptonight.rs:196:13: 208:14
        StorageLive(_113);               // scope 21 at src\cryptonight.rs:196:13: 208:14
        StorageLive(_114);               // scope 21 at src\cryptonight.rs:196:13: 208:14
        _114 = &mut _110;                // scope 21 at src\cryptonight.rs:196:13: 208:14
        _113 = _114;                     // scope 21 at src\cryptonight.rs:196:13: 208:14
        _112 = const std::iter::Iterator::next(_113) -> bb45; // scope 21 at src\cryptonight.rs:196:13: 208:14
    }

    bb45: {                             
        StorageDead(_113);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        _116 = discriminant(_112);       // scope 23 at src\cryptonight.rs:196:13: 208:14
        switchInt(_116) -> [0isize: bb46, 1isize: bb47, otherwise: bb24]; // scope 23 at src\cryptonight.rs:196:13: 208:14
    }

    bb46: {                             
        _107 = ();                       // scope 23 at src\cryptonight.rs:196:13: 208:14
        StorageDead(_115);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_112);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_114);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_111);               // scope 20 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_110);               // scope 18 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_108);               // scope 18 at src\cryptonight.rs:208:14: 208:14
        StorageLive(_166);               // scope 18 at src\cryptonight.rs:196:13: 208:14
        _166 = _107;                     // scope 18 at src\cryptonight.rs:196:13: 208:14
        _106 = _166;                     // scope 18 at src\cryptonight.rs:196:13: 208:14
        StorageDead(_166);               // scope 18 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_107);               // scope 16 at src\cryptonight.rs:208:14: 208:14
        StorageLive(_168);               // scope 29 at src\cryptonight.rs:209:13: 211:14
        StorageLive(_169);               // scope 29 at src\cryptonight.rs:209:13: 211:14
        StorageLive(_170);               // scope 29 at src\cryptonight.rs:209:22: 209:39
        _170 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])) }; // scope 29 at src\cryptonight.rs:209:22: 209:39
        _169 = const std::iter::IntoIterator::into_iter(_170) -> bb65; // scope 29 at src\cryptonight.rs:209:13: 211:14
    }

    bb47: {                             
        StorageLive(_115);               // scope 23 at src\cryptonight.rs:196:13: 208:14
        _115 = ((_112 as Some).0: isize); // scope 23 at src\cryptonight.rs:196:13: 208:14
        StorageLive(_117);               // scope 23 at src\cryptonight.rs:196:13: 208:14
        _117 = _115;                     // scope 23 at src\cryptonight.rs:196:13: 208:14
        _111 = _117;                     // scope 23 at src\cryptonight.rs:196:13: 208:14
        StorageDead(_117);               // scope 23 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_115);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_112);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_114);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        StorageLive(_118);               // scope 24 at src\cryptonight.rs:196:17: 196:18
        StorageLive(_119);               // scope 24 at src\cryptonight.rs:196:13: 208:14
        _119 = _111;                     // scope 24 at src\cryptonight.rs:196:13: 208:14
        _118 = _119;                     // scope 24 at src\cryptonight.rs:196:13: 208:14
        StorageDead(_119);               // scope 24 at src\cryptonight.rs:208:14: 208:14
        StorageLive(_121);               // scope 27 at src\cryptonight.rs:198:25: 198:32
        StorageLive(_122);               // scope 27 at src\cryptonight.rs:198:35: 198:57
        StorageLive(_123);               // scope 27 at src\cryptonight.rs:198:35: 198:42
        _123 = _100;                     // scope 27 at src\cryptonight.rs:198:35: 198:42
        StorageLive(_124);               // scope 27 at src\cryptonight.rs:198:50: 198:56
        StorageLive(_125);               // scope 27 at src\cryptonight.rs:198:50: 198:51
        _125 = _118;                     // scope 27 at src\cryptonight.rs:198:50: 198:51
        _126 = CheckedShl(_125, const 4i32); // scope 27 at src\cryptonight.rs:198:50: 198:56
        assert(!(_126.1: bool), "attempt to shift left with overflow") -> bb48; // scope 27 at src\cryptonight.rs:198:50: 198:56
    }

    bb48: {                             
        _124 = (_126.0: isize);          // scope 27 at src\cryptonight.rs:198:50: 198:56
        StorageDead(_125);               // scope 27 at src\cryptonight.rs:198:56: 198:56
        _122 = const std::ptr::<impl *const T>::offset(_123, _124) -> bb49; // scope 27 at src\cryptonight.rs:198:35: 198:57
    }

    bb49: {                             
        StorageDead(_124);               // scope 27 at src\cryptonight.rs:198:57: 198:57
        StorageDead(_123);               // scope 27 at src\cryptonight.rs:198:57: 198:57
        _121 = _122 as *const u32 (Misc); // scope 27 at src\cryptonight.rs:198:35: 198:71
        StorageDead(_122);               // scope 27 at src\cryptonight.rs:198:71: 198:71
        StorageLive(_128);               // scope 27 at src\cryptonight.rs:199:62: 199:82
        StorageLive(_129);               // scope 27 at src\cryptonight.rs:199:62: 199:70
        _129 = _97;                      // scope 27 at src\cryptonight.rs:199:62: 199:70
        _128 = _129 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:199:62: 199:82
        StorageDead(_129);               // scope 27 at src\cryptonight.rs:199:82: 199:82
        StorageLive(_130);               // scope 27 at src\cryptonight.rs:199:84: 199:91
        _130 = _121;                     // scope 27 at src\cryptonight.rs:199:84: 199:91
        _127 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_128, _130) -> bb50; // scope 27 at src\cryptonight.rs:199:21: 199:92
    }

    bb50: {                             
        StorageDead(_130);               // scope 27 at src\cryptonight.rs:199:92: 199:92
        StorageDead(_128);               // scope 27 at src\cryptonight.rs:199:92: 199:92
        StorageLive(_132);               // scope 27 at src\cryptonight.rs:200:62: 200:95
        StorageLive(_133);               // scope 27 at src\cryptonight.rs:200:62: 200:83
        StorageLive(_134);               // scope 27 at src\cryptonight.rs:200:62: 200:70
        _134 = _97;                      // scope 27 at src\cryptonight.rs:200:62: 200:70
        _133 = const std::ptr::<impl *mut T>::offset(_134, const 16isize) -> bb51; // scope 27 at src\cryptonight.rs:200:62: 200:83
    }

    bb51: {                             
        StorageDead(_134);               // scope 27 at src\cryptonight.rs:200:83: 200:83
        _132 = _133 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:200:62: 200:95
        StorageDead(_133);               // scope 27 at src\cryptonight.rs:200:95: 200:95
        StorageLive(_135);               // scope 27 at src\cryptonight.rs:200:97: 200:104
        _135 = _121;                     // scope 27 at src\cryptonight.rs:200:97: 200:104
        _131 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_132, _135) -> bb52; // scope 27 at src\cryptonight.rs:200:21: 200:105
    }

    bb52: {                             
        StorageDead(_135);               // scope 27 at src\cryptonight.rs:200:105: 200:105
        StorageDead(_132);               // scope 27 at src\cryptonight.rs:200:105: 200:105
        StorageLive(_137);               // scope 27 at src\cryptonight.rs:201:62: 201:95
        StorageLive(_138);               // scope 27 at src\cryptonight.rs:201:62: 201:83
        StorageLive(_139);               // scope 27 at src\cryptonight.rs:201:62: 201:70
        _139 = _97;                      // scope 27 at src\cryptonight.rs:201:62: 201:70
        _138 = const std::ptr::<impl *mut T>::offset(_139, const 32isize) -> bb53; // scope 27 at src\cryptonight.rs:201:62: 201:83
    }

    bb53: {                             
        StorageDead(_139);               // scope 27 at src\cryptonight.rs:201:83: 201:83
        _137 = _138 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:201:62: 201:95
        StorageDead(_138);               // scope 27 at src\cryptonight.rs:201:95: 201:95
        StorageLive(_140);               // scope 27 at src\cryptonight.rs:201:97: 201:104
        _140 = _121;                     // scope 27 at src\cryptonight.rs:201:97: 201:104
        _136 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_137, _140) -> bb54; // scope 27 at src\cryptonight.rs:201:21: 201:105
    }

    bb54: {                             
        StorageDead(_140);               // scope 27 at src\cryptonight.rs:201:105: 201:105
        StorageDead(_137);               // scope 27 at src\cryptonight.rs:201:105: 201:105
        StorageLive(_142);               // scope 27 at src\cryptonight.rs:202:62: 202:95
        StorageLive(_143);               // scope 27 at src\cryptonight.rs:202:62: 202:83
        StorageLive(_144);               // scope 27 at src\cryptonight.rs:202:62: 202:70
        _144 = _97;                      // scope 27 at src\cryptonight.rs:202:62: 202:70
        _143 = const std::ptr::<impl *mut T>::offset(_144, const 48isize) -> bb55; // scope 27 at src\cryptonight.rs:202:62: 202:83
    }

    bb55: {                             
        StorageDead(_144);               // scope 27 at src\cryptonight.rs:202:83: 202:83
        _142 = _143 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:202:62: 202:95
        StorageDead(_143);               // scope 27 at src\cryptonight.rs:202:95: 202:95
        StorageLive(_145);               // scope 27 at src\cryptonight.rs:202:97: 202:104
        _145 = _121;                     // scope 27 at src\cryptonight.rs:202:97: 202:104
        _141 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_142, _145) -> bb56; // scope 27 at src\cryptonight.rs:202:21: 202:105
    }

    bb56: {                             
        StorageDead(_145);               // scope 27 at src\cryptonight.rs:202:105: 202:105
        StorageDead(_142);               // scope 27 at src\cryptonight.rs:202:105: 202:105
        StorageLive(_147);               // scope 27 at src\cryptonight.rs:203:62: 203:95
        StorageLive(_148);               // scope 27 at src\cryptonight.rs:203:62: 203:83
        StorageLive(_149);               // scope 27 at src\cryptonight.rs:203:62: 203:70
        _149 = _97;                      // scope 27 at src\cryptonight.rs:203:62: 203:70
        _148 = const std::ptr::<impl *mut T>::offset(_149, const 64isize) -> bb57; // scope 27 at src\cryptonight.rs:203:62: 203:83
    }

    bb57: {                             
        StorageDead(_149);               // scope 27 at src\cryptonight.rs:203:83: 203:83
        _147 = _148 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:203:62: 203:95
        StorageDead(_148);               // scope 27 at src\cryptonight.rs:203:95: 203:95
        StorageLive(_150);               // scope 27 at src\cryptonight.rs:203:97: 203:104
        _150 = _121;                     // scope 27 at src\cryptonight.rs:203:97: 203:104
        _146 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_147, _150) -> bb58; // scope 27 at src\cryptonight.rs:203:21: 203:105
    }

    bb58: {                             
        StorageDead(_150);               // scope 27 at src\cryptonight.rs:203:105: 203:105
        StorageDead(_147);               // scope 27 at src\cryptonight.rs:203:105: 203:105
        StorageLive(_152);               // scope 27 at src\cryptonight.rs:204:62: 204:95
        StorageLive(_153);               // scope 27 at src\cryptonight.rs:204:62: 204:83
        StorageLive(_154);               // scope 27 at src\cryptonight.rs:204:62: 204:70
        _154 = _97;                      // scope 27 at src\cryptonight.rs:204:62: 204:70
        _153 = const std::ptr::<impl *mut T>::offset(_154, const 80isize) -> bb59; // scope 27 at src\cryptonight.rs:204:62: 204:83
    }

    bb59: {                             
        StorageDead(_154);               // scope 27 at src\cryptonight.rs:204:83: 204:83
        _152 = _153 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:204:62: 204:95
        StorageDead(_153);               // scope 27 at src\cryptonight.rs:204:95: 204:95
        StorageLive(_155);               // scope 27 at src\cryptonight.rs:204:97: 204:104
        _155 = _121;                     // scope 27 at src\cryptonight.rs:204:97: 204:104
        _151 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_152, _155) -> bb60; // scope 27 at src\cryptonight.rs:204:21: 204:105
    }

    bb60: {                             
        StorageDead(_155);               // scope 27 at src\cryptonight.rs:204:105: 204:105
        StorageDead(_152);               // scope 27 at src\cryptonight.rs:204:105: 204:105
        StorageLive(_157);               // scope 27 at src\cryptonight.rs:205:62: 205:95
        StorageLive(_158);               // scope 27 at src\cryptonight.rs:205:62: 205:83
        StorageLive(_159);               // scope 27 at src\cryptonight.rs:205:62: 205:70
        _159 = _97;                      // scope 27 at src\cryptonight.rs:205:62: 205:70
        _158 = const std::ptr::<impl *mut T>::offset(_159, const 96isize) -> bb61; // scope 27 at src\cryptonight.rs:205:62: 205:83
    }

    bb61: {                             
        StorageDead(_159);               // scope 27 at src\cryptonight.rs:205:83: 205:83
        _157 = _158 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:205:62: 205:95
        StorageDead(_158);               // scope 27 at src\cryptonight.rs:205:95: 205:95
        StorageLive(_160);               // scope 27 at src\cryptonight.rs:205:97: 205:104
        _160 = _121;                     // scope 27 at src\cryptonight.rs:205:97: 205:104
        _156 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_157, _160) -> bb62; // scope 27 at src\cryptonight.rs:205:21: 205:105
    }

    bb62: {                             
        StorageDead(_160);               // scope 27 at src\cryptonight.rs:205:105: 205:105
        StorageDead(_157);               // scope 27 at src\cryptonight.rs:205:105: 205:105
        StorageLive(_162);               // scope 27 at src\cryptonight.rs:206:62: 206:95
        StorageLive(_163);               // scope 27 at src\cryptonight.rs:206:62: 206:83
        StorageLive(_164);               // scope 27 at src\cryptonight.rs:206:62: 206:70
        _164 = _97;                      // scope 27 at src\cryptonight.rs:206:62: 206:70
        _163 = const std::ptr::<impl *mut T>::offset(_164, const 112isize) -> bb63; // scope 27 at src\cryptonight.rs:206:62: 206:83
    }

    bb63: {                             
        StorageDead(_164);               // scope 27 at src\cryptonight.rs:206:83: 206:83
        _162 = _163 as *mut u32 (Misc);  // scope 27 at src\cryptonight.rs:206:62: 206:95
        StorageDead(_163);               // scope 27 at src\cryptonight.rs:206:95: 206:95
        StorageLive(_165);               // scope 27 at src\cryptonight.rs:206:97: 206:104
        _165 = _121;                     // scope 27 at src\cryptonight.rs:206:97: 206:104
        _161 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_162, _165) -> bb64; // scope 27 at src\cryptonight.rs:206:21: 206:105
    }

    bb64: {                             
        StorageDead(_165);               // scope 27 at src\cryptonight.rs:206:105: 206:105
        StorageDead(_162);               // scope 27 at src\cryptonight.rs:206:105: 206:105
        _120 = ();                       // scope 26 at src\cryptonight.rs:197:17: 207:18
        StorageDead(_121);               // scope 26 at src\cryptonight.rs:207:18: 207:18
        _50 = ();                        // scope 20 at src\cryptonight.rs:196:13: 208:14
        StorageDead(_118);               // scope 21 at src\cryptonight.rs:208:14: 208:14
        StorageDead(_111);               // scope 20 at src\cryptonight.rs:208:14: 208:14
        goto -> bb44;                    // scope 20 at src\cryptonight.rs:196:13: 208:14
    }

    bb65: {                             
        StorageDead(_170);               // scope 29 at src\cryptonight.rs:211:14: 211:14
        StorageLive(_171);               // scope 31 at src\cryptonight.rs:209:13: 211:14
        _171 = _169;                     // scope 31 at src\cryptonight.rs:209:13: 211:14
        goto -> bb66;                    // scope 31 at src\cryptonight.rs:209:13: 211:14
    }

    bb66: {                             
        StorageLive(_172);               // scope 32 at src\cryptonight.rs:209:13: 211:14
        StorageLive(_173);               // scope 32 at src\cryptonight.rs:209:13: 211:14
        StorageLive(_174);               // scope 32 at src\cryptonight.rs:209:13: 211:14
        StorageLive(_175);               // scope 32 at src\cryptonight.rs:209:13: 211:14
        _175 = &mut _171;                // scope 32 at src\cryptonight.rs:209:13: 211:14
        _174 = _175;                     // scope 32 at src\cryptonight.rs:209:13: 211:14
        _173 = const std::iter::Iterator::next(_174) -> bb67; // scope 32 at src\cryptonight.rs:209:13: 211:14
    }

    bb67: {                             
        StorageDead(_174);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        _177 = discriminant(_173);       // scope 34 at src\cryptonight.rs:209:13: 211:14
        switchInt(_177) -> [0isize: bb68, 1isize: bb69, otherwise: bb24]; // scope 34 at src\cryptonight.rs:209:13: 211:14
    }

    bb68: {                             
        _168 = ();                       // scope 34 at src\cryptonight.rs:209:13: 211:14
        StorageDead(_176);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_173);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_175);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_172);               // scope 31 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_171);               // scope 29 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_169);               // scope 29 at src\cryptonight.rs:211:14: 211:14
        StorageLive(_193);               // scope 29 at src\cryptonight.rs:209:13: 211:14
        _193 = _168;                     // scope 29 at src\cryptonight.rs:209:13: 211:14
        _167 = _193;                     // scope 29 at src\cryptonight.rs:209:13: 211:14
        StorageDead(_193);               // scope 29 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_168);               // scope 16 at src\cryptonight.rs:211:14: 211:14
        _194 = CheckedAdd(_96, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([]))); // scope 16 at src\cryptonight.rs:212:13: 212:32
        assert(!(_194.1: bool), "attempt to add with overflow") -> bb73; // scope 16 at src\cryptonight.rs:212:13: 212:32
    }

    bb69: {                             
        StorageLive(_176);               // scope 34 at src\cryptonight.rs:209:13: 211:14
        _176 = ((_173 as Some).0: usize); // scope 34 at src\cryptonight.rs:209:13: 211:14
        StorageLive(_178);               // scope 34 at src\cryptonight.rs:209:13: 211:14
        _178 = _176;                     // scope 34 at src\cryptonight.rs:209:13: 211:14
        _172 = _178;                     // scope 34 at src\cryptonight.rs:209:13: 211:14
        StorageDead(_178);               // scope 34 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_176);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_173);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_175);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        StorageLive(_179);               // scope 35 at src\cryptonight.rs:209:17: 209:18
        StorageLive(_180);               // scope 35 at src\cryptonight.rs:209:13: 211:14
        _180 = _172;                     // scope 35 at src\cryptonight.rs:209:13: 211:14
        _179 = _180;                     // scope 35 at src\cryptonight.rs:209:13: 211:14
        StorageDead(_180);               // scope 35 at src\cryptonight.rs:211:14: 211:14
        StorageLive(_182);               // scope 35 at src\cryptonight.rs:210:41: 210:52
        StorageLive(_183);               // scope 35 at src\cryptonight.rs:210:50: 210:51
        _183 = _179;                     // scope 35 at src\cryptonight.rs:210:50: 210:51
        _184 = Len(((*_3).2: [u8; 128])); // scope 35 at src\cryptonight.rs:210:41: 210:52
        _185 = Lt(_183, _184);           // scope 35 at src\cryptonight.rs:210:41: 210:52
        assert(_185, "index out of bounds: the len is {} but the index is {}", _184, _183) -> bb70; // scope 35 at src\cryptonight.rs:210:41: 210:52
    }

    bb70: {                             
        _182 = ((*_3).2: [u8; 128])[_183]; // scope 35 at src\cryptonight.rs:210:41: 210:52
        StorageLive(_186);               // scope 35 at src\cryptonight.rs:210:17: 210:38
        StorageLive(_187);               // scope 35 at src\cryptonight.rs:210:17: 210:31
        StorageLive(_188);               // scope 35 at src\cryptonight.rs:210:17: 210:31
        _188 = &mut ((*_3).0: [u8; 2097152]); // scope 35 at src\cryptonight.rs:210:17: 210:31
        _187 = _188 as &mut [u8] (Unsize); // scope 35 at src\cryptonight.rs:210:17: 210:31
        StorageDead(_188);               // scope 35 at src\cryptonight.rs:210:31: 210:31
        StorageLive(_189);               // scope 35 at src\cryptonight.rs:210:32: 210:37
        StorageLive(_190);               // scope 35 at src\cryptonight.rs:210:32: 210:33
        _190 = _96;                      // scope 35 at src\cryptonight.rs:210:32: 210:33
        StorageLive(_191);               // scope 35 at src\cryptonight.rs:210:36: 210:37
        _191 = _179;                     // scope 35 at src\cryptonight.rs:210:36: 210:37
        _192 = CheckedAdd(_190, _191);   // scope 35 at src\cryptonight.rs:210:32: 210:37
        assert(!(_192.1: bool), "attempt to add with overflow") -> bb71; // scope 35 at src\cryptonight.rs:210:32: 210:37
    }

    bb71: {                             
        _189 = (_192.0: usize);          // scope 35 at src\cryptonight.rs:210:32: 210:37
        StorageDead(_191);               // scope 35 at src\cryptonight.rs:210:37: 210:37
        StorageDead(_190);               // scope 35 at src\cryptonight.rs:210:37: 210:37
        _186 = const std::ops::IndexMut::index_mut(_187, _189) -> bb72; // scope 35 at src\cryptonight.rs:210:17: 210:38
    }

    bb72: {                             
        StorageDead(_189);               // scope 35 at src\cryptonight.rs:210:38: 210:38
        StorageDead(_187);               // scope 35 at src\cryptonight.rs:210:38: 210:38
        (*_186) = _182;                  // scope 35 at src\cryptonight.rs:210:17: 210:52
        StorageDead(_182);               // scope 35 at src\cryptonight.rs:210:52: 210:52
        StorageDead(_186);               // scope 35 at src\cryptonight.rs:210:53: 210:53
        _181 = ();                       // scope 35 at src\cryptonight.rs:209:40: 211:14
        _50 = ();                        // scope 31 at src\cryptonight.rs:209:13: 211:14
        StorageDead(_179);               // scope 32 at src\cryptonight.rs:211:14: 211:14
        StorageDead(_172);               // scope 31 at src\cryptonight.rs:211:14: 211:14
        goto -> bb66;                    // scope 31 at src\cryptonight.rs:209:13: 211:14
    }

    bb73: {                             
        _96 = (_194.0: usize);           // scope 16 at src\cryptonight.rs:212:13: 212:32
        _50 = ();                        // scope 16 at src\cryptonight.rs:195:26: 213:10
        goto -> bb40;                    // scope 16 at src\cryptonight.rs:195:9: 213:10
    }

    bb74: {                             
        StorageDead(_198);               // scope 37 at src\cryptonight.rs:216:39: 216:39
        _196 = _197 as *mut u64 (Misc);  // scope 37 at src\cryptonight.rs:216:21: 216:51
        StorageDead(_197);               // scope 37 at src\cryptonight.rs:216:51: 216:51
        StorageLive(_200);               // scope 39 at src\cryptonight.rs:217:13: 217:18
        StorageLive(_201);               // scope 39 at src\cryptonight.rs:217:21: 217:39
        StorageLive(_202);               // scope 39 at src\cryptonight.rs:217:21: 217:26
        StorageLive(_203);               // scope 39 at src\cryptonight.rs:217:21: 217:26
        _203 = &mut ((*_3).4: [u8; 16]); // scope 39 at src\cryptonight.rs:217:21: 217:26
        _202 = _203 as &mut [u8] (Unsize); // scope 39 at src\cryptonight.rs:217:21: 217:26
        StorageDead(_203);               // scope 39 at src\cryptonight.rs:217:26: 217:26
        _201 = const std::slice::<impl [T]>::as_mut_ptr(_202) -> bb75; // scope 39 at src\cryptonight.rs:217:21: 217:39
    }

    bb75: {                             
        StorageDead(_202);               // scope 39 at src\cryptonight.rs:217:39: 217:39
        _200 = _201 as *mut u64 (Misc);  // scope 39 at src\cryptonight.rs:217:21: 217:51
        StorageDead(_201);               // scope 39 at src\cryptonight.rs:217:51: 217:51
        StorageLive(_204);               // scope 41 at src\cryptonight.rs:218:13: 218:18
        StorageLive(_205);               // scope 41 at src\cryptonight.rs:218:21: 218:55
        StorageLive(_206);               // scope 41 at src\cryptonight.rs:218:21: 218:46
        StorageLive(_207);               // scope 41 at src\cryptonight.rs:218:21: 218:46
        StorageLive(_208);               // scope 41 at src\cryptonight.rs:218:21: 218:46
        StorageLive(_209);               // scope 43 at src\cryptonight.rs:218:28: 218:45
        _209 = ((((*_3).1: cryptonight::SlowHashState).1: cryptonight::SlowHashStateInner).0: [u8; 64]); // scope 43 at src\cryptonight.rs:218:28: 218:45
        _208 = _209;                     // scope 43 at src\cryptonight.rs:218:28: 218:45
        StorageDead(_209);               // scope 43 at src\cryptonight.rs:218:45: 218:45
        _207 = &_208;                    // scope 41 at src\cryptonight.rs:218:21: 218:46
        _206 = _207 as &[u8] (Unsize);   // scope 41 at src\cryptonight.rs:218:21: 218:46
        StorageDead(_207);               // scope 41 at src\cryptonight.rs:218:46: 218:46
        _205 = const std::slice::<impl [T]>::as_ptr(_206) -> bb76; // scope 41 at src\cryptonight.rs:218:21: 218:55
    }

    bb76: {                             
        StorageDead(_206);               // scope 41 at src\cryptonight.rs:218:55: 218:55
        _204 = _205 as *const u64 (Misc); // scope 41 at src\cryptonight.rs:218:21: 218:69
        StorageDead(_205);               // scope 41 at src\cryptonight.rs:218:69: 218:69
        StorageDead(_208);               // scope 41 at src\cryptonight.rs:218:70: 218:70
        StorageLive(_210);               // scope 44 at src\cryptonight.rs:219:9: 224:10
        StorageLive(_211);               // scope 44 at src\cryptonight.rs:219:9: 224:10
        StorageLive(_212);               // scope 44 at src\cryptonight.rs:219:18: 219:22
        _212 = std::ops::Range<isize> { start: const 0isize, end: const 2isize }; // scope 44 at src\cryptonight.rs:219:18: 219:22
        _211 = const std::iter::IntoIterator::into_iter(_212) -> bb77; // scope 44 at src\cryptonight.rs:219:9: 224:10
    }

    bb77: {                             
        StorageDead(_212);               // scope 44 at src\cryptonight.rs:224:10: 224:10
        StorageLive(_213);               // scope 46 at src\cryptonight.rs:219:9: 224:10
        _213 = _211;                     // scope 46 at src\cryptonight.rs:219:9: 224:10
        goto -> bb78;                    // scope 46 at src\cryptonight.rs:219:9: 224:10
    }

    bb78: {                             
        StorageLive(_214);               // scope 47 at src\cryptonight.rs:219:9: 224:10
        StorageLive(_215);               // scope 47 at src\cryptonight.rs:219:9: 224:10
        StorageLive(_216);               // scope 47 at src\cryptonight.rs:219:9: 224:10
        StorageLive(_217);               // scope 47 at src\cryptonight.rs:219:9: 224:10
        _217 = &mut _213;                // scope 47 at src\cryptonight.rs:219:9: 224:10
        _216 = _217;                     // scope 47 at src\cryptonight.rs:219:9: 224:10
        _215 = const std::iter::Iterator::next(_216) -> bb79; // scope 47 at src\cryptonight.rs:219:9: 224:10
    }

    bb79: {                             
        StorageDead(_216);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        _219 = discriminant(_215);       // scope 49 at src\cryptonight.rs:219:9: 224:10
        switchInt(_219) -> [0isize: bb80, 1isize: bb81, otherwise: bb24]; // scope 49 at src\cryptonight.rs:219:9: 224:10
    }

    bb80: {                             
        _210 = ();                       // scope 49 at src\cryptonight.rs:219:9: 224:10
        StorageDead(_218);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_215);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_217);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_214);               // scope 46 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_213);               // scope 44 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_211);               // scope 44 at src\cryptonight.rs:224:10: 224:10
        StorageLive(_252);               // scope 44 at src\cryptonight.rs:219:9: 224:10
        _252 = _210;                     // scope 44 at src\cryptonight.rs:219:9: 224:10
        _195 = _252;                     // scope 44 at src\cryptonight.rs:219:9: 224:10
        StorageDead(_252);               // scope 44 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_210);               // scope 41 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_204);               // scope 39 at src\cryptonight.rs:225:6: 225:6
        StorageDead(_200);               // scope 37 at src\cryptonight.rs:225:6: 225:6
        StorageDead(_196);               // scope 0 at src\cryptonight.rs:225:6: 225:6
        StorageLive(_254);               // scope 53 at src\cryptonight.rs:227:13: 227:18
        _254 = const 0usize;             // scope 53 at src\cryptonight.rs:227:21: 227:22
        StorageLive(_255);               // scope 55 at src\cryptonight.rs:228:13: 228:18
        StorageLive(_256);               // scope 55 at src\cryptonight.rs:228:21: 228:26
        StorageLive(_257);               // scope 55 at src\cryptonight.rs:228:21: 228:26
        _257 = &mut ((*_3).3: [u8; 16]); // scope 55 at src\cryptonight.rs:228:21: 228:26
        _256 = _257 as &mut [u8] (Unsize); // scope 55 at src\cryptonight.rs:228:21: 228:26
        StorageDead(_257);               // scope 55 at src\cryptonight.rs:228:26: 228:26
        _255 = const std::slice::<impl [T]>::as_mut_ptr(_256) -> bb91; // scope 55 at src\cryptonight.rs:228:21: 228:39
    }

    bb81: {                             
        StorageLive(_218);               // scope 49 at src\cryptonight.rs:219:9: 224:10
        _218 = ((_215 as Some).0: isize); // scope 49 at src\cryptonight.rs:219:9: 224:10
        StorageLive(_220);               // scope 49 at src\cryptonight.rs:219:9: 224:10
        _220 = _218;                     // scope 49 at src\cryptonight.rs:219:9: 224:10
        _214 = _220;                     // scope 49 at src\cryptonight.rs:219:9: 224:10
        StorageDead(_220);               // scope 49 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_218);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_215);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_217);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        StorageLive(_221);               // scope 50 at src\cryptonight.rs:219:13: 219:14
        StorageLive(_222);               // scope 50 at src\cryptonight.rs:219:9: 224:10
        _222 = _214;                     // scope 50 at src\cryptonight.rs:219:9: 224:10
        _221 = _222;                     // scope 50 at src\cryptonight.rs:219:9: 224:10
        StorageDead(_222);               // scope 50 at src\cryptonight.rs:224:10: 224:10
        StorageLive(_224);               // scope 52 at src\cryptonight.rs:221:36: 221:52
        StorageLive(_225);               // scope 52 at src\cryptonight.rs:221:37: 221:52
        StorageLive(_226);               // scope 52 at src\cryptonight.rs:221:37: 221:42
        _226 = _204;                     // scope 52 at src\cryptonight.rs:221:37: 221:42
        StorageLive(_227);               // scope 52 at src\cryptonight.rs:221:50: 221:51
        _227 = _221;                     // scope 52 at src\cryptonight.rs:221:50: 221:51
        _225 = const std::ptr::<impl *const T>::offset(_226, _227) -> bb82; // scope 52 at src\cryptonight.rs:221:37: 221:52
    }

    bb82: {                             
        StorageDead(_227);               // scope 52 at src\cryptonight.rs:221:52: 221:52
        StorageDead(_226);               // scope 52 at src\cryptonight.rs:221:52: 221:52
        _224 = (*_225);                  // scope 52 at src\cryptonight.rs:221:36: 221:52
        StorageLive(_228);               // scope 52 at src\cryptonight.rs:221:59: 221:79
        StorageLive(_229);               // scope 52 at src\cryptonight.rs:221:60: 221:79
        StorageLive(_230);               // scope 52 at src\cryptonight.rs:221:60: 221:65
        _230 = _204;                     // scope 52 at src\cryptonight.rs:221:60: 221:65
        StorageLive(_231);               // scope 52 at src\cryptonight.rs:221:73: 221:78
        StorageLive(_232);               // scope 52 at src\cryptonight.rs:221:73: 221:74
        _232 = _221;                     // scope 52 at src\cryptonight.rs:221:73: 221:74
        _233 = CheckedAdd(_232, const 4isize); // scope 52 at src\cryptonight.rs:221:73: 221:78
        assert(!(_233.1: bool), "attempt to add with overflow") -> bb83; // scope 52 at src\cryptonight.rs:221:73: 221:78
    }

    bb83: {                             
        _231 = (_233.0: isize);          // scope 52 at src\cryptonight.rs:221:73: 221:78
        StorageDead(_232);               // scope 52 at src\cryptonight.rs:221:78: 221:78
        _229 = const std::ptr::<impl *const T>::offset(_230, _231) -> bb84; // scope 52 at src\cryptonight.rs:221:60: 221:79
    }

    bb84: {                             
        StorageDead(_231);               // scope 52 at src\cryptonight.rs:221:79: 221:79
        StorageDead(_230);               // scope 52 at src\cryptonight.rs:221:79: 221:79
        _228 = (*_229);                  // scope 52 at src\cryptonight.rs:221:59: 221:79
        StorageLive(_234);               // scope 52 at src\cryptonight.rs:221:18: 221:33
        StorageLive(_235);               // scope 52 at src\cryptonight.rs:221:18: 221:23
        _235 = _196;                     // scope 52 at src\cryptonight.rs:221:18: 221:23
        StorageLive(_236);               // scope 52 at src\cryptonight.rs:221:31: 221:32
        _236 = _221;                     // scope 52 at src\cryptonight.rs:221:31: 221:32
        _234 = const std::ptr::<impl *mut T>::offset(_235, _236) -> bb85; // scope 52 at src\cryptonight.rs:221:18: 221:33
    }

    bb85: {                             
        StorageDead(_236);               // scope 52 at src\cryptonight.rs:221:33: 221:33
        StorageDead(_235);               // scope 52 at src\cryptonight.rs:221:33: 221:33
        (*_234) = BitXor(_224, _228);    // scope 52 at src\cryptonight.rs:221:17: 221:79
        StorageDead(_228);               // scope 52 at src\cryptonight.rs:221:79: 221:79
        StorageDead(_224);               // scope 52 at src\cryptonight.rs:221:79: 221:79
        StorageDead(_234);               // scope 52 at src\cryptonight.rs:221:80: 221:80
        StorageDead(_229);               // scope 52 at src\cryptonight.rs:221:80: 221:80
        StorageDead(_225);               // scope 52 at src\cryptonight.rs:221:80: 221:80
        StorageLive(_237);               // scope 52 at src\cryptonight.rs:222:36: 222:56
        StorageLive(_238);               // scope 52 at src\cryptonight.rs:222:37: 222:56
        StorageLive(_239);               // scope 52 at src\cryptonight.rs:222:37: 222:42
        _239 = _204;                     // scope 52 at src\cryptonight.rs:222:37: 222:42
        StorageLive(_240);               // scope 52 at src\cryptonight.rs:222:50: 222:55
        StorageLive(_241);               // scope 52 at src\cryptonight.rs:222:50: 222:51
        _241 = _221;                     // scope 52 at src\cryptonight.rs:222:50: 222:51
        _242 = CheckedAdd(_241, const 2isize); // scope 52 at src\cryptonight.rs:222:50: 222:55
        assert(!(_242.1: bool), "attempt to add with overflow") -> bb86; // scope 52 at src\cryptonight.rs:222:50: 222:55
    }

    bb86: {                             
        _240 = (_242.0: isize);          // scope 52 at src\cryptonight.rs:222:50: 222:55
        StorageDead(_241);               // scope 52 at src\cryptonight.rs:222:55: 222:55
        _238 = const std::ptr::<impl *const T>::offset(_239, _240) -> bb87; // scope 52 at src\cryptonight.rs:222:37: 222:56
    }

    bb87: {                             
        StorageDead(_240);               // scope 52 at src\cryptonight.rs:222:56: 222:56
        StorageDead(_239);               // scope 52 at src\cryptonight.rs:222:56: 222:56
        _237 = (*_238);                  // scope 52 at src\cryptonight.rs:222:36: 222:56
        StorageLive(_243);               // scope 52 at src\cryptonight.rs:222:59: 222:79
        StorageLive(_244);               // scope 52 at src\cryptonight.rs:222:60: 222:79
        StorageLive(_245);               // scope 52 at src\cryptonight.rs:222:60: 222:65
        _245 = _204;                     // scope 52 at src\cryptonight.rs:222:60: 222:65
        StorageLive(_246);               // scope 52 at src\cryptonight.rs:222:73: 222:78
        StorageLive(_247);               // scope 52 at src\cryptonight.rs:222:73: 222:74
        _247 = _221;                     // scope 52 at src\cryptonight.rs:222:73: 222:74
        _248 = CheckedAdd(_247, const 6isize); // scope 52 at src\cryptonight.rs:222:73: 222:78
        assert(!(_248.1: bool), "attempt to add with overflow") -> bb88; // scope 52 at src\cryptonight.rs:222:73: 222:78
    }

    bb88: {                             
        _246 = (_248.0: isize);          // scope 52 at src\cryptonight.rs:222:73: 222:78
        StorageDead(_247);               // scope 52 at src\cryptonight.rs:222:78: 222:78
        _244 = const std::ptr::<impl *const T>::offset(_245, _246) -> bb89; // scope 52 at src\cryptonight.rs:222:60: 222:79
    }

    bb89: {                             
        StorageDead(_246);               // scope 52 at src\cryptonight.rs:222:79: 222:79
        StorageDead(_245);               // scope 52 at src\cryptonight.rs:222:79: 222:79
        _243 = (*_244);                  // scope 52 at src\cryptonight.rs:222:59: 222:79
        StorageLive(_249);               // scope 52 at src\cryptonight.rs:222:18: 222:33
        StorageLive(_250);               // scope 52 at src\cryptonight.rs:222:18: 222:23
        _250 = _200;                     // scope 52 at src\cryptonight.rs:222:18: 222:23
        StorageLive(_251);               // scope 52 at src\cryptonight.rs:222:31: 222:32
        _251 = _221;                     // scope 52 at src\cryptonight.rs:222:31: 222:32
        _249 = const std::ptr::<impl *mut T>::offset(_250, _251) -> bb90; // scope 52 at src\cryptonight.rs:222:18: 222:33
    }

    bb90: {                             
        StorageDead(_251);               // scope 52 at src\cryptonight.rs:222:33: 222:33
        StorageDead(_250);               // scope 52 at src\cryptonight.rs:222:33: 222:33
        (*_249) = BitXor(_237, _243);    // scope 52 at src\cryptonight.rs:222:17: 222:79
        StorageDead(_243);               // scope 52 at src\cryptonight.rs:222:79: 222:79
        StorageDead(_237);               // scope 52 at src\cryptonight.rs:222:79: 222:79
        StorageDead(_249);               // scope 52 at src\cryptonight.rs:222:80: 222:80
        StorageDead(_244);               // scope 52 at src\cryptonight.rs:222:80: 222:80
        StorageDead(_238);               // scope 52 at src\cryptonight.rs:222:80: 222:80
        _223 = ();                       // scope 52 at src\cryptonight.rs:220:13: 223:14
        _50 = ();                        // scope 46 at src\cryptonight.rs:219:9: 224:10
        StorageDead(_221);               // scope 47 at src\cryptonight.rs:224:10: 224:10
        StorageDead(_214);               // scope 46 at src\cryptonight.rs:224:10: 224:10
        goto -> bb78;                    // scope 46 at src\cryptonight.rs:219:9: 224:10
    }

    bb91: {                             
        StorageDead(_256);               // scope 55 at src\cryptonight.rs:228:39: 228:39
        StorageLive(_258);               // scope 57 at src\cryptonight.rs:229:13: 229:18
        StorageLive(_259);               // scope 57 at src\cryptonight.rs:229:21: 229:26
        StorageLive(_260);               // scope 57 at src\cryptonight.rs:229:21: 229:26
        _260 = &mut ((*_3).4: [u8; 16]); // scope 57 at src\cryptonight.rs:229:21: 229:26
        _259 = _260 as &mut [u8] (Unsize); // scope 57 at src\cryptonight.rs:229:21: 229:26
        StorageDead(_260);               // scope 57 at src\cryptonight.rs:229:26: 229:26
        _258 = const std::slice::<impl [T]>::as_mut_ptr(_259) -> bb92; // scope 57 at src\cryptonight.rs:229:21: 229:39
    }

    bb92: {                             
        StorageDead(_259);               // scope 57 at src\cryptonight.rs:229:39: 229:39
        StorageLive(_261);               // scope 59 at src\cryptonight.rs:230:13: 230:18
        StorageLive(_262);               // scope 59 at src\cryptonight.rs:230:21: 230:26
        StorageLive(_263);               // scope 59 at src\cryptonight.rs:230:21: 230:26
        _263 = &mut ((*_3).5: [u8; 16]); // scope 59 at src\cryptonight.rs:230:21: 230:26
        _262 = _263 as &mut [u8] (Unsize); // scope 59 at src\cryptonight.rs:230:21: 230:26
        StorageDead(_263);               // scope 59 at src\cryptonight.rs:230:26: 230:26
        _261 = const std::slice::<impl [T]>::as_mut_ptr(_262) -> bb93; // scope 59 at src\cryptonight.rs:230:21: 230:39
    }

    bb93: {                             
        StorageDead(_262);               // scope 59 at src\cryptonight.rs:230:39: 230:39
        StorageLive(_264);               // scope 61 at src\cryptonight.rs:231:13: 231:19
        StorageLive(_265);               // scope 61 at src\cryptonight.rs:231:22: 231:36
        StorageLive(_266);               // scope 61 at src\cryptonight.rs:231:22: 231:36
        _266 = &mut ((*_3).0: [u8; 2097152]); // scope 61 at src\cryptonight.rs:231:22: 231:36
        _265 = _266 as &mut [u8] (Unsize); // scope 61 at src\cryptonight.rs:231:22: 231:36
        StorageDead(_266);               // scope 61 at src\cryptonight.rs:231:36: 231:36
        _264 = const std::slice::<impl [T]>::as_mut_ptr(_265) -> bb94; // scope 61 at src\cryptonight.rs:231:22: 231:49
    }

    bb94: {                             
        StorageDead(_265);               // scope 61 at src\cryptonight.rs:231:49: 231:49
        goto -> bb95;                    // scope 61 at src\cryptonight.rs:232:9: 248:10
    }

    bb95: {                             
        StorageLive(_267);               // scope 61 at src\cryptonight.rs:232:15: 232:27
        StorageLive(_268);               // scope 61 at src\cryptonight.rs:232:15: 232:16
        _268 = _254;                     // scope 61 at src\cryptonight.rs:232:15: 232:16
        StorageLive(_269);               // scope 61 at src\cryptonight.rs:232:19: 232:27
        _270 = Eq(const 4usize, const 0usize); // scope 61 at src\cryptonight.rs:232:19: 232:27
        assert(!_270, "attempt to divide by zero") -> bb97; // scope 61 at src\cryptonight.rs:232:19: 232:27
    }

    bb96: {                             
        _253 = ();                       // scope 61 at src\cryptonight.rs:232:9: 248:10
        StorageDead(_267);               // scope 61 at src\cryptonight.rs:248:10: 248:10
        StorageDead(_264);               // scope 59 at src\cryptonight.rs:249:6: 249:6
        StorageDead(_261);               // scope 57 at src\cryptonight.rs:249:6: 249:6
        StorageDead(_258);               // scope 55 at src\cryptonight.rs:249:6: 249:6
        StorageDead(_255);               // scope 53 at src\cryptonight.rs:249:6: 249:6
        StorageDead(_254);               // scope 0 at src\cryptonight.rs:249:6: 249:6
        StorageLive(_346);               // scope 64 at src\cryptonight.rs:250:5: 252:6
        StorageLive(_347);               // scope 64 at src\cryptonight.rs:250:5: 252:6
        StorageLive(_348);               // scope 64 at src\cryptonight.rs:250:14: 250:31
        _348 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])) }; // scope 64 at src\cryptonight.rs:250:14: 250:31
        _347 = const std::iter::IntoIterator::into_iter(_348) -> bb112; // scope 64 at src\cryptonight.rs:250:5: 252:6
    }

    bb97: {                             
        _269 = Div(const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:41) => cnminer[5424]::cryptonight[0]::ITER[0] }, Slice([])), const 4usize); // scope 61 at src\cryptonight.rs:232:19: 232:27
        _267 = Lt(_268, _269);           // scope 61 at src\cryptonight.rs:232:15: 232:27
        StorageDead(_269);               // scope 61 at src\cryptonight.rs:232:27: 232:27
        StorageDead(_268);               // scope 61 at src\cryptonight.rs:232:27: 232:27
        switchInt(_267) -> [0u8: bb96, otherwise: bb98]; // scope 61 at src\cryptonight.rs:232:9: 248:10
    }

    bb98: {                             
        StorageLive(_273);               // scope 63 at src\cryptonight.rs:235:49: 235:66
        StorageLive(_274);               // scope 63 at src\cryptonight.rs:235:49: 235:54
        _274 = _261;                     // scope 63 at src\cryptonight.rs:235:49: 235:54
        _273 = _274 as *mut u32 (Misc);  // scope 63 at src\cryptonight.rs:235:49: 235:66
        StorageDead(_274);               // scope 63 at src\cryptonight.rs:235:66: 235:66
        StorageLive(_275);               // scope 63 at src\cryptonight.rs:235:68: 236:79
        StorageLive(_276);               // scope 63 at src\cryptonight.rs:235:68: 236:65
        StorageLive(_277);               // scope 63 at src\cryptonight.rs:235:68: 235:74
        _277 = _264;                     // scope 63 at src\cryptonight.rs:235:68: 235:74
        StorageLive(_278);               // scope 63 at src\cryptonight.rs:236:21: 236:64
        StorageLive(_279);               // scope 63 at src\cryptonight.rs:236:21: 236:55
        StorageLive(_280);               // scope 63 at src\cryptonight.rs:236:22: 236:44
        StorageLive(_281);               // scope 63 at src\cryptonight.rs:236:23: 236:44
        StorageLive(_282);               // scope 63 at src\cryptonight.rs:236:24: 236:29
        _282 = _255;                     // scope 63 at src\cryptonight.rs:236:24: 236:29
        _281 = _282 as *const u64 (Misc); // scope 63 at src\cryptonight.rs:236:23: 236:44
        StorageDead(_282);               // scope 63 at src\cryptonight.rs:236:44: 236:44
        _280 = (*_281);                  // scope 63 at src\cryptonight.rs:236:22: 236:44
        _279 = BitAnd(_280, const 2097136u64); // scope 63 at src\cryptonight.rs:236:21: 236:55
        StorageDead(_280);               // scope 63 at src\cryptonight.rs:236:55: 236:55
        _278 = _279 as isize (Misc);     // scope 63 at src\cryptonight.rs:236:21: 236:64
        StorageDead(_279);               // scope 63 at src\cryptonight.rs:236:64: 236:64
        _276 = const std::ptr::<impl *mut T>::offset(_277, _278) -> bb99; // scope 63 at src\cryptonight.rs:235:68: 236:65
    }

    bb99: {                             
        StorageDead(_278);               // scope 63 at src\cryptonight.rs:236:65: 236:65
        StorageDead(_277);               // scope 63 at src\cryptonight.rs:236:65: 236:65
        _275 = _276 as *const u32 (Misc); // scope 63 at src\cryptonight.rs:235:68: 236:79
        StorageDead(_276);               // scope 63 at src\cryptonight.rs:236:79: 236:79
        StorageLive(_283);               // scope 63 at src\cryptonight.rs:236:81: 236:100
        StorageLive(_284);               // scope 63 at src\cryptonight.rs:236:81: 236:86
        _284 = _255;                     // scope 63 at src\cryptonight.rs:236:81: 236:86
        _283 = _284 as *const u32 (Misc); // scope 63 at src\cryptonight.rs:236:81: 236:100
        StorageDead(_284);               // scope 63 at src\cryptonight.rs:236:100: 236:100
        _272 = const cryptonight::sub_and_shift_and_mix_add_round(_273, _275, _283) -> bb100; // scope 63 at src\cryptonight.rs:235:17: 236:101
    }

    bb100: {                            
        StorageDead(_283);               // scope 63 at src\cryptonight.rs:236:101: 236:101
        StorageDead(_275);               // scope 63 at src\cryptonight.rs:236:101: 236:101
        StorageDead(_273);               // scope 63 at src\cryptonight.rs:236:101: 236:101
        StorageDead(_281);               // scope 63 at src\cryptonight.rs:236:102: 236:102
        StorageLive(_286);               // scope 63 at src\cryptonight.rs:237:32: 237:37
        StorageLive(_287);               // scope 63 at src\cryptonight.rs:237:32: 237:37
        _287 = _261;                     // scope 63 at src\cryptonight.rs:237:32: 237:37
        _286 = _287 as *const u8 (Misc); // scope 63 at src\cryptonight.rs:237:32: 237:37
        StorageDead(_287);               // scope 63 at src\cryptonight.rs:237:37: 237:37
        StorageLive(_288);               // scope 63 at src\cryptonight.rs:237:39: 237:44
        StorageLive(_289);               // scope 63 at src\cryptonight.rs:237:39: 237:44
        _289 = _258;                     // scope 63 at src\cryptonight.rs:237:39: 237:44
        _288 = _289 as *const u8 (Misc); // scope 63 at src\cryptonight.rs:237:39: 237:44
        StorageDead(_289);               // scope 63 at src\cryptonight.rs:237:44: 237:44
        StorageLive(_290);               // scope 63 at src\cryptonight.rs:237:46: 237:105
        StorageLive(_291);               // scope 63 at src\cryptonight.rs:237:46: 237:52
        _291 = _264;                     // scope 63 at src\cryptonight.rs:237:46: 237:52
        StorageLive(_292);               // scope 63 at src\cryptonight.rs:237:60: 237:104
        StorageLive(_293);               // scope 63 at src\cryptonight.rs:237:60: 237:95
        StorageLive(_294);               // scope 63 at src\cryptonight.rs:237:61: 237:83
        StorageLive(_295);               // scope 63 at src\cryptonight.rs:237:62: 237:83
        StorageLive(_296);               // scope 63 at src\cryptonight.rs:237:63: 237:68
        _296 = _255;                     // scope 63 at src\cryptonight.rs:237:63: 237:68
        _295 = _296 as *const u64 (Misc); // scope 63 at src\cryptonight.rs:237:62: 237:83
        StorageDead(_296);               // scope 63 at src\cryptonight.rs:237:83: 237:83
        _294 = (*_295);                  // scope 63 at src\cryptonight.rs:237:61: 237:83
        _293 = BitAnd(_294, const 2097136u64); // scope 63 at src\cryptonight.rs:237:60: 237:95
        StorageDead(_294);               // scope 63 at src\cryptonight.rs:237:95: 237:95
        _292 = _293 as isize (Misc);     // scope 63 at src\cryptonight.rs:237:60: 237:104
        StorageDead(_293);               // scope 63 at src\cryptonight.rs:237:104: 237:104
        _290 = const std::ptr::<impl *mut T>::offset(_291, _292) -> bb101; // scope 63 at src\cryptonight.rs:237:46: 237:105
    }

    bb101: {                            
        StorageDead(_292);               // scope 63 at src\cryptonight.rs:237:105: 237:105
        StorageDead(_291);               // scope 63 at src\cryptonight.rs:237:105: 237:105
        _285 = const cryptonight::xor_blocks_dst(_286, _288, _290) -> bb102; // scope 63 at src\cryptonight.rs:237:17: 237:106
    }

    bb102: {                            
        StorageDead(_290);               // scope 63 at src\cryptonight.rs:237:106: 237:106
        StorageDead(_288);               // scope 63 at src\cryptonight.rs:237:106: 237:106
        StorageDead(_286);               // scope 63 at src\cryptonight.rs:237:106: 237:106
        StorageDead(_295);               // scope 63 at src\cryptonight.rs:237:107: 237:107
        StorageLive(_298);               // scope 63 at src\cryptonight.rs:239:33: 239:38
        StorageLive(_299);               // scope 63 at src\cryptonight.rs:239:33: 239:38
        _299 = _261;                     // scope 63 at src\cryptonight.rs:239:33: 239:38
        _298 = _299 as *const u8 (Misc); // scope 63 at src\cryptonight.rs:239:33: 239:38
        StorageDead(_299);               // scope 63 at src\cryptonight.rs:239:38: 239:38
        StorageLive(_300);               // scope 63 at src\cryptonight.rs:239:40: 239:45
        _300 = _255;                     // scope 63 at src\cryptonight.rs:239:40: 239:45
        StorageLive(_301);               // scope 63 at src\cryptonight.rs:239:47: 239:106
        StorageLive(_302);               // scope 63 at src\cryptonight.rs:239:47: 239:53
        _302 = _264;                     // scope 63 at src\cryptonight.rs:239:47: 239:53
        StorageLive(_303);               // scope 63 at src\cryptonight.rs:239:61: 239:105
        StorageLive(_304);               // scope 63 at src\cryptonight.rs:239:61: 239:96
        StorageLive(_305);               // scope 63 at src\cryptonight.rs:239:62: 239:84
        StorageLive(_306);               // scope 63 at src\cryptonight.rs:239:63: 239:84
        StorageLive(_307);               // scope 63 at src\cryptonight.rs:239:64: 239:69
        _307 = _261;                     // scope 63 at src\cryptonight.rs:239:64: 239:69
        _306 = _307 as *const u64 (Misc); // scope 63 at src\cryptonight.rs:239:63: 239:84
        StorageDead(_307);               // scope 63 at src\cryptonight.rs:239:84: 239:84
        _305 = (*_306);                  // scope 63 at src\cryptonight.rs:239:62: 239:84
        _304 = BitAnd(_305, const 2097136u64); // scope 63 at src\cryptonight.rs:239:61: 239:96
        StorageDead(_305);               // scope 63 at src\cryptonight.rs:239:96: 239:96
        _303 = _304 as isize (Misc);     // scope 63 at src\cryptonight.rs:239:61: 239:105
        StorageDead(_304);               // scope 63 at src\cryptonight.rs:239:105: 239:105
        _301 = const std::ptr::<impl *mut T>::offset(_302, _303) -> bb103; // scope 63 at src\cryptonight.rs:239:47: 239:106
    }

    bb103: {                            
        StorageDead(_303);               // scope 63 at src\cryptonight.rs:239:106: 239:106
        StorageDead(_302);               // scope 63 at src\cryptonight.rs:239:106: 239:106
        _297 = const cryptonight::mul_sum_xor_dst(_298, _300, _301) -> bb104; // scope 63 at src\cryptonight.rs:239:17: 239:107
    }

    bb104: {                            
        StorageDead(_301);               // scope 63 at src\cryptonight.rs:239:107: 239:107
        StorageDead(_300);               // scope 63 at src\cryptonight.rs:239:107: 239:107
        StorageDead(_298);               // scope 63 at src\cryptonight.rs:239:107: 239:107
        StorageDead(_306);               // scope 63 at src\cryptonight.rs:239:108: 239:108
        StorageLive(_309);               // scope 63 at src\cryptonight.rs:241:49: 241:66
        StorageLive(_310);               // scope 63 at src\cryptonight.rs:241:49: 241:54
        _310 = _258;                     // scope 63 at src\cryptonight.rs:241:49: 241:54
        _309 = _310 as *mut u32 (Misc);  // scope 63 at src\cryptonight.rs:241:49: 241:66
        StorageDead(_310);               // scope 63 at src\cryptonight.rs:241:66: 241:66
        StorageLive(_311);               // scope 63 at src\cryptonight.rs:241:68: 242:80
        StorageLive(_312);               // scope 63 at src\cryptonight.rs:241:68: 242:66
        StorageLive(_313);               // scope 63 at src\cryptonight.rs:241:68: 241:74
        _313 = _264;                     // scope 63 at src\cryptonight.rs:241:68: 241:74
        StorageLive(_314);               // scope 63 at src\cryptonight.rs:242:21: 242:65
        StorageLive(_315);               // scope 63 at src\cryptonight.rs:242:21: 242:56
        StorageLive(_316);               // scope 63 at src\cryptonight.rs:242:22: 242:44
        StorageLive(_317);               // scope 63 at src\cryptonight.rs:242:23: 242:44
        StorageLive(_318);               // scope 63 at src\cryptonight.rs:242:24: 242:29
        _318 = _255;                     // scope 63 at src\cryptonight.rs:242:24: 242:29
        _317 = _318 as *const u64 (Misc); // scope 63 at src\cryptonight.rs:242:23: 242:44
        StorageDead(_318);               // scope 63 at src\cryptonight.rs:242:44: 242:44
        _316 = (*_317);                  // scope 63 at src\cryptonight.rs:242:22: 242:44
        _315 = BitAnd(_316, const 2097136u64); // scope 63 at src\cryptonight.rs:242:21: 242:56
        StorageDead(_316);               // scope 63 at src\cryptonight.rs:242:56: 242:56
        _314 = _315 as isize (Misc);     // scope 63 at src\cryptonight.rs:242:21: 242:65
        StorageDead(_315);               // scope 63 at src\cryptonight.rs:242:65: 242:65
        _312 = const std::ptr::<impl *mut T>::offset(_313, _314) -> bb105; // scope 63 at src\cryptonight.rs:241:68: 242:66
    }

    bb105: {                            
        StorageDead(_314);               // scope 63 at src\cryptonight.rs:242:66: 242:66
        StorageDead(_313);               // scope 63 at src\cryptonight.rs:242:66: 242:66
        _311 = _312 as *const u32 (Misc); // scope 63 at src\cryptonight.rs:241:68: 242:80
        StorageDead(_312);               // scope 63 at src\cryptonight.rs:242:80: 242:80
        StorageLive(_319);               // scope 63 at src\cryptonight.rs:242:82: 242:101
        StorageLive(_320);               // scope 63 at src\cryptonight.rs:242:82: 242:87
        _320 = _255;                     // scope 63 at src\cryptonight.rs:242:82: 242:87
        _319 = _320 as *const u32 (Misc); // scope 63 at src\cryptonight.rs:242:82: 242:101
        StorageDead(_320);               // scope 63 at src\cryptonight.rs:242:101: 242:101
        _308 = const cryptonight::sub_and_shift_and_mix_add_round(_309, _311, _319) -> bb106; // scope 63 at src\cryptonight.rs:241:17: 242:102
    }

    bb106: {                            
        StorageDead(_319);               // scope 63 at src\cryptonight.rs:242:102: 242:102
        StorageDead(_311);               // scope 63 at src\cryptonight.rs:242:102: 242:102
        StorageDead(_309);               // scope 63 at src\cryptonight.rs:242:102: 242:102
        StorageDead(_317);               // scope 63 at src\cryptonight.rs:242:103: 242:103
        StorageLive(_322);               // scope 63 at src\cryptonight.rs:243:32: 243:37
        StorageLive(_323);               // scope 63 at src\cryptonight.rs:243:32: 243:37
        _323 = _258;                     // scope 63 at src\cryptonight.rs:243:32: 243:37
        _322 = _323 as *const u8 (Misc); // scope 63 at src\cryptonight.rs:243:32: 243:37
        StorageDead(_323);               // scope 63 at src\cryptonight.rs:243:37: 243:37
        StorageLive(_324);               // scope 63 at src\cryptonight.rs:243:39: 243:44
        StorageLive(_325);               // scope 63 at src\cryptonight.rs:243:39: 243:44
        _325 = _261;                     // scope 63 at src\cryptonight.rs:243:39: 243:44
        _324 = _325 as *const u8 (Misc); // scope 63 at src\cryptonight.rs:243:39: 243:44
        StorageDead(_325);               // scope 63 at src\cryptonight.rs:243:44: 243:44
        StorageLive(_326);               // scope 63 at src\cryptonight.rs:243:46: 243:105
        StorageLive(_327);               // scope 63 at src\cryptonight.rs:243:46: 243:52
        _327 = _264;                     // scope 63 at src\cryptonight.rs:243:46: 243:52
        StorageLive(_328);               // scope 63 at src\cryptonight.rs:243:60: 243:104
        StorageLive(_329);               // scope 63 at src\cryptonight.rs:243:60: 243:95
        StorageLive(_330);               // scope 63 at src\cryptonight.rs:243:61: 243:83
        StorageLive(_331);               // scope 63 at src\cryptonight.rs:243:62: 243:83
        StorageLive(_332);               // scope 63 at src\cryptonight.rs:243:63: 243:68
        _332 = _255;                     // scope 63 at src\cryptonight.rs:243:63: 243:68
        _331 = _332 as *const u64 (Misc); // scope 63 at src\cryptonight.rs:243:62: 243:83
        StorageDead(_332);               // scope 63 at src\cryptonight.rs:243:83: 243:83
        _330 = (*_331);                  // scope 63 at src\cryptonight.rs:243:61: 243:83
        _329 = BitAnd(_330, const 2097136u64); // scope 63 at src\cryptonight.rs:243:60: 243:95
        StorageDead(_330);               // scope 63 at src\cryptonight.rs:243:95: 243:95
        _328 = _329 as isize (Misc);     // scope 63 at src\cryptonight.rs:243:60: 243:104
        StorageDead(_329);               // scope 63 at src\cryptonight.rs:243:104: 243:104
        _326 = const std::ptr::<impl *mut T>::offset(_327, _328) -> bb107; // scope 63 at src\cryptonight.rs:243:46: 243:105
    }

    bb107: {                            
        StorageDead(_328);               // scope 63 at src\cryptonight.rs:243:105: 243:105
        StorageDead(_327);               // scope 63 at src\cryptonight.rs:243:105: 243:105
        _321 = const cryptonight::xor_blocks_dst(_322, _324, _326) -> bb108; // scope 63 at src\cryptonight.rs:243:17: 243:106
    }

    bb108: {                            
        StorageDead(_326);               // scope 63 at src\cryptonight.rs:243:106: 243:106
        StorageDead(_324);               // scope 63 at src\cryptonight.rs:243:106: 243:106
        StorageDead(_322);               // scope 63 at src\cryptonight.rs:243:106: 243:106
        StorageDead(_331);               // scope 63 at src\cryptonight.rs:243:107: 243:107
        StorageLive(_334);               // scope 63 at src\cryptonight.rs:245:33: 245:38
        StorageLive(_335);               // scope 63 at src\cryptonight.rs:245:33: 245:38
        _335 = _258;                     // scope 63 at src\cryptonight.rs:245:33: 245:38
        _334 = _335 as *const u8 (Misc); // scope 63 at src\cryptonight.rs:245:33: 245:38
        StorageDead(_335);               // scope 63 at src\cryptonight.rs:245:38: 245:38
        StorageLive(_336);               // scope 63 at src\cryptonight.rs:245:40: 245:45
        _336 = _255;                     // scope 63 at src\cryptonight.rs:245:40: 245:45
        StorageLive(_337);               // scope 63 at src\cryptonight.rs:245:47: 245:106
        StorageLive(_338);               // scope 63 at src\cryptonight.rs:245:47: 245:53
        _338 = _264;                     // scope 63 at src\cryptonight.rs:245:47: 245:53
        StorageLive(_339);               // scope 63 at src\cryptonight.rs:245:61: 245:105
        StorageLive(_340);               // scope 63 at src\cryptonight.rs:245:61: 245:96
        StorageLive(_341);               // scope 63 at src\cryptonight.rs:245:62: 245:84
        StorageLive(_342);               // scope 63 at src\cryptonight.rs:245:63: 245:84
        StorageLive(_343);               // scope 63 at src\cryptonight.rs:245:64: 245:69
        _343 = _258;                     // scope 63 at src\cryptonight.rs:245:64: 245:69
        _342 = _343 as *const u64 (Misc); // scope 63 at src\cryptonight.rs:245:63: 245:84
        StorageDead(_343);               // scope 63 at src\cryptonight.rs:245:84: 245:84
        _341 = (*_342);                  // scope 63 at src\cryptonight.rs:245:62: 245:84
        _340 = BitAnd(_341, const 2097136u64); // scope 63 at src\cryptonight.rs:245:61: 245:96
        StorageDead(_341);               // scope 63 at src\cryptonight.rs:245:96: 245:96
        _339 = _340 as isize (Misc);     // scope 63 at src\cryptonight.rs:245:61: 245:105
        StorageDead(_340);               // scope 63 at src\cryptonight.rs:245:105: 245:105
        _337 = const std::ptr::<impl *mut T>::offset(_338, _339) -> bb109; // scope 63 at src\cryptonight.rs:245:47: 245:106
    }

    bb109: {                            
        StorageDead(_339);               // scope 63 at src\cryptonight.rs:245:106: 245:106
        StorageDead(_338);               // scope 63 at src\cryptonight.rs:245:106: 245:106
        _333 = const cryptonight::mul_sum_xor_dst(_334, _336, _337) -> bb110; // scope 63 at src\cryptonight.rs:245:17: 245:107
    }

    bb110: {                            
        StorageDead(_337);               // scope 63 at src\cryptonight.rs:245:107: 245:107
        StorageDead(_336);               // scope 63 at src\cryptonight.rs:245:107: 245:107
        StorageDead(_334);               // scope 63 at src\cryptonight.rs:245:107: 245:107
        StorageDead(_342);               // scope 63 at src\cryptonight.rs:245:108: 245:108
        _271 = ();                       // scope 63 at src\cryptonight.rs:233:13: 246:14
        _344 = CheckedAdd(_254, const 1usize); // scope 61 at src\cryptonight.rs:247:13: 247:19
        assert(!(_344.1: bool), "attempt to add with overflow") -> bb111; // scope 61 at src\cryptonight.rs:247:13: 247:19
    }

    bb111: {                            
        _254 = (_344.0: usize);          // scope 61 at src\cryptonight.rs:247:13: 247:19
        _50 = ();                        // scope 61 at src\cryptonight.rs:232:28: 248:10
        goto -> bb95;                    // scope 61 at src\cryptonight.rs:232:9: 248:10
    }

    bb112: {                            
        StorageDead(_348);               // scope 64 at src\cryptonight.rs:252:6: 252:6
        StorageLive(_349);               // scope 66 at src\cryptonight.rs:250:5: 252:6
        _349 = _347;                     // scope 66 at src\cryptonight.rs:250:5: 252:6
        goto -> bb113;                   // scope 66 at src\cryptonight.rs:250:5: 252:6
    }

    bb113: {                            
        StorageLive(_350);               // scope 67 at src\cryptonight.rs:250:5: 252:6
        StorageLive(_351);               // scope 67 at src\cryptonight.rs:250:5: 252:6
        StorageLive(_352);               // scope 67 at src\cryptonight.rs:250:5: 252:6
        StorageLive(_353);               // scope 67 at src\cryptonight.rs:250:5: 252:6
        _353 = &mut _349;                // scope 67 at src\cryptonight.rs:250:5: 252:6
        _352 = _353;                     // scope 67 at src\cryptonight.rs:250:5: 252:6
        _351 = const std::iter::Iterator::next(_352) -> bb114; // scope 67 at src\cryptonight.rs:250:5: 252:6
    }

    bb114: {                            
        StorageDead(_352);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        _355 = discriminant(_351);       // scope 69 at src\cryptonight.rs:250:5: 252:6
        switchInt(_355) -> [0isize: bb115, 1isize: bb116, otherwise: bb24]; // scope 69 at src\cryptonight.rs:250:5: 252:6
    }

    bb115: {                            
        _346 = ();                       // scope 69 at src\cryptonight.rs:250:5: 252:6
        StorageDead(_354);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_351);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_353);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_350);               // scope 66 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_349);               // scope 64 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_347);               // scope 64 at src\cryptonight.rs:252:6: 252:6
        StorageLive(_369);               // scope 64 at src\cryptonight.rs:250:5: 252:6
        _369 = _346;                     // scope 64 at src\cryptonight.rs:250:5: 252:6
        _345 = _369;                     // scope 64 at src\cryptonight.rs:250:5: 252:6
        StorageDead(_369);               // scope 64 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_346);               // scope 0 at src\cryptonight.rs:252:6: 252:6
        StorageLive(_370);               // scope 0 at src\cryptonight.rs:253:19: 253:40
        _370 = const std::default::Default::default() -> bb119; // scope 0 at src\cryptonight.rs:253:19: 253:40
    }

    bb116: {                            
        StorageLive(_354);               // scope 69 at src\cryptonight.rs:250:5: 252:6
        _354 = ((_351 as Some).0: usize); // scope 69 at src\cryptonight.rs:250:5: 252:6
        StorageLive(_356);               // scope 69 at src\cryptonight.rs:250:5: 252:6
        _356 = _354;                     // scope 69 at src\cryptonight.rs:250:5: 252:6
        _350 = _356;                     // scope 69 at src\cryptonight.rs:250:5: 252:6
        StorageDead(_356);               // scope 69 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_354);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_351);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_353);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        StorageLive(_357);               // scope 70 at src\cryptonight.rs:250:9: 250:10
        StorageLive(_358);               // scope 70 at src\cryptonight.rs:250:5: 252:6
        _358 = _350;                     // scope 70 at src\cryptonight.rs:250:5: 252:6
        _357 = _358;                     // scope 70 at src\cryptonight.rs:250:5: 252:6
        StorageDead(_358);               // scope 70 at src\cryptonight.rs:252:6: 252:6
        StorageLive(_360);               // scope 70 at src\cryptonight.rs:251:23: 251:54
        StorageLive(_361);               // scope 70 at src\cryptonight.rs:251:23: 251:46
        StorageLive(_362);               // scope 72 at src\cryptonight.rs:251:30: 251:45
        _362 = (((*_3).1: cryptonight::SlowHashState).1: cryptonight::SlowHashStateInner); // scope 72 at src\cryptonight.rs:251:30: 251:45
        _361 = _362;                     // scope 72 at src\cryptonight.rs:251:30: 251:45
        StorageDead(_362);               // scope 72 at src\cryptonight.rs:251:45: 251:45
        StorageLive(_363);               // scope 70 at src\cryptonight.rs:251:52: 251:53
        _363 = _357;                     // scope 70 at src\cryptonight.rs:251:52: 251:53
        _364 = Len((_361.1: [u8; 128])); // scope 70 at src\cryptonight.rs:251:23: 251:54
        _365 = Lt(_363, _364);           // scope 70 at src\cryptonight.rs:251:23: 251:54
        assert(_365, "index out of bounds: the len is {} but the index is {}", _364, _363) -> bb117; // scope 70 at src\cryptonight.rs:251:23: 251:54
    }

    bb117: {                            
        _360 = (_361.1: [u8; 128])[_363]; // scope 70 at src\cryptonight.rs:251:23: 251:54
        StorageLive(_366);               // scope 70 at src\cryptonight.rs:251:18: 251:19
        _366 = _357;                     // scope 70 at src\cryptonight.rs:251:18: 251:19
        _367 = Len(((*_3).2: [u8; 128])); // scope 70 at src\cryptonight.rs:251:9: 251:20
        _368 = Lt(_366, _367);           // scope 70 at src\cryptonight.rs:251:9: 251:20
        assert(_368, "index out of bounds: the len is {} but the index is {}", _367, _366) -> bb118; // scope 70 at src\cryptonight.rs:251:9: 251:20
    }

    bb118: {                            
        ((*_3).2: [u8; 128])[_366] = _360; // scope 70 at src\cryptonight.rs:251:9: 251:54
        StorageDead(_360);               // scope 70 at src\cryptonight.rs:251:54: 251:54
        StorageDead(_361);               // scope 70 at src\cryptonight.rs:251:55: 251:55
        _359 = ();                       // scope 70 at src\cryptonight.rs:250:32: 252:6
        _50 = ();                        // scope 66 at src\cryptonight.rs:250:5: 252:6
        StorageDead(_357);               // scope 67 at src\cryptonight.rs:252:6: 252:6
        StorageDead(_350);               // scope 66 at src\cryptonight.rs:252:6: 252:6
        goto -> bb113;                   // scope 66 at src\cryptonight.rs:250:5: 252:6
    }

    bb119: {                            
        drop(((*_3).6: oaes::AesContext)) -> [return: bb193, unwind: bb192]; // scope 0 at src\cryptonight.rs:253:5: 253:16
    }

    bb120: {                            
        StorageDead(_380);               // scope 0 at src\cryptonight.rs:254:62: 254:62
        StorageDead(_376);               // scope 0 at src\cryptonight.rs:254:62: 254:62
        _374 = _375;                     // scope 0 at src\cryptonight.rs:254:33: 254:62
        _373 = _374;                     // scope 0 at src\cryptonight.rs:254:33: 254:62
        _371 = const oaes::AesContext::import_key_data(_372, _373, const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:43) => cnminer[5424]::cryptonight[0]::AES_KEY_SIZE[0] }, Slice([]))) -> bb121; // scope 0 at src\cryptonight.rs:254:5: 254:77
    }

    bb121: {                            
        StorageDead(_373);               // scope 0 at src\cryptonight.rs:254:77: 254:77
        StorageDead(_372);               // scope 0 at src\cryptonight.rs:254:77: 254:77
        StorageDead(_374);               // scope 0 at src\cryptonight.rs:254:78: 254:78
        StorageDead(_375);               // scope 0 at src\cryptonight.rs:254:78: 254:78
        StorageDead(_378);               // scope 0 at src\cryptonight.rs:254:78: 254:78
        StorageLive(_382);               // scope 74 at src\cryptonight.rs:256:13: 256:18
        _382 = const 0isize;             // scope 74 at src\cryptonight.rs:256:21: 256:27
        StorageLive(_383);               // scope 76 at src\cryptonight.rs:257:13: 257:21
        StorageLive(_384);               // scope 76 at src\cryptonight.rs:257:24: 257:32
        StorageLive(_385);               // scope 76 at src\cryptonight.rs:257:24: 257:32
        _385 = &mut ((*_3).2: [u8; 128]); // scope 76 at src\cryptonight.rs:257:24: 257:32
        _384 = _385 as &mut [u8] (Unsize); // scope 76 at src\cryptonight.rs:257:24: 257:32
        StorageDead(_385);               // scope 76 at src\cryptonight.rs:257:32: 257:32
        _383 = const std::slice::<impl [T]>::as_mut_ptr(_384) -> bb122; // scope 76 at src\cryptonight.rs:257:24: 257:45
    }

    bb122: {                            
        StorageDead(_384);               // scope 76 at src\cryptonight.rs:257:45: 257:45
        StorageLive(_386);               // scope 78 at src\cryptonight.rs:258:13: 258:19
        StorageLive(_387);               // scope 78 at src\cryptonight.rs:258:22: 258:36
        StorageLive(_388);               // scope 78 at src\cryptonight.rs:258:22: 258:36
        _388 = &((*_3).0: [u8; 2097152]); // scope 78 at src\cryptonight.rs:258:22: 258:36
        _387 = _388 as &[u8] (Unsize);   // scope 78 at src\cryptonight.rs:258:22: 258:36
        StorageDead(_388);               // scope 78 at src\cryptonight.rs:258:36: 258:36
        _386 = const std::slice::<impl [T]>::as_ptr(_387) -> bb123; // scope 78 at src\cryptonight.rs:258:22: 258:45
    }

    bb123: {                            
        StorageDead(_387);               // scope 78 at src\cryptonight.rs:258:45: 258:45
        StorageLive(_389);               // scope 80 at src\cryptonight.rs:259:13: 259:20
        StorageLive(_390);               // scope 80 at src\cryptonight.rs:259:23: 259:47
        StorageLive(_391);               // scope 80 at src\cryptonight.rs:259:23: 259:47
        StorageLive(_392);               // scope 80 at src\cryptonight.rs:259:23: 259:47
        _392 = &((((*_3).6: oaes::AesContext).0: oaes::AesKey).2: std::vec::Vec<u8>); // scope 80 at src\cryptonight.rs:259:23: 259:47
        _391 = const std::ops::Deref::deref(_392) -> bb124; // scope 80 at src\cryptonight.rs:259:23: 259:47
    }

    bb124: {                            
        _390 = _391;                     // scope 80 at src\cryptonight.rs:259:23: 259:47
        StorageDead(_392);               // scope 80 at src\cryptonight.rs:259:47: 259:47
        _389 = const std::slice::<impl [T]>::as_ptr(_390) -> bb125; // scope 80 at src\cryptonight.rs:259:23: 259:56
    }

    bb125: {                            
        StorageDead(_390);               // scope 80 at src\cryptonight.rs:259:56: 259:56
        StorageDead(_391);               // scope 80 at src\cryptonight.rs:259:57: 259:57
        goto -> bb126;                   // scope 80 at src\cryptonight.rs:260:9: 283:10
    }

    bb126: {                            
        StorageLive(_393);               // scope 80 at src\cryptonight.rs:260:15: 260:34
        StorageLive(_394);               // scope 80 at src\cryptonight.rs:260:15: 260:16
        _394 = _382;                     // scope 80 at src\cryptonight.rs:260:15: 260:16
        StorageLive(_395);               // scope 80 at src\cryptonight.rs:260:19: 260:34
        _395 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:40) => cnminer[5424]::cryptonight[0]::MEMORY[0] }, Slice([])) as isize (Misc); // scope 80 at src\cryptonight.rs:260:19: 260:34
        _393 = Lt(_394, _395);           // scope 80 at src\cryptonight.rs:260:15: 260:34
        StorageDead(_395);               // scope 80 at src\cryptonight.rs:260:34: 260:34
        StorageDead(_394);               // scope 80 at src\cryptonight.rs:260:34: 260:34
        switchInt(_393) -> [0u8: bb127, otherwise: bb128]; // scope 80 at src\cryptonight.rs:260:9: 283:10
    }

    bb127: {                            
        _381 = ();                       // scope 80 at src\cryptonight.rs:260:9: 283:10
        StorageDead(_393);               // scope 80 at src\cryptonight.rs:283:10: 283:10
        StorageDead(_389);               // scope 78 at src\cryptonight.rs:284:6: 284:6
        StorageDead(_386);               // scope 76 at src\cryptonight.rs:284:6: 284:6
        StorageDead(_383);               // scope 74 at src\cryptonight.rs:284:6: 284:6
        StorageDead(_382);               // scope 0 at src\cryptonight.rs:284:6: 284:6
        StorageLive(_521);               // scope 93 at src\cryptonight.rs:285:5: 287:6
        StorageLive(_522);               // scope 93 at src\cryptonight.rs:285:5: 287:6
        StorageLive(_523);               // scope 93 at src\cryptonight.rs:285:14: 285:31
        _523 = std::ops::Range<usize> { start: const 0usize, end: const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])) }; // scope 93 at src\cryptonight.rs:285:14: 285:31
        _522 = const std::iter::IntoIterator::into_iter(_523) -> bb182; // scope 93 at src\cryptonight.rs:285:5: 287:6
    }

    bb128: {                            
        StorageLive(_398);               // scope 82 at src\cryptonight.rs:262:28: 262:36
        _398 = _383;                     // scope 82 at src\cryptonight.rs:262:28: 262:36
        StorageLive(_399);               // scope 82 at src\cryptonight.rs:262:38: 262:54
        StorageLive(_400);               // scope 82 at src\cryptonight.rs:262:38: 262:44
        _400 = _386;                     // scope 82 at src\cryptonight.rs:262:38: 262:44
        StorageLive(_401);               // scope 82 at src\cryptonight.rs:262:52: 262:53
        _401 = _382;                     // scope 82 at src\cryptonight.rs:262:52: 262:53
        _399 = const std::ptr::<impl *const T>::offset(_400, _401) -> bb129; // scope 82 at src\cryptonight.rs:262:38: 262:54
    }

    bb129: {                            
        StorageDead(_401);               // scope 82 at src\cryptonight.rs:262:54: 262:54
        StorageDead(_400);               // scope 82 at src\cryptonight.rs:262:54: 262:54
        _397 = const cryptonight::xor_blocks(_398, _399) -> bb130; // scope 82 at src\cryptonight.rs:262:17: 262:55
    }

    bb130: {                            
        StorageDead(_399);               // scope 82 at src\cryptonight.rs:262:55: 262:55
        StorageDead(_398);               // scope 82 at src\cryptonight.rs:262:55: 262:55
        StorageLive(_403);               // scope 82 at src\cryptonight.rs:263:28: 263:49
        StorageLive(_404);               // scope 82 at src\cryptonight.rs:263:28: 263:36
        _404 = _383;                     // scope 82 at src\cryptonight.rs:263:28: 263:36
        _403 = const std::ptr::<impl *mut T>::offset(_404, const 16isize) -> bb131; // scope 82 at src\cryptonight.rs:263:28: 263:49
    }

    bb131: {                            
        StorageDead(_404);               // scope 82 at src\cryptonight.rs:263:49: 263:49
        StorageLive(_405);               // scope 82 at src\cryptonight.rs:263:51: 263:74
        StorageLive(_406);               // scope 82 at src\cryptonight.rs:263:51: 263:57
        _406 = _386;                     // scope 82 at src\cryptonight.rs:263:51: 263:57
        StorageLive(_407);               // scope 82 at src\cryptonight.rs:263:65: 263:73
        StorageLive(_408);               // scope 82 at src\cryptonight.rs:263:65: 263:66
        _408 = _382;                     // scope 82 at src\cryptonight.rs:263:65: 263:66
        _409 = CheckedAdd(_408, const 16isize); // scope 82 at src\cryptonight.rs:263:65: 263:73
        assert(!(_409.1: bool), "attempt to add with overflow") -> bb132; // scope 82 at src\cryptonight.rs:263:65: 263:73
    }

    bb132: {                            
        _407 = (_409.0: isize);          // scope 82 at src\cryptonight.rs:263:65: 263:73
        StorageDead(_408);               // scope 82 at src\cryptonight.rs:263:73: 263:73
        _405 = const std::ptr::<impl *const T>::offset(_406, _407) -> bb133; // scope 82 at src\cryptonight.rs:263:51: 263:74
    }

    bb133: {                            
        StorageDead(_407);               // scope 82 at src\cryptonight.rs:263:74: 263:74
        StorageDead(_406);               // scope 82 at src\cryptonight.rs:263:74: 263:74
        _402 = const cryptonight::xor_blocks(_403, _405) -> bb134; // scope 82 at src\cryptonight.rs:263:17: 263:75
    }

    bb134: {                            
        StorageDead(_405);               // scope 82 at src\cryptonight.rs:263:75: 263:75
        StorageDead(_403);               // scope 82 at src\cryptonight.rs:263:75: 263:75
        StorageLive(_411);               // scope 82 at src\cryptonight.rs:264:28: 264:49
        StorageLive(_412);               // scope 82 at src\cryptonight.rs:264:28: 264:36
        _412 = _383;                     // scope 82 at src\cryptonight.rs:264:28: 264:36
        _411 = const std::ptr::<impl *mut T>::offset(_412, const 32isize) -> bb135; // scope 82 at src\cryptonight.rs:264:28: 264:49
    }

    bb135: {                            
        StorageDead(_412);               // scope 82 at src\cryptonight.rs:264:49: 264:49
        StorageLive(_413);               // scope 82 at src\cryptonight.rs:264:51: 264:74
        StorageLive(_414);               // scope 82 at src\cryptonight.rs:264:51: 264:57
        _414 = _386;                     // scope 82 at src\cryptonight.rs:264:51: 264:57
        StorageLive(_415);               // scope 82 at src\cryptonight.rs:264:65: 264:73
        StorageLive(_416);               // scope 82 at src\cryptonight.rs:264:65: 264:66
        _416 = _382;                     // scope 82 at src\cryptonight.rs:264:65: 264:66
        _417 = CheckedAdd(_416, const 32isize); // scope 82 at src\cryptonight.rs:264:65: 264:73
        assert(!(_417.1: bool), "attempt to add with overflow") -> bb136; // scope 82 at src\cryptonight.rs:264:65: 264:73
    }

    bb136: {                            
        _415 = (_417.0: isize);          // scope 82 at src\cryptonight.rs:264:65: 264:73
        StorageDead(_416);               // scope 82 at src\cryptonight.rs:264:73: 264:73
        _413 = const std::ptr::<impl *const T>::offset(_414, _415) -> bb137; // scope 82 at src\cryptonight.rs:264:51: 264:74
    }

    bb137: {                            
        StorageDead(_415);               // scope 82 at src\cryptonight.rs:264:74: 264:74
        StorageDead(_414);               // scope 82 at src\cryptonight.rs:264:74: 264:74
        _410 = const cryptonight::xor_blocks(_411, _413) -> bb138; // scope 82 at src\cryptonight.rs:264:17: 264:75
    }

    bb138: {                            
        StorageDead(_413);               // scope 82 at src\cryptonight.rs:264:75: 264:75
        StorageDead(_411);               // scope 82 at src\cryptonight.rs:264:75: 264:75
        StorageLive(_419);               // scope 82 at src\cryptonight.rs:265:28: 265:49
        StorageLive(_420);               // scope 82 at src\cryptonight.rs:265:28: 265:36
        _420 = _383;                     // scope 82 at src\cryptonight.rs:265:28: 265:36
        _419 = const std::ptr::<impl *mut T>::offset(_420, const 48isize) -> bb139; // scope 82 at src\cryptonight.rs:265:28: 265:49
    }

    bb139: {                            
        StorageDead(_420);               // scope 82 at src\cryptonight.rs:265:49: 265:49
        StorageLive(_421);               // scope 82 at src\cryptonight.rs:265:51: 265:74
        StorageLive(_422);               // scope 82 at src\cryptonight.rs:265:51: 265:57
        _422 = _386;                     // scope 82 at src\cryptonight.rs:265:51: 265:57
        StorageLive(_423);               // scope 82 at src\cryptonight.rs:265:65: 265:73
        StorageLive(_424);               // scope 82 at src\cryptonight.rs:265:65: 265:66
        _424 = _382;                     // scope 82 at src\cryptonight.rs:265:65: 265:66
        _425 = CheckedAdd(_424, const 48isize); // scope 82 at src\cryptonight.rs:265:65: 265:73
        assert(!(_425.1: bool), "attempt to add with overflow") -> bb140; // scope 82 at src\cryptonight.rs:265:65: 265:73
    }

    bb140: {                            
        _423 = (_425.0: isize);          // scope 82 at src\cryptonight.rs:265:65: 265:73
        StorageDead(_424);               // scope 82 at src\cryptonight.rs:265:73: 265:73
        _421 = const std::ptr::<impl *const T>::offset(_422, _423) -> bb141; // scope 82 at src\cryptonight.rs:265:51: 265:74
    }

    bb141: {                            
        StorageDead(_423);               // scope 82 at src\cryptonight.rs:265:74: 265:74
        StorageDead(_422);               // scope 82 at src\cryptonight.rs:265:74: 265:74
        _418 = const cryptonight::xor_blocks(_419, _421) -> bb142; // scope 82 at src\cryptonight.rs:265:17: 265:75
    }

    bb142: {                            
        StorageDead(_421);               // scope 82 at src\cryptonight.rs:265:75: 265:75
        StorageDead(_419);               // scope 82 at src\cryptonight.rs:265:75: 265:75
        StorageLive(_427);               // scope 82 at src\cryptonight.rs:266:28: 266:49
        StorageLive(_428);               // scope 82 at src\cryptonight.rs:266:28: 266:36
        _428 = _383;                     // scope 82 at src\cryptonight.rs:266:28: 266:36
        _427 = const std::ptr::<impl *mut T>::offset(_428, const 64isize) -> bb143; // scope 82 at src\cryptonight.rs:266:28: 266:49
    }

    bb143: {                            
        StorageDead(_428);               // scope 82 at src\cryptonight.rs:266:49: 266:49
        StorageLive(_429);               // scope 82 at src\cryptonight.rs:266:51: 266:74
        StorageLive(_430);               // scope 82 at src\cryptonight.rs:266:51: 266:57
        _430 = _386;                     // scope 82 at src\cryptonight.rs:266:51: 266:57
        StorageLive(_431);               // scope 82 at src\cryptonight.rs:266:65: 266:73
        StorageLive(_432);               // scope 82 at src\cryptonight.rs:266:65: 266:66
        _432 = _382;                     // scope 82 at src\cryptonight.rs:266:65: 266:66
        _433 = CheckedAdd(_432, const 64isize); // scope 82 at src\cryptonight.rs:266:65: 266:73
        assert(!(_433.1: bool), "attempt to add with overflow") -> bb144; // scope 82 at src\cryptonight.rs:266:65: 266:73
    }

    bb144: {                            
        _431 = (_433.0: isize);          // scope 82 at src\cryptonight.rs:266:65: 266:73
        StorageDead(_432);               // scope 82 at src\cryptonight.rs:266:73: 266:73
        _429 = const std::ptr::<impl *const T>::offset(_430, _431) -> bb145; // scope 82 at src\cryptonight.rs:266:51: 266:74
    }

    bb145: {                            
        StorageDead(_431);               // scope 82 at src\cryptonight.rs:266:74: 266:74
        StorageDead(_430);               // scope 82 at src\cryptonight.rs:266:74: 266:74
        _426 = const cryptonight::xor_blocks(_427, _429) -> bb146; // scope 82 at src\cryptonight.rs:266:17: 266:75
    }

    bb146: {                            
        StorageDead(_429);               // scope 82 at src\cryptonight.rs:266:75: 266:75
        StorageDead(_427);               // scope 82 at src\cryptonight.rs:266:75: 266:75
        StorageLive(_435);               // scope 82 at src\cryptonight.rs:267:28: 267:49
        StorageLive(_436);               // scope 82 at src\cryptonight.rs:267:28: 267:36
        _436 = _383;                     // scope 82 at src\cryptonight.rs:267:28: 267:36
        _435 = const std::ptr::<impl *mut T>::offset(_436, const 80isize) -> bb147; // scope 82 at src\cryptonight.rs:267:28: 267:49
    }

    bb147: {                            
        StorageDead(_436);               // scope 82 at src\cryptonight.rs:267:49: 267:49
        StorageLive(_437);               // scope 82 at src\cryptonight.rs:267:51: 267:74
        StorageLive(_438);               // scope 82 at src\cryptonight.rs:267:51: 267:57
        _438 = _386;                     // scope 82 at src\cryptonight.rs:267:51: 267:57
        StorageLive(_439);               // scope 82 at src\cryptonight.rs:267:65: 267:73
        StorageLive(_440);               // scope 82 at src\cryptonight.rs:267:65: 267:66
        _440 = _382;                     // scope 82 at src\cryptonight.rs:267:65: 267:66
        _441 = CheckedAdd(_440, const 80isize); // scope 82 at src\cryptonight.rs:267:65: 267:73
        assert(!(_441.1: bool), "attempt to add with overflow") -> bb148; // scope 82 at src\cryptonight.rs:267:65: 267:73
    }

    bb148: {                            
        _439 = (_441.0: isize);          // scope 82 at src\cryptonight.rs:267:65: 267:73
        StorageDead(_440);               // scope 82 at src\cryptonight.rs:267:73: 267:73
        _437 = const std::ptr::<impl *const T>::offset(_438, _439) -> bb149; // scope 82 at src\cryptonight.rs:267:51: 267:74
    }

    bb149: {                            
        StorageDead(_439);               // scope 82 at src\cryptonight.rs:267:74: 267:74
        StorageDead(_438);               // scope 82 at src\cryptonight.rs:267:74: 267:74
        _434 = const cryptonight::xor_blocks(_435, _437) -> bb150; // scope 82 at src\cryptonight.rs:267:17: 267:75
    }

    bb150: {                            
        StorageDead(_437);               // scope 82 at src\cryptonight.rs:267:75: 267:75
        StorageDead(_435);               // scope 82 at src\cryptonight.rs:267:75: 267:75
        StorageLive(_443);               // scope 82 at src\cryptonight.rs:268:28: 268:49
        StorageLive(_444);               // scope 82 at src\cryptonight.rs:268:28: 268:36
        _444 = _383;                     // scope 82 at src\cryptonight.rs:268:28: 268:36
        _443 = const std::ptr::<impl *mut T>::offset(_444, const 96isize) -> bb151; // scope 82 at src\cryptonight.rs:268:28: 268:49
    }

    bb151: {                            
        StorageDead(_444);               // scope 82 at src\cryptonight.rs:268:49: 268:49
        StorageLive(_445);               // scope 82 at src\cryptonight.rs:268:51: 268:74
        StorageLive(_446);               // scope 82 at src\cryptonight.rs:268:51: 268:57
        _446 = _386;                     // scope 82 at src\cryptonight.rs:268:51: 268:57
        StorageLive(_447);               // scope 82 at src\cryptonight.rs:268:65: 268:73
        StorageLive(_448);               // scope 82 at src\cryptonight.rs:268:65: 268:66
        _448 = _382;                     // scope 82 at src\cryptonight.rs:268:65: 268:66
        _449 = CheckedAdd(_448, const 96isize); // scope 82 at src\cryptonight.rs:268:65: 268:73
        assert(!(_449.1: bool), "attempt to add with overflow") -> bb152; // scope 82 at src\cryptonight.rs:268:65: 268:73
    }

    bb152: {                            
        _447 = (_449.0: isize);          // scope 82 at src\cryptonight.rs:268:65: 268:73
        StorageDead(_448);               // scope 82 at src\cryptonight.rs:268:73: 268:73
        _445 = const std::ptr::<impl *const T>::offset(_446, _447) -> bb153; // scope 82 at src\cryptonight.rs:268:51: 268:74
    }

    bb153: {                            
        StorageDead(_447);               // scope 82 at src\cryptonight.rs:268:74: 268:74
        StorageDead(_446);               // scope 82 at src\cryptonight.rs:268:74: 268:74
        _442 = const cryptonight::xor_blocks(_443, _445) -> bb154; // scope 82 at src\cryptonight.rs:268:17: 268:75
    }

    bb154: {                            
        StorageDead(_445);               // scope 82 at src\cryptonight.rs:268:75: 268:75
        StorageDead(_443);               // scope 82 at src\cryptonight.rs:268:75: 268:75
        StorageLive(_451);               // scope 82 at src\cryptonight.rs:269:28: 269:49
        StorageLive(_452);               // scope 82 at src\cryptonight.rs:269:28: 269:36
        _452 = _383;                     // scope 82 at src\cryptonight.rs:269:28: 269:36
        _451 = const std::ptr::<impl *mut T>::offset(_452, const 112isize) -> bb155; // scope 82 at src\cryptonight.rs:269:28: 269:49
    }

    bb155: {                            
        StorageDead(_452);               // scope 82 at src\cryptonight.rs:269:49: 269:49
        StorageLive(_453);               // scope 82 at src\cryptonight.rs:269:51: 269:74
        StorageLive(_454);               // scope 82 at src\cryptonight.rs:269:51: 269:57
        _454 = _386;                     // scope 82 at src\cryptonight.rs:269:51: 269:57
        StorageLive(_455);               // scope 82 at src\cryptonight.rs:269:65: 269:73
        StorageLive(_456);               // scope 82 at src\cryptonight.rs:269:65: 269:66
        _456 = _382;                     // scope 82 at src\cryptonight.rs:269:65: 269:66
        _457 = CheckedAdd(_456, const 112isize); // scope 82 at src\cryptonight.rs:269:65: 269:73
        assert(!(_457.1: bool), "attempt to add with overflow") -> bb156; // scope 82 at src\cryptonight.rs:269:65: 269:73
    }

    bb156: {                            
        _455 = (_457.0: isize);          // scope 82 at src\cryptonight.rs:269:65: 269:73
        StorageDead(_456);               // scope 82 at src\cryptonight.rs:269:73: 269:73
        _453 = const std::ptr::<impl *const T>::offset(_454, _455) -> bb157; // scope 82 at src\cryptonight.rs:269:51: 269:74
    }

    bb157: {                            
        StorageDead(_455);               // scope 82 at src\cryptonight.rs:269:74: 269:74
        StorageDead(_454);               // scope 82 at src\cryptonight.rs:269:74: 269:74
        _450 = const cryptonight::xor_blocks(_451, _453) -> bb158; // scope 82 at src\cryptonight.rs:269:17: 269:75
    }

    bb158: {                            
        StorageDead(_453);               // scope 82 at src\cryptonight.rs:269:75: 269:75
        StorageDead(_451);               // scope 82 at src\cryptonight.rs:269:75: 269:75
        StorageLive(_458);               // scope 83 at src\cryptonight.rs:270:17: 280:18
        StorageLive(_459);               // scope 83 at src\cryptonight.rs:270:17: 280:18
        StorageLive(_460);               // scope 83 at src\cryptonight.rs:270:26: 270:31
        _460 = std::ops::Range<isize> { start: const 0isize, end: const 10isize }; // scope 83 at src\cryptonight.rs:270:26: 270:31
        _459 = const std::iter::IntoIterator::into_iter(_460) -> bb159; // scope 83 at src\cryptonight.rs:270:17: 280:18
    }

    bb159: {                            
        StorageDead(_460);               // scope 83 at src\cryptonight.rs:280:18: 280:18
        StorageLive(_461);               // scope 85 at src\cryptonight.rs:270:17: 280:18
        _461 = _459;                     // scope 85 at src\cryptonight.rs:270:17: 280:18
        goto -> bb160;                   // scope 85 at src\cryptonight.rs:270:17: 280:18
    }

    bb160: {                            
        StorageLive(_462);               // scope 86 at src\cryptonight.rs:270:17: 280:18
        StorageLive(_463);               // scope 86 at src\cryptonight.rs:270:17: 280:18
        StorageLive(_464);               // scope 86 at src\cryptonight.rs:270:17: 280:18
        StorageLive(_465);               // scope 86 at src\cryptonight.rs:270:17: 280:18
        _465 = &mut _461;                // scope 86 at src\cryptonight.rs:270:17: 280:18
        _464 = _465;                     // scope 86 at src\cryptonight.rs:270:17: 280:18
        _463 = const std::iter::Iterator::next(_464) -> bb161; // scope 86 at src\cryptonight.rs:270:17: 280:18
    }

    bb161: {                            
        StorageDead(_464);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        _467 = discriminant(_463);       // scope 88 at src\cryptonight.rs:270:17: 280:18
        switchInt(_467) -> [0isize: bb162, 1isize: bb163, otherwise: bb24]; // scope 88 at src\cryptonight.rs:270:17: 280:18
    }

    bb162: {                            
        _458 = ();                       // scope 88 at src\cryptonight.rs:270:17: 280:18
        StorageDead(_466);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_463);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_465);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_462);               // scope 85 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_461);               // scope 83 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_459);               // scope 83 at src\cryptonight.rs:280:18: 280:18
        StorageLive(_517);               // scope 83 at src\cryptonight.rs:270:17: 280:18
        _517 = _458;                     // scope 83 at src\cryptonight.rs:270:17: 280:18
        _396 = _517;                     // scope 83 at src\cryptonight.rs:270:17: 280:18
        StorageDead(_517);               // scope 83 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_458);               // scope 82 at src\cryptonight.rs:280:18: 280:18
        StorageLive(_518);               // scope 80 at src\cryptonight.rs:282:18: 282:41
        _518 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:45) => cnminer[5424]::cryptonight[0]::INIT_SIZE_BYTE[0] }, Slice([])) as isize (Misc); // scope 80 at src\cryptonight.rs:282:18: 282:41
        _519 = CheckedAdd(_382, _518);   // scope 80 at src\cryptonight.rs:282:13: 282:41
        assert(!(_519.1: bool), "attempt to add with overflow") -> bb181; // scope 80 at src\cryptonight.rs:282:13: 282:41
    }

    bb163: {                            
        StorageLive(_466);               // scope 88 at src\cryptonight.rs:270:17: 280:18
        _466 = ((_463 as Some).0: isize); // scope 88 at src\cryptonight.rs:270:17: 280:18
        StorageLive(_468);               // scope 88 at src\cryptonight.rs:270:17: 280:18
        _468 = _466;                     // scope 88 at src\cryptonight.rs:270:17: 280:18
        _462 = _468;                     // scope 88 at src\cryptonight.rs:270:17: 280:18
        StorageDead(_468);               // scope 88 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_466);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_463);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_465);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        StorageLive(_469);               // scope 89 at src\cryptonight.rs:270:21: 270:22
        StorageLive(_470);               // scope 89 at src\cryptonight.rs:270:17: 280:18
        _470 = _462;                     // scope 89 at src\cryptonight.rs:270:17: 280:18
        _469 = _470;                     // scope 89 at src\cryptonight.rs:270:17: 280:18
        StorageDead(_470);               // scope 89 at src\cryptonight.rs:280:18: 280:18
        StorageLive(_472);               // scope 91 at src\cryptonight.rs:271:25: 271:32
        StorageLive(_473);               // scope 91 at src\cryptonight.rs:271:35: 271:57
        StorageLive(_474);               // scope 91 at src\cryptonight.rs:271:35: 271:42
        _474 = _389;                     // scope 91 at src\cryptonight.rs:271:35: 271:42
        StorageLive(_475);               // scope 91 at src\cryptonight.rs:271:50: 271:56
        StorageLive(_476);               // scope 91 at src\cryptonight.rs:271:50: 271:51
        _476 = _469;                     // scope 91 at src\cryptonight.rs:271:50: 271:51
        _477 = CheckedShl(_476, const 4i32); // scope 91 at src\cryptonight.rs:271:50: 271:56
        assert(!(_477.1: bool), "attempt to shift left with overflow") -> bb164; // scope 91 at src\cryptonight.rs:271:50: 271:56
    }

    bb164: {                            
        _475 = (_477.0: isize);          // scope 91 at src\cryptonight.rs:271:50: 271:56
        StorageDead(_476);               // scope 91 at src\cryptonight.rs:271:56: 271:56
        _473 = const std::ptr::<impl *const T>::offset(_474, _475) -> bb165; // scope 91 at src\cryptonight.rs:271:35: 271:57
    }

    bb165: {                            
        StorageDead(_475);               // scope 91 at src\cryptonight.rs:271:57: 271:57
        StorageDead(_474);               // scope 91 at src\cryptonight.rs:271:57: 271:57
        _472 = _473 as *const u32 (Misc); // scope 91 at src\cryptonight.rs:271:35: 271:71
        StorageDead(_473);               // scope 91 at src\cryptonight.rs:271:71: 271:71
        StorageLive(_479);               // scope 91 at src\cryptonight.rs:272:62: 272:82
        StorageLive(_480);               // scope 91 at src\cryptonight.rs:272:62: 272:70
        _480 = _383;                     // scope 91 at src\cryptonight.rs:272:62: 272:70
        _479 = _480 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:272:62: 272:82
        StorageDead(_480);               // scope 91 at src\cryptonight.rs:272:82: 272:82
        StorageLive(_481);               // scope 91 at src\cryptonight.rs:272:84: 272:91
        _481 = _472;                     // scope 91 at src\cryptonight.rs:272:84: 272:91
        _478 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_479, _481) -> bb166; // scope 91 at src\cryptonight.rs:272:21: 272:92
    }

    bb166: {                            
        StorageDead(_481);               // scope 91 at src\cryptonight.rs:272:92: 272:92
        StorageDead(_479);               // scope 91 at src\cryptonight.rs:272:92: 272:92
        StorageLive(_483);               // scope 91 at src\cryptonight.rs:273:62: 273:95
        StorageLive(_484);               // scope 91 at src\cryptonight.rs:273:62: 273:83
        StorageLive(_485);               // scope 91 at src\cryptonight.rs:273:62: 273:70
        _485 = _383;                     // scope 91 at src\cryptonight.rs:273:62: 273:70
        _484 = const std::ptr::<impl *mut T>::offset(_485, const 16isize) -> bb167; // scope 91 at src\cryptonight.rs:273:62: 273:83
    }

    bb167: {                            
        StorageDead(_485);               // scope 91 at src\cryptonight.rs:273:83: 273:83
        _483 = _484 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:273:62: 273:95
        StorageDead(_484);               // scope 91 at src\cryptonight.rs:273:95: 273:95
        StorageLive(_486);               // scope 91 at src\cryptonight.rs:273:97: 273:104
        _486 = _472;                     // scope 91 at src\cryptonight.rs:273:97: 273:104
        _482 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_483, _486) -> bb168; // scope 91 at src\cryptonight.rs:273:21: 273:105
    }

    bb168: {                            
        StorageDead(_486);               // scope 91 at src\cryptonight.rs:273:105: 273:105
        StorageDead(_483);               // scope 91 at src\cryptonight.rs:273:105: 273:105
        StorageLive(_488);               // scope 91 at src\cryptonight.rs:274:62: 274:95
        StorageLive(_489);               // scope 91 at src\cryptonight.rs:274:62: 274:83
        StorageLive(_490);               // scope 91 at src\cryptonight.rs:274:62: 274:70
        _490 = _383;                     // scope 91 at src\cryptonight.rs:274:62: 274:70
        _489 = const std::ptr::<impl *mut T>::offset(_490, const 32isize) -> bb169; // scope 91 at src\cryptonight.rs:274:62: 274:83
    }

    bb169: {                            
        StorageDead(_490);               // scope 91 at src\cryptonight.rs:274:83: 274:83
        _488 = _489 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:274:62: 274:95
        StorageDead(_489);               // scope 91 at src\cryptonight.rs:274:95: 274:95
        StorageLive(_491);               // scope 91 at src\cryptonight.rs:274:97: 274:104
        _491 = _472;                     // scope 91 at src\cryptonight.rs:274:97: 274:104
        _487 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_488, _491) -> bb170; // scope 91 at src\cryptonight.rs:274:21: 274:105
    }

    bb170: {                            
        StorageDead(_491);               // scope 91 at src\cryptonight.rs:274:105: 274:105
        StorageDead(_488);               // scope 91 at src\cryptonight.rs:274:105: 274:105
        StorageLive(_493);               // scope 91 at src\cryptonight.rs:275:62: 275:95
        StorageLive(_494);               // scope 91 at src\cryptonight.rs:275:62: 275:83
        StorageLive(_495);               // scope 91 at src\cryptonight.rs:275:62: 275:70
        _495 = _383;                     // scope 91 at src\cryptonight.rs:275:62: 275:70
        _494 = const std::ptr::<impl *mut T>::offset(_495, const 48isize) -> bb171; // scope 91 at src\cryptonight.rs:275:62: 275:83
    }

    bb171: {                            
        StorageDead(_495);               // scope 91 at src\cryptonight.rs:275:83: 275:83
        _493 = _494 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:275:62: 275:95
        StorageDead(_494);               // scope 91 at src\cryptonight.rs:275:95: 275:95
        StorageLive(_496);               // scope 91 at src\cryptonight.rs:275:97: 275:104
        _496 = _472;                     // scope 91 at src\cryptonight.rs:275:97: 275:104
        _492 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_493, _496) -> bb172; // scope 91 at src\cryptonight.rs:275:21: 275:105
    }

    bb172: {                            
        StorageDead(_496);               // scope 91 at src\cryptonight.rs:275:105: 275:105
        StorageDead(_493);               // scope 91 at src\cryptonight.rs:275:105: 275:105
        StorageLive(_498);               // scope 91 at src\cryptonight.rs:276:62: 276:95
        StorageLive(_499);               // scope 91 at src\cryptonight.rs:276:62: 276:83
        StorageLive(_500);               // scope 91 at src\cryptonight.rs:276:62: 276:70
        _500 = _383;                     // scope 91 at src\cryptonight.rs:276:62: 276:70
        _499 = const std::ptr::<impl *mut T>::offset(_500, const 64isize) -> bb173; // scope 91 at src\cryptonight.rs:276:62: 276:83
    }

    bb173: {                            
        StorageDead(_500);               // scope 91 at src\cryptonight.rs:276:83: 276:83
        _498 = _499 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:276:62: 276:95
        StorageDead(_499);               // scope 91 at src\cryptonight.rs:276:95: 276:95
        StorageLive(_501);               // scope 91 at src\cryptonight.rs:276:97: 276:104
        _501 = _472;                     // scope 91 at src\cryptonight.rs:276:97: 276:104
        _497 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_498, _501) -> bb174; // scope 91 at src\cryptonight.rs:276:21: 276:105
    }

    bb174: {                            
        StorageDead(_501);               // scope 91 at src\cryptonight.rs:276:105: 276:105
        StorageDead(_498);               // scope 91 at src\cryptonight.rs:276:105: 276:105
        StorageLive(_503);               // scope 91 at src\cryptonight.rs:277:62: 277:95
        StorageLive(_504);               // scope 91 at src\cryptonight.rs:277:62: 277:83
        StorageLive(_505);               // scope 91 at src\cryptonight.rs:277:62: 277:70
        _505 = _383;                     // scope 91 at src\cryptonight.rs:277:62: 277:70
        _504 = const std::ptr::<impl *mut T>::offset(_505, const 80isize) -> bb175; // scope 91 at src\cryptonight.rs:277:62: 277:83
    }

    bb175: {                            
        StorageDead(_505);               // scope 91 at src\cryptonight.rs:277:83: 277:83
        _503 = _504 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:277:62: 277:95
        StorageDead(_504);               // scope 91 at src\cryptonight.rs:277:95: 277:95
        StorageLive(_506);               // scope 91 at src\cryptonight.rs:277:97: 277:104
        _506 = _472;                     // scope 91 at src\cryptonight.rs:277:97: 277:104
        _502 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_503, _506) -> bb176; // scope 91 at src\cryptonight.rs:277:21: 277:105
    }

    bb176: {                            
        StorageDead(_506);               // scope 91 at src\cryptonight.rs:277:105: 277:105
        StorageDead(_503);               // scope 91 at src\cryptonight.rs:277:105: 277:105
        StorageLive(_508);               // scope 91 at src\cryptonight.rs:278:62: 278:95
        StorageLive(_509);               // scope 91 at src\cryptonight.rs:278:62: 278:83
        StorageLive(_510);               // scope 91 at src\cryptonight.rs:278:62: 278:70
        _510 = _383;                     // scope 91 at src\cryptonight.rs:278:62: 278:70
        _509 = const std::ptr::<impl *mut T>::offset(_510, const 96isize) -> bb177; // scope 91 at src\cryptonight.rs:278:62: 278:83
    }

    bb177: {                            
        StorageDead(_510);               // scope 91 at src\cryptonight.rs:278:83: 278:83
        _508 = _509 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:278:62: 278:95
        StorageDead(_509);               // scope 91 at src\cryptonight.rs:278:95: 278:95
        StorageLive(_511);               // scope 91 at src\cryptonight.rs:278:97: 278:104
        _511 = _472;                     // scope 91 at src\cryptonight.rs:278:97: 278:104
        _507 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_508, _511) -> bb178; // scope 91 at src\cryptonight.rs:278:21: 278:105
    }

    bb178: {                            
        StorageDead(_511);               // scope 91 at src\cryptonight.rs:278:105: 278:105
        StorageDead(_508);               // scope 91 at src\cryptonight.rs:278:105: 278:105
        StorageLive(_513);               // scope 91 at src\cryptonight.rs:279:62: 279:95
        StorageLive(_514);               // scope 91 at src\cryptonight.rs:279:62: 279:83
        StorageLive(_515);               // scope 91 at src\cryptonight.rs:279:62: 279:70
        _515 = _383;                     // scope 91 at src\cryptonight.rs:279:62: 279:70
        _514 = const std::ptr::<impl *mut T>::offset(_515, const 112isize) -> bb179; // scope 91 at src\cryptonight.rs:279:62: 279:83
    }

    bb179: {                            
        StorageDead(_515);               // scope 91 at src\cryptonight.rs:279:83: 279:83
        _513 = _514 as *mut u32 (Misc);  // scope 91 at src\cryptonight.rs:279:62: 279:95
        StorageDead(_514);               // scope 91 at src\cryptonight.rs:279:95: 279:95
        StorageLive(_516);               // scope 91 at src\cryptonight.rs:279:97: 279:104
        _516 = _472;                     // scope 91 at src\cryptonight.rs:279:97: 279:104
        _512 = const cryptonight::sub_and_shift_and_mix_add_round_in_place(_513, _516) -> bb180; // scope 91 at src\cryptonight.rs:279:21: 279:105
    }

    bb180: {                            
        StorageDead(_516);               // scope 91 at src\cryptonight.rs:279:105: 279:105
        StorageDead(_513);               // scope 91 at src\cryptonight.rs:279:105: 279:105
        _471 = ();                       // scope 89 at src\cryptonight.rs:270:32: 280:18
        StorageDead(_472);               // scope 89 at src\cryptonight.rs:280:18: 280:18
        _50 = ();                        // scope 85 at src\cryptonight.rs:270:17: 280:18
        StorageDead(_469);               // scope 86 at src\cryptonight.rs:280:18: 280:18
        StorageDead(_462);               // scope 85 at src\cryptonight.rs:280:18: 280:18
        goto -> bb160;                   // scope 85 at src\cryptonight.rs:270:17: 280:18
    }

    bb181: {                            
        _382 = (_519.0: isize);          // scope 80 at src\cryptonight.rs:282:13: 282:41
        StorageDead(_518);               // scope 80 at src\cryptonight.rs:282:41: 282:41
        _50 = ();                        // scope 80 at src\cryptonight.rs:260:35: 283:10
        goto -> bb126;                   // scope 80 at src\cryptonight.rs:260:9: 283:10
    }

    bb182: {                            
        StorageDead(_523);               // scope 93 at src\cryptonight.rs:287:6: 287:6
        StorageLive(_524);               // scope 95 at src\cryptonight.rs:285:5: 287:6
        _524 = _522;                     // scope 95 at src\cryptonight.rs:285:5: 287:6
        goto -> bb183;                   // scope 95 at src\cryptonight.rs:285:5: 287:6
    }

    bb183: {                            
        StorageLive(_525);               // scope 96 at src\cryptonight.rs:285:5: 287:6
        StorageLive(_526);               // scope 96 at src\cryptonight.rs:285:5: 287:6
        StorageLive(_527);               // scope 96 at src\cryptonight.rs:285:5: 287:6
        StorageLive(_528);               // scope 96 at src\cryptonight.rs:285:5: 287:6
        _528 = &mut _524;                // scope 96 at src\cryptonight.rs:285:5: 287:6
        _527 = _528;                     // scope 96 at src\cryptonight.rs:285:5: 287:6
        _526 = const std::iter::Iterator::next(_527) -> bb184; // scope 96 at src\cryptonight.rs:285:5: 287:6
    }

    bb184: {                            
        StorageDead(_527);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        _530 = discriminant(_526);       // scope 98 at src\cryptonight.rs:285:5: 287:6
        switchInt(_530) -> [0isize: bb185, 1isize: bb186, otherwise: bb24]; // scope 98 at src\cryptonight.rs:285:5: 287:6
    }

    bb185: {                            
        _521 = ();                       // scope 98 at src\cryptonight.rs:285:5: 287:6
        StorageDead(_529);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_526);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_528);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_525);               // scope 95 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_524);               // scope 93 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_522);               // scope 93 at src\cryptonight.rs:287:6: 287:6
        StorageLive(_544);               // scope 93 at src\cryptonight.rs:285:5: 287:6
        _544 = _521;                     // scope 93 at src\cryptonight.rs:285:5: 287:6
        _520 = _544;                     // scope 93 at src\cryptonight.rs:285:5: 287:6
        StorageDead(_544);               // scope 93 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_521);               // scope 0 at src\cryptonight.rs:287:6: 287:6
        StorageLive(_546);               // scope 0 at src\cryptonight.rs:288:13: 288:40
        StorageLive(_547);               // scope 0 at src\cryptonight.rs:288:13: 288:40
        StorageLive(_548);               // scope 0 at src\cryptonight.rs:288:18: 288:40
        StorageLive(_549);               // scope 102 at src\cryptonight.rs:288:25: 288:39
        _549 = ((((*_3).1: cryptonight::SlowHashState).0: cryptonight::HashState).1: [u64; 25]); // scope 102 at src\cryptonight.rs:288:25: 288:39
        _548 = _549;                     // scope 102 at src\cryptonight.rs:288:25: 288:39
        StorageDead(_549);               // scope 102 at src\cryptonight.rs:288:39: 288:39
        _547 = &mut _548;                // scope 0 at src\cryptonight.rs:288:13: 288:40
        _546 = _547;                     // scope 0 at src\cryptonight.rs:288:13: 288:40
        _545 = const keccak::keccakf(_546, const 24usize) -> bb189; // scope 0 at src\cryptonight.rs:288:5: 288:45
    }

    bb186: {                            
        StorageLive(_529);               // scope 98 at src\cryptonight.rs:285:5: 287:6
        _529 = ((_526 as Some).0: usize); // scope 98 at src\cryptonight.rs:285:5: 287:6
        StorageLive(_531);               // scope 98 at src\cryptonight.rs:285:5: 287:6
        _531 = _529;                     // scope 98 at src\cryptonight.rs:285:5: 287:6
        _525 = _531;                     // scope 98 at src\cryptonight.rs:285:5: 287:6
        StorageDead(_531);               // scope 98 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_529);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_526);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_528);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        StorageLive(_532);               // scope 99 at src\cryptonight.rs:285:9: 285:10
        StorageLive(_533);               // scope 99 at src\cryptonight.rs:285:5: 287:6
        _533 = _525;                     // scope 99 at src\cryptonight.rs:285:5: 287:6
        _532 = _533;                     // scope 99 at src\cryptonight.rs:285:5: 287:6
        StorageDead(_533);               // scope 99 at src\cryptonight.rs:287:6: 287:6
        StorageLive(_535);               // scope 99 at src\cryptonight.rs:286:43: 286:54
        StorageLive(_536);               // scope 99 at src\cryptonight.rs:286:52: 286:53
        _536 = _532;                     // scope 99 at src\cryptonight.rs:286:52: 286:53
        _537 = Len(((*_3).2: [u8; 128])); // scope 99 at src\cryptonight.rs:286:43: 286:54
        _538 = Lt(_536, _537);           // scope 99 at src\cryptonight.rs:286:43: 286:54
        assert(_538, "index out of bounds: the len is {} but the index is {}", _537, _536) -> bb187; // scope 99 at src\cryptonight.rs:286:43: 286:54
    }

    bb187: {                            
        _535 = ((*_3).2: [u8; 128])[_536]; // scope 99 at src\cryptonight.rs:286:43: 286:54
        StorageLive(_539);               // scope 99 at src\cryptonight.rs:286:9: 286:32
        StorageLive(_540);               // scope 101 at src\cryptonight.rs:286:16: 286:31
        _540 = (((*_3).1: cryptonight::SlowHashState).1: cryptonight::SlowHashStateInner); // scope 101 at src\cryptonight.rs:286:16: 286:31
        _539 = _540;                     // scope 101 at src\cryptonight.rs:286:16: 286:31
        StorageDead(_540);               // scope 101 at src\cryptonight.rs:286:31: 286:31
        StorageLive(_541);               // scope 99 at src\cryptonight.rs:286:38: 286:39
        _541 = _532;                     // scope 99 at src\cryptonight.rs:286:38: 286:39
        _542 = Len((_539.1: [u8; 128])); // scope 99 at src\cryptonight.rs:286:9: 286:40
        _543 = Lt(_541, _542);           // scope 99 at src\cryptonight.rs:286:9: 286:40
        assert(_543, "index out of bounds: the len is {} but the index is {}", _542, _541) -> bb188; // scope 99 at src\cryptonight.rs:286:9: 286:40
    }

    bb188: {                            
        (_539.1: [u8; 128])[_541] = _535; // scope 99 at src\cryptonight.rs:286:9: 286:54
        StorageDead(_535);               // scope 99 at src\cryptonight.rs:286:54: 286:54
        StorageDead(_539);               // scope 99 at src\cryptonight.rs:286:55: 286:55
        _534 = ();                       // scope 99 at src\cryptonight.rs:285:32: 287:6
        _50 = ();                        // scope 95 at src\cryptonight.rs:285:5: 287:6
        StorageDead(_532);               // scope 96 at src\cryptonight.rs:287:6: 287:6
        StorageDead(_525);               // scope 95 at src\cryptonight.rs:287:6: 287:6
        goto -> bb183;                   // scope 95 at src\cryptonight.rs:285:5: 287:6
    }

    bb189: {                            
        StorageDead(_546);               // scope 0 at src\cryptonight.rs:288:45: 288:45
        StorageDead(_547);               // scope 0 at src\cryptonight.rs:288:46: 288:46
        StorageDead(_548);               // scope 0 at src\cryptonight.rs:288:46: 288:46
        _0 = ();                         // scope 0 at src\cryptonight.rs:181:69: 291:2
        return;                          // scope 0 at src\cryptonight.rs:291:2: 291:2
    }

    bb190: {                             // cleanup
        ((*_3).6: oaes::AesContext) = _18; // scope 0 at src\cryptonight.rs:183:5: 183:16
        goto -> bb5;                     // scope 0 at src\cryptonight.rs:183:5: 183:16
    }

    bb191: {                            
        ((*_3).6: oaes::AesContext) = _18; // scope 0 at src\cryptonight.rs:183:5: 183:16
        StorageDead(_18);                // scope 0 at src\cryptonight.rs:183:40: 183:40
        StorageLive(_20);                // scope 0 at src\cryptonight.rs:184:12: 184:25
        StorageLive(_21);                // scope 0 at src\cryptonight.rs:184:12: 184:25
        StorageLive(_22);                // scope 0 at src\cryptonight.rs:184:13: 184:25
        StorageLive(_23);                // scope 0 at src\cryptonight.rs:184:13: 184:18
        _23 = _2;                        // scope 0 at src\cryptonight.rs:184:13: 184:18
        StorageLive(_24);                // scope 0 at src\cryptonight.rs:184:19: 184:24
        _24 = std::ops::Range<usize> { start: const 0usize, end: const 76usize }; // scope 0 at src\cryptonight.rs:184:19: 184:24
        _22 = const std::ops::Index::index(_23, _24) -> bb10; // scope 0 at src\cryptonight.rs:184:13: 184:25
    }

    bb192: {                             // cleanup
        ((*_3).6: oaes::AesContext) = _370; // scope 0 at src\cryptonight.rs:253:5: 253:16
        goto -> bb5;                     // scope 0 at src\cryptonight.rs:253:5: 253:16
    }

    bb193: {                            
        ((*_3).6: oaes::AesContext) = _370; // scope 0 at src\cryptonight.rs:253:5: 253:16
        StorageDead(_370);               // scope 0 at src\cryptonight.rs:253:40: 253:40
        StorageLive(_372);               // scope 0 at src\cryptonight.rs:254:5: 254:16
        _372 = &mut ((*_3).6: oaes::AesContext); // scope 0 at src\cryptonight.rs:254:5: 254:16
        StorageLive(_373);               // scope 0 at src\cryptonight.rs:254:33: 254:62
        StorageLive(_374);               // scope 0 at src\cryptonight.rs:254:33: 254:62
        StorageLive(_375);               // scope 0 at src\cryptonight.rs:254:34: 254:62
        StorageLive(_376);               // scope 0 at src\cryptonight.rs:254:34: 254:56
        StorageLive(_377);               // scope 0 at src\cryptonight.rs:254:34: 254:56
        StorageLive(_378);               // scope 0 at src\cryptonight.rs:254:34: 254:56
        StorageLive(_379);               // scope 73 at src\cryptonight.rs:254:41: 254:55
        _379 = ((((*_3).1: cryptonight::SlowHashState).0: cryptonight::HashState).0: [u8; 200]); // scope 73 at src\cryptonight.rs:254:41: 254:55
        _378 = _379;                     // scope 73 at src\cryptonight.rs:254:41: 254:55
        StorageDead(_379);               // scope 73 at src\cryptonight.rs:254:55: 254:55
        _377 = &_378;                    // scope 0 at src\cryptonight.rs:254:34: 254:56
        _376 = _377 as &[u8] (Unsize);   // scope 0 at src\cryptonight.rs:254:34: 254:56
        StorageDead(_377);               // scope 0 at src\cryptonight.rs:254:56: 254:56
        StorageLive(_380);               // scope 0 at src\cryptonight.rs:254:57: 254:61
        _380 = std::ops::RangeFrom<usize> { start: const 32usize }; // scope 0 at src\cryptonight.rs:254:57: 254:61
        _375 = const std::ops::Index::index(_376, _380) -> bb120; // scope 0 at src\cryptonight.rs:254:34: 254:62
    }
}

promoted[0] in cryptonight::cn_hash_ctx: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return pointer
    scope 1 {
    }
    scope 2 {
        scope 4 {
            scope 5 {
                scope 7 {
                }
                scope 8 {
                    scope 10 {
                    }
                }
                scope 9 {
                }
            }
            scope 6 {
            }
        }
    }
    scope 3 {
    }
    scope 11 {
    }
    scope 12 {
        scope 14 {
            scope 16 {
                scope 18 {
                    scope 20 {
                        scope 21 {
                            scope 23 {
                            }
                            scope 24 {
                                scope 26 {
                                    scope 27 {
                                    }
                                    scope 28 {
                                    }
                                }
                            }
                            scope 25 {
                            }
                        }
                        scope 22 {
                        }
                    }
                }
                scope 19 {
                }
                scope 29 {
                    scope 31 {
                        scope 32 {
                            scope 34 {
                            }
                            scope 35 {
                            }
                            scope 36 {
                            }
                        }
                        scope 33 {
                        }
                    }
                }
                scope 30 {
                }
            }
            scope 17 {
            }
        }
        scope 15 {
        }
    }
    scope 13 {
    }
    scope 37 {
        scope 39 {
            scope 41 {
                scope 43 {
                }
                scope 44 {
                    scope 46 {
                        scope 47 {
                            scope 49 {
                            }
                            scope 50 {
                                scope 52 {
                                }
                            }
                            scope 51 {
                            }
                        }
                        scope 48 {
                        }
                    }
                }
                scope 45 {
                }
            }
            scope 42 {
            }
        }
        scope 40 {
        }
    }
    scope 38 {
    }
    scope 53 {
        scope 55 {
            scope 57 {
                scope 59 {
                    scope 61 {
                        scope 63 {
                        }
                    }
                    scope 62 {
                    }
                }
                scope 60 {
                }
            }
            scope 58 {
            }
        }
        scope 56 {
        }
    }
    scope 54 {
    }
    scope 64 {
        scope 66 {
            scope 67 {
                scope 69 {
                }
                scope 70 {
                    scope 72 {
                    }
                }
                scope 71 {
                }
            }
            scope 68 {
            }
        }
    }
    scope 65 {
    }
    scope 73 {
    }
    scope 74 {
        scope 76 {
            scope 78 {
                scope 80 {
                    scope 82 {
                        scope 83 {
                            scope 85 {
                                scope 86 {
                                    scope 88 {
                                    }
                                    scope 89 {
                                        scope 91 {
                                        }
                                        scope 92 {
                                        }
                                    }
                                    scope 90 {
                                    }
                                }
                                scope 87 {
                                }
                            }
                        }
                        scope 84 {
                        }
                    }
                }
                scope 81 {
                }
            }
            scope 79 {
            }
        }
        scope 77 {
        }
    }
    scope 75 {
    }
    scope 93 {
        scope 95 {
            scope 96 {
                scope 98 {
                }
                scope 99 {
                    scope 101 {
                    }
                }
                scope 100 {
                }
            }
            scope 97 {
            }
        }
    }
    scope 94 {
    }
    scope 102 {
    }
    let mut _1: [std::fmt::ArgumentV1; 0];

    bb0: {                              
        _1 = [];                         // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

promoted[1] in cryptonight::cn_hash_ctx: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return pointer
    scope 1 {
    }
    scope 2 {
        scope 4 {
            scope 5 {
                scope 7 {
                }
                scope 8 {
                    scope 10 {
                    }
                }
                scope 9 {
                }
            }
            scope 6 {
            }
        }
    }
    scope 3 {
    }
    scope 11 {
    }
    scope 12 {
        scope 14 {
            scope 16 {
                scope 18 {
                    scope 20 {
                        scope 21 {
                            scope 23 {
                            }
                            scope 24 {
                                scope 26 {
                                    scope 27 {
                                    }
                                    scope 28 {
                                    }
                                }
                            }
                            scope 25 {
                            }
                        }
                        scope 22 {
                        }
                    }
                }
                scope 19 {
                }
                scope 29 {
                    scope 31 {
                        scope 32 {
                            scope 34 {
                            }
                            scope 35 {
                            }
                            scope 36 {
                            }
                        }
                        scope 33 {
                        }
                    }
                }
                scope 30 {
                }
            }
            scope 17 {
            }
        }
        scope 15 {
        }
    }
    scope 13 {
    }
    scope 37 {
        scope 39 {
            scope 41 {
                scope 43 {
                }
                scope 44 {
                    scope 46 {
                        scope 47 {
                            scope 49 {
                            }
                            scope 50 {
                                scope 52 {
                                }
                            }
                            scope 51 {
                            }
                        }
                        scope 48 {
                        }
                    }
                }
                scope 45 {
                }
            }
            scope 42 {
            }
        }
        scope 40 {
        }
    }
    scope 38 {
    }
    scope 53 {
        scope 55 {
            scope 57 {
                scope 59 {
                    scope 61 {
                        scope 63 {
                        }
                    }
                    scope 62 {
                    }
                }
                scope 60 {
                }
            }
            scope 58 {
            }
        }
        scope 56 {
        }
    }
    scope 54 {
    }
    scope 64 {
        scope 66 {
            scope 67 {
                scope 69 {
                }
                scope 70 {
                    scope 72 {
                    }
                }
                scope 71 {
                }
            }
            scope 68 {
            }
        }
    }
    scope 65 {
    }
    scope 73 {
    }
    scope 74 {
        scope 76 {
            scope 78 {
                scope 80 {
                    scope 82 {
                        scope 83 {
                            scope 85 {
                                scope 86 {
                                    scope 88 {
                                    }
                                    scope 89 {
                                        scope 91 {
                                        }
                                        scope 92 {
                                        }
                                    }
                                    scope 90 {
                                    }
                                }
                                scope 87 {
                                }
                            }
                        }
                        scope 84 {
                        }
                    }
                }
                scope 81 {
                }
            }
            scope 79 {
            }
        }
        scope 77 {
        }
    }
    scope 75 {
    }
    scope 93 {
        scope 95 {
            scope 96 {
                scope 98 {
                }
                scope 99 {
                    scope 101 {
                    }
                }
                scope 100 {
                }
            }
            scope 97 {
            }
        }
    }
    scope 94 {
    }
    scope 102 {
    }
    let mut _1: [&str; 1];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {                              
        _3 = const "Check 3\n";          // scope 0 at <println macros>:2:11: 2:36
        _2 = _3;                         // scope 0 at <println macros>:2:11: 2:36
        _1 = [_2];                       // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

promoted[2] in cryptonight::cn_hash_ctx: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return pointer
    scope 1 {
    }
    scope 2 {
        scope 4 {
            scope 5 {
                scope 7 {
                }
                scope 8 {
                    scope 10 {
                    }
                }
                scope 9 {
                }
            }
            scope 6 {
            }
        }
    }
    scope 3 {
    }
    scope 11 {
    }
    scope 12 {
        scope 14 {
            scope 16 {
                scope 18 {
                    scope 20 {
                        scope 21 {
                            scope 23 {
                            }
                            scope 24 {
                                scope 26 {
                                    scope 27 {
                                    }
                                    scope 28 {
                                    }
                                }
                            }
                            scope 25 {
                            }
                        }
                        scope 22 {
                        }
                    }
                }
                scope 19 {
                }
                scope 29 {
                    scope 31 {
                        scope 32 {
                            scope 34 {
                            }
                            scope 35 {
                            }
                            scope 36 {
                            }
                        }
                        scope 33 {
                        }
                    }
                }
                scope 30 {
                }
            }
            scope 17 {
            }
        }
        scope 15 {
        }
    }
    scope 13 {
    }
    scope 37 {
        scope 39 {
            scope 41 {
                scope 43 {
                }
                scope 44 {
                    scope 46 {
                        scope 47 {
                            scope 49 {
                            }
                            scope 50 {
                                scope 52 {
                                }
                            }
                            scope 51 {
                            }
                        }
                        scope 48 {
                        }
                    }
                }
                scope 45 {
                }
            }
            scope 42 {
            }
        }
        scope 40 {
        }
    }
    scope 38 {
    }
    scope 53 {
        scope 55 {
            scope 57 {
                scope 59 {
                    scope 61 {
                        scope 63 {
                        }
                    }
                    scope 62 {
                    }
                }
                scope 60 {
                }
            }
            scope 58 {
            }
        }
        scope 56 {
        }
    }
    scope 54 {
    }
    scope 64 {
        scope 66 {
            scope 67 {
                scope 69 {
                }
                scope 70 {
                    scope 72 {
                    }
                }
                scope 71 {
                }
            }
            scope 68 {
            }
        }
    }
    scope 65 {
    }
    scope 73 {
    }
    scope 74 {
        scope 76 {
            scope 78 {
                scope 80 {
                    scope 82 {
                        scope 83 {
                            scope 85 {
                                scope 86 {
                                    scope 88 {
                                    }
                                    scope 89 {
                                        scope 91 {
                                        }
                                        scope 92 {
                                        }
                                    }
                                    scope 90 {
                                    }
                                }
                                scope 87 {
                                }
                            }
                        }
                        scope 84 {
                        }
                    }
                }
                scope 81 {
                }
            }
            scope 79 {
            }
        }
        scope 77 {
        }
    }
    scope 75 {
    }
    scope 93 {
        scope 95 {
            scope 96 {
                scope 98 {
                }
                scope 99 {
                    scope 101 {
                    }
                }
                scope 100 {
                }
            }
            scope 97 {
            }
        }
    }
    scope 94 {
    }
    scope 102 {
    }
    let mut _1: [std::fmt::ArgumentV1; 0];

    bb0: {                              
        _1 = [];                         // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

promoted[3] in cryptonight::cn_hash_ctx: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return pointer
    scope 1 {
    }
    scope 2 {
        scope 4 {
            scope 5 {
                scope 7 {
                }
                scope 8 {
                    scope 10 {
                    }
                }
                scope 9 {
                }
            }
            scope 6 {
            }
        }
    }
    scope 3 {
    }
    scope 11 {
    }
    scope 12 {
        scope 14 {
            scope 16 {
                scope 18 {
                    scope 20 {
                        scope 21 {
                            scope 23 {
                            }
                            scope 24 {
                                scope 26 {
                                    scope 27 {
                                    }
                                    scope 28 {
                                    }
                                }
                            }
                            scope 25 {
                            }
                        }
                        scope 22 {
                        }
                    }
                }
                scope 19 {
                }
                scope 29 {
                    scope 31 {
                        scope 32 {
                            scope 34 {
                            }
                            scope 35 {
                            }
                            scope 36 {
                            }
                        }
                        scope 33 {
                        }
                    }
                }
                scope 30 {
                }
            }
            scope 17 {
            }
        }
        scope 15 {
        }
    }
    scope 13 {
    }
    scope 37 {
        scope 39 {
            scope 41 {
                scope 43 {
                }
                scope 44 {
                    scope 46 {
                        scope 47 {
                            scope 49 {
                            }
                            scope 50 {
                                scope 52 {
                                }
                            }
                            scope 51 {
                            }
                        }
                        scope 48 {
                        }
                    }
                }
                scope 45 {
                }
            }
            scope 42 {
            }
        }
        scope 40 {
        }
    }
    scope 38 {
    }
    scope 53 {
        scope 55 {
            scope 57 {
                scope 59 {
                    scope 61 {
                        scope 63 {
                        }
                    }
                    scope 62 {
                    }
                }
                scope 60 {
                }
            }
            scope 58 {
            }
        }
        scope 56 {
        }
    }
    scope 54 {
    }
    scope 64 {
        scope 66 {
            scope 67 {
                scope 69 {
                }
                scope 70 {
                    scope 72 {
                    }
                }
                scope 71 {
                }
            }
            scope 68 {
            }
        }
    }
    scope 65 {
    }
    scope 73 {
    }
    scope 74 {
        scope 76 {
            scope 78 {
                scope 80 {
                    scope 82 {
                        scope 83 {
                            scope 85 {
                                scope 86 {
                                    scope 88 {
                                    }
                                    scope 89 {
                                        scope 91 {
                                        }
                                        scope 92 {
                                        }
                                    }
                                    scope 90 {
                                    }
                                }
                                scope 87 {
                                }
                            }
                        }
                        scope 84 {
                        }
                    }
                }
                scope 81 {
                }
            }
            scope 79 {
            }
        }
        scope 77 {
        }
    }
    scope 75 {
    }
    scope 93 {
        scope 95 {
            scope 96 {
                scope 98 {
                }
                scope 99 {
                    scope 101 {
                    }
                }
                scope 100 {
                }
            }
            scope 97 {
            }
        }
    }
    scope 94 {
    }
    scope 102 {
    }
    let mut _1: [&str; 1];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {                              
        _3 = const "Check 2\n";          // scope 0 at <println macros>:2:11: 2:36
        _2 = _3;                         // scope 0 at <println macros>:2:11: 2:36
        _1 = [_2];                       // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

promoted[4] in cryptonight::cn_hash_ctx: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return pointer
    scope 1 {
    }
    scope 2 {
        scope 4 {
            scope 5 {
                scope 7 {
                }
                scope 8 {
                    scope 10 {
                    }
                }
                scope 9 {
                }
            }
            scope 6 {
            }
        }
    }
    scope 3 {
    }
    scope 11 {
    }
    scope 12 {
        scope 14 {
            scope 16 {
                scope 18 {
                    scope 20 {
                        scope 21 {
                            scope 23 {
                            }
                            scope 24 {
                                scope 26 {
                                    scope 27 {
                                    }
                                    scope 28 {
                                    }
                                }
                            }
                            scope 25 {
                            }
                        }
                        scope 22 {
                        }
                    }
                }
                scope 19 {
                }
                scope 29 {
                    scope 31 {
                        scope 32 {
                            scope 34 {
                            }
                            scope 35 {
                            }
                            scope 36 {
                            }
                        }
                        scope 33 {
                        }
                    }
                }
                scope 30 {
                }
            }
            scope 17 {
            }
        }
        scope 15 {
        }
    }
    scope 13 {
    }
    scope 37 {
        scope 39 {
            scope 41 {
                scope 43 {
                }
                scope 44 {
                    scope 46 {
                        scope 47 {
                            scope 49 {
                            }
                            scope 50 {
                                scope 52 {
                                }
                            }
                            scope 51 {
                            }
                        }
                        scope 48 {
                        }
                    }
                }
                scope 45 {
                }
            }
            scope 42 {
            }
        }
        scope 40 {
        }
    }
    scope 38 {
    }
    scope 53 {
        scope 55 {
            scope 57 {
                scope 59 {
                    scope 61 {
                        scope 63 {
                        }
                    }
                    scope 62 {
                    }
                }
                scope 60 {
                }
            }
            scope 58 {
            }
        }
        scope 56 {
        }
    }
    scope 54 {
    }
    scope 64 {
        scope 66 {
            scope 67 {
                scope 69 {
                }
                scope 70 {
                    scope 72 {
                    }
                }
                scope 71 {
                }
            }
            scope 68 {
            }
        }
    }
    scope 65 {
    }
    scope 73 {
    }
    scope 74 {
        scope 76 {
            scope 78 {
                scope 80 {
                    scope 82 {
                        scope 83 {
                            scope 85 {
                                scope 86 {
                                    scope 88 {
                                    }
                                    scope 89 {
                                        scope 91 {
                                        }
                                        scope 92 {
                                        }
                                    }
                                    scope 90 {
                                    }
                                }
                                scope 87 {
                                }
                            }
                        }
                        scope 84 {
                        }
                    }
                }
                scope 81 {
                }
            }
            scope 79 {
            }
        }
        scope 77 {
        }
    }
    scope 75 {
    }
    scope 93 {
        scope 95 {
            scope 96 {
                scope 98 {
                }
                scope 99 {
                    scope 101 {
                    }
                }
                scope 100 {
                }
            }
            scope 97 {
            }
        }
    }
    scope 94 {
    }
    scope 102 {
    }
    let mut _1: [std::fmt::ArgumentV1; 0];

    bb0: {                              
        _1 = [];                         // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

promoted[5] in cryptonight::cn_hash_ctx: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return pointer
    scope 1 {
    }
    scope 2 {
        scope 4 {
            scope 5 {
                scope 7 {
                }
                scope 8 {
                    scope 10 {
                    }
                }
                scope 9 {
                }
            }
            scope 6 {
            }
        }
    }
    scope 3 {
    }
    scope 11 {
    }
    scope 12 {
        scope 14 {
            scope 16 {
                scope 18 {
                    scope 20 {
                        scope 21 {
                            scope 23 {
                            }
                            scope 24 {
                                scope 26 {
                                    scope 27 {
                                    }
                                    scope 28 {
                                    }
                                }
                            }
                            scope 25 {
                            }
                        }
                        scope 22 {
                        }
                    }
                }
                scope 19 {
                }
                scope 29 {
                    scope 31 {
                        scope 32 {
                            scope 34 {
                            }
                            scope 35 {
                            }
                            scope 36 {
                            }
                        }
                        scope 33 {
                        }
                    }
                }
                scope 30 {
                }
            }
            scope 17 {
            }
        }
        scope 15 {
        }
    }
    scope 13 {
    }
    scope 37 {
        scope 39 {
            scope 41 {
                scope 43 {
                }
                scope 44 {
                    scope 46 {
                        scope 47 {
                            scope 49 {
                            }
                            scope 50 {
                                scope 52 {
                                }
                            }
                            scope 51 {
                            }
                        }
                        scope 48 {
                        }
                    }
                }
                scope 45 {
                }
            }
            scope 42 {
            }
        }
        scope 40 {
        }
    }
    scope 38 {
    }
    scope 53 {
        scope 55 {
            scope 57 {
                scope 59 {
                    scope 61 {
                        scope 63 {
                        }
                    }
                    scope 62 {
                    }
                }
                scope 60 {
                }
            }
            scope 58 {
            }
        }
        scope 56 {
        }
    }
    scope 54 {
    }
    scope 64 {
        scope 66 {
            scope 67 {
                scope 69 {
                }
                scope 70 {
                    scope 72 {
                    }
                }
                scope 71 {
                }
            }
            scope 68 {
            }
        }
    }
    scope 65 {
    }
    scope 73 {
    }
    scope 74 {
        scope 76 {
            scope 78 {
                scope 80 {
                    scope 82 {
                        scope 83 {
                            scope 85 {
                                scope 86 {
                                    scope 88 {
                                    }
                                    scope 89 {
                                        scope 91 {
                                        }
                                        scope 92 {
                                        }
                                    }
                                    scope 90 {
                                    }
                                }
                                scope 87 {
                                }
                            }
                        }
                        scope 84 {
                        }
                    }
                }
                scope 81 {
                }
            }
            scope 79 {
            }
        }
        scope 77 {
        }
    }
    scope 75 {
    }
    scope 93 {
        scope 95 {
            scope 96 {
                scope 98 {
                }
                scope 99 {
                    scope 101 {
                    }
                }
                scope 100 {
                }
            }
            scope 97 {
            }
        }
    }
    scope 94 {
    }
    scope 102 {
    }
    let mut _1: [&str; 1];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {                              
        _3 = const "Check 1\n";          // scope 0 at <println macros>:2:11: 2:36
        _2 = _3;                         // scope 0 at <println macros>:2:11: 2:36
        _1 = [_2];                       // scope 0 at <println macros>:2:11: 2:36
        _0 = &_1;                        // scope 0 at <println macros>:2:11: 2:36
        return;                          // scope 0 at <println macros>:2:11: 2:36
    }
}

const cryptonight::SlowHashStateInner::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 64usize;              // scope 0 at src\cryptonight.rs:44:17: 44:19
        return;                          // scope 0 at src\cryptonight.rs:44:17: 44:19
    }
}

fn cryptonight::mul128(_1: u64, _2: u64, _3: u64) -> u64 {
    let mut _0: u64;                     // return pointer
    scope 1 {
        let _4: &mut u64;                // "product_hi" in scope 1 at src\cryptonight.rs:115:47: 115:65
        scope 2 {
            let _5: u64;                 // "a" in scope 2 at src\cryptonight.rs:116:9: 116:10
            scope 4 {
                let _8: u64;             // "b" in scope 4 at src\cryptonight.rs:117:9: 117:10
                scope 6 {
                    let _10: u64;        // "c" in scope 6 at src\cryptonight.rs:118:9: 118:10
                    scope 8 {
                        let _13: u64;    // "d" in scope 8 at src\cryptonight.rs:119:9: 119:10
                        scope 10 {
                            let _15: u64; // "ad" in scope 10 at src\cryptonight.rs:120:9: 120:11
                            scope 12 {
                                let _19: u64; // "bd" in scope 12 at src\cryptonight.rs:121:9: 121:11
                                scope 14 {
                                    let _23: u64; // "adbc" in scope 14 at src\cryptonight.rs:122:9: 122:13
                                    scope 16 {
                                        let _30: u64; // "adbc_carry" in scope 16 at src\cryptonight.rs:123:9: 123:19
                                        scope 18 {
                                            let _34: u64; // "product_lo" in scope 18 at src\cryptonight.rs:124:9: 124:19
                                            scope 20 {
                                                let _40: u64; // "product_lo_carry" in scope 20 at src\cryptonight.rs:125:9: 125:25
                                            }
                                            scope 21 {
                                            }
                                        }
                                        scope 19 {
                                        }
                                    }
                                    scope 17 {
                                    }
                                }
                                scope 15 {
                                }
                            }
                            scope 13 {
                            }
                        }
                        scope 11 {
                        }
                    }
                    scope 9 {
                    }
                }
                scope 7 {
                }
            }
            scope 5 {
            }
        }
        scope 3 {
        }
    }
    let mut _6: u64;
    let mut _7: (u64, bool);
    let mut _9: u64;
    let mut _11: u64;
    let mut _12: (u64, bool);
    let mut _14: u64;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: (u64, bool);
    let mut _20: u64;
    let mut _21: u64;
    let mut _22: (u64, bool);
    let mut _24: u64;
    let mut _25: u64;
    let mut _26: u64;
    let mut _27: u64;
    let mut _28: (u64, bool);
    let mut _29: (u64, bool);
    let mut _31: bool;
    let mut _32: u64;
    let mut _33: u64;
    let mut _35: u64;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: (u64, bool);
    let mut _39: (u64, bool);
    let mut _41: bool;
    let mut _42: u64;
    let mut _43: u64;
    let mut _44: u64;
    let mut _45: u64;
    let mut _46: u64;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: (u64, bool);
    let mut _50: u64;
    let mut _51: u64;
    let mut _52: (u64, bool);
    let mut _53: (u64, bool);
    let mut _54: u64;
    let mut _55: u64;
    let mut _56: (u64, bool);
    let mut _57: (u64, bool);
    let mut _58: u64;
    let mut _59: (u64, bool);
    let mut _60: u64;

    bb0: {                              
        StorageLive(_4);                 // scope 1 at src\cryptonight.rs:115:47: 115:65
        _4 = &mut _3;                    // scope 1 at src\cryptonight.rs:115:47: 115:65
        StorageLive(_5);                 // scope 2 at src\cryptonight.rs:116:9: 116:10
        StorageLive(_6);                 // scope 2 at src\cryptonight.rs:116:13: 116:23
        _6 = _1;                         // scope 2 at src\cryptonight.rs:116:13: 116:23
        _7 = CheckedShr(_6, const 32i32); // scope 2 at src\cryptonight.rs:116:13: 116:29
        assert(!(_7.1: bool), "attempt to shift right with overflow") -> bb1; // scope 2 at src\cryptonight.rs:116:13: 116:29
    }

    bb1: {                              
        _5 = (_7.0: u64);                // scope 2 at src\cryptonight.rs:116:13: 116:29
        StorageDead(_6);                 // scope 2 at src\cryptonight.rs:116:29: 116:29
        StorageLive(_8);                 // scope 4 at src\cryptonight.rs:117:9: 117:10
        StorageLive(_9);                 // scope 4 at src\cryptonight.rs:117:13: 117:23
        _9 = _1;                         // scope 4 at src\cryptonight.rs:117:13: 117:23
        _8 = BitAnd(_9, const 4294967295u64); // scope 4 at src\cryptonight.rs:117:13: 117:36
        StorageDead(_9);                 // scope 4 at src\cryptonight.rs:117:36: 117:36
        StorageLive(_10);                // scope 6 at src\cryptonight.rs:118:9: 118:10
        StorageLive(_11);                // scope 6 at src\cryptonight.rs:118:13: 118:25
        _11 = _2;                        // scope 6 at src\cryptonight.rs:118:13: 118:25
        _12 = CheckedShr(_11, const 32i32); // scope 6 at src\cryptonight.rs:118:13: 118:31
        assert(!(_12.1: bool), "attempt to shift right with overflow") -> bb2; // scope 6 at src\cryptonight.rs:118:13: 118:31
    }

    bb2: {                              
        _10 = (_12.0: u64);              // scope 6 at src\cryptonight.rs:118:13: 118:31
        StorageDead(_11);                // scope 6 at src\cryptonight.rs:118:31: 118:31
        StorageLive(_13);                // scope 8 at src\cryptonight.rs:119:9: 119:10
        StorageLive(_14);                // scope 8 at src\cryptonight.rs:119:13: 119:25
        _14 = _2;                        // scope 8 at src\cryptonight.rs:119:13: 119:25
        _13 = BitAnd(_14, const 4294967295u64); // scope 8 at src\cryptonight.rs:119:13: 119:38
        StorageDead(_14);                // scope 8 at src\cryptonight.rs:119:38: 119:38
        StorageLive(_15);                // scope 10 at src\cryptonight.rs:120:9: 120:11
        StorageLive(_16);                // scope 10 at src\cryptonight.rs:120:14: 120:15
        _16 = _5;                        // scope 10 at src\cryptonight.rs:120:14: 120:15
        StorageLive(_17);                // scope 10 at src\cryptonight.rs:120:18: 120:19
        _17 = _13;                       // scope 10 at src\cryptonight.rs:120:18: 120:19
        _18 = CheckedMul(_16, _17);      // scope 10 at src\cryptonight.rs:120:14: 120:19
        assert(!(_18.1: bool), "attempt to multiply with overflow") -> bb3; // scope 10 at src\cryptonight.rs:120:14: 120:19
    }

    bb3: {                              
        _15 = (_18.0: u64);              // scope 10 at src\cryptonight.rs:120:14: 120:19
        StorageDead(_17);                // scope 10 at src\cryptonight.rs:120:19: 120:19
        StorageDead(_16);                // scope 10 at src\cryptonight.rs:120:19: 120:19
        StorageLive(_19);                // scope 12 at src\cryptonight.rs:121:9: 121:11
        StorageLive(_20);                // scope 12 at src\cryptonight.rs:121:14: 121:15
        _20 = _8;                        // scope 12 at src\cryptonight.rs:121:14: 121:15
        StorageLive(_21);                // scope 12 at src\cryptonight.rs:121:18: 121:19
        _21 = _13;                       // scope 12 at src\cryptonight.rs:121:18: 121:19
        _22 = CheckedMul(_20, _21);      // scope 12 at src\cryptonight.rs:121:14: 121:19
        assert(!(_22.1: bool), "attempt to multiply with overflow") -> bb4; // scope 12 at src\cryptonight.rs:121:14: 121:19
    }

    bb4: {                              
        _19 = (_22.0: u64);              // scope 12 at src\cryptonight.rs:121:14: 121:19
        StorageDead(_21);                // scope 12 at src\cryptonight.rs:121:19: 121:19
        StorageDead(_20);                // scope 12 at src\cryptonight.rs:121:19: 121:19
        StorageLive(_23);                // scope 14 at src\cryptonight.rs:122:9: 122:13
        StorageLive(_24);                // scope 14 at src\cryptonight.rs:122:16: 122:18
        _24 = _15;                       // scope 14 at src\cryptonight.rs:122:16: 122:18
        StorageLive(_25);                // scope 14 at src\cryptonight.rs:122:21: 122:28
        StorageLive(_26);                // scope 14 at src\cryptonight.rs:122:22: 122:23
        _26 = _8;                        // scope 14 at src\cryptonight.rs:122:22: 122:23
        StorageLive(_27);                // scope 14 at src\cryptonight.rs:122:26: 122:27
        _27 = _10;                       // scope 14 at src\cryptonight.rs:122:26: 122:27
        _28 = CheckedMul(_26, _27);      // scope 14 at src\cryptonight.rs:122:21: 122:28
        assert(!(_28.1: bool), "attempt to multiply with overflow") -> bb5; // scope 14 at src\cryptonight.rs:122:21: 122:28
    }

    bb5: {                              
        _25 = (_28.0: u64);              // scope 14 at src\cryptonight.rs:122:21: 122:28
        StorageDead(_27);                // scope 14 at src\cryptonight.rs:122:28: 122:28
        StorageDead(_26);                // scope 14 at src\cryptonight.rs:122:28: 122:28
        _29 = CheckedAdd(_24, _25);      // scope 14 at src\cryptonight.rs:122:16: 122:28
        assert(!(_29.1: bool), "attempt to add with overflow") -> bb6; // scope 14 at src\cryptonight.rs:122:16: 122:28
    }

    bb6: {                              
        _23 = (_29.0: u64);              // scope 14 at src\cryptonight.rs:122:16: 122:28
        StorageDead(_25);                // scope 14 at src\cryptonight.rs:122:28: 122:28
        StorageDead(_24);                // scope 14 at src\cryptonight.rs:122:28: 122:28
        StorageLive(_30);                // scope 16 at src\cryptonight.rs:123:9: 123:19
        StorageLive(_31);                // scope 16 at src\cryptonight.rs:123:25: 123:34
        StorageLive(_32);                // scope 16 at src\cryptonight.rs:123:25: 123:29
        _32 = _23;                       // scope 16 at src\cryptonight.rs:123:25: 123:29
        StorageLive(_33);                // scope 16 at src\cryptonight.rs:123:32: 123:34
        _33 = _15;                       // scope 16 at src\cryptonight.rs:123:32: 123:34
        _31 = Lt(_32, _33);              // scope 16 at src\cryptonight.rs:123:25: 123:34
        StorageDead(_33);                // scope 16 at src\cryptonight.rs:123:34: 123:34
        StorageDead(_32);                // scope 16 at src\cryptonight.rs:123:34: 123:34
        switchInt(_31) -> [0u8: bb8, otherwise: bb7]; // scope 16 at src\cryptonight.rs:123:22: 123:51
    }

    bb7: {                              
        _30 = const 1u64;                // scope 16 at src\cryptonight.rs:123:37: 123:38
        goto -> bb9;                     // scope 16 at src\cryptonight.rs:123:22: 123:51
    }

    bb8: {                              
        _30 = const 0u64;                // scope 16 at src\cryptonight.rs:123:48: 123:49
        goto -> bb9;                     // scope 16 at src\cryptonight.rs:123:22: 123:51
    }

    bb9: {                              
        StorageDead(_31);                // scope 16 at src\cryptonight.rs:123:51: 123:51
        StorageLive(_34);                // scope 18 at src\cryptonight.rs:124:9: 124:19
        StorageLive(_35);                // scope 18 at src\cryptonight.rs:124:22: 124:24
        _35 = _19;                       // scope 18 at src\cryptonight.rs:124:22: 124:24
        StorageLive(_36);                // scope 18 at src\cryptonight.rs:124:27: 124:39
        StorageLive(_37);                // scope 18 at src\cryptonight.rs:124:28: 124:32
        _37 = _23;                       // scope 18 at src\cryptonight.rs:124:28: 124:32
        _38 = CheckedShl(_37, const 32i32); // scope 18 at src\cryptonight.rs:124:27: 124:39
        assert(!(_38.1: bool), "attempt to shift left with overflow") -> bb10; // scope 18 at src\cryptonight.rs:124:27: 124:39
    }

    bb10: {                             
        _36 = (_38.0: u64);              // scope 18 at src\cryptonight.rs:124:27: 124:39
        StorageDead(_37);                // scope 18 at src\cryptonight.rs:124:39: 124:39
        _39 = CheckedAdd(_35, _36);      // scope 18 at src\cryptonight.rs:124:22: 124:39
        assert(!(_39.1: bool), "attempt to add with overflow") -> bb11; // scope 18 at src\cryptonight.rs:124:22: 124:39
    }

    bb11: {                             
        _34 = (_39.0: u64);              // scope 18 at src\cryptonight.rs:124:22: 124:39
        StorageDead(_36);                // scope 18 at src\cryptonight.rs:124:39: 124:39
        StorageDead(_35);                // scope 18 at src\cryptonight.rs:124:39: 124:39
        StorageLive(_40);                // scope 20 at src\cryptonight.rs:125:9: 125:25
        StorageLive(_41);                // scope 20 at src\cryptonight.rs:125:31: 125:46
        StorageLive(_42);                // scope 20 at src\cryptonight.rs:125:31: 125:41
        _42 = _34;                       // scope 20 at src\cryptonight.rs:125:31: 125:41
        StorageLive(_43);                // scope 20 at src\cryptonight.rs:125:44: 125:46
        _43 = _19;                       // scope 20 at src\cryptonight.rs:125:44: 125:46
        _41 = Lt(_42, _43);              // scope 20 at src\cryptonight.rs:125:31: 125:46
        StorageDead(_43);                // scope 20 at src\cryptonight.rs:125:46: 125:46
        StorageDead(_42);                // scope 20 at src\cryptonight.rs:125:46: 125:46
        switchInt(_41) -> [0u8: bb13, otherwise: bb12]; // scope 20 at src\cryptonight.rs:125:28: 125:63
    }

    bb12: {                             
        _40 = const 1u64;                // scope 20 at src\cryptonight.rs:125:49: 125:50
        goto -> bb14;                    // scope 20 at src\cryptonight.rs:125:28: 125:63
    }

    bb13: {                             
        _40 = const 0u64;                // scope 20 at src\cryptonight.rs:125:60: 125:61
        goto -> bb14;                    // scope 20 at src\cryptonight.rs:125:28: 125:63
    }

    bb14: {                             
        StorageDead(_41);                // scope 20 at src\cryptonight.rs:125:63: 125:63
        StorageLive(_44);                // scope 20 at src\cryptonight.rs:126:19: 126:62
        StorageLive(_45);                // scope 20 at src\cryptonight.rs:126:19: 126:41
        StorageLive(_46);                // scope 20 at src\cryptonight.rs:126:19: 126:26
        StorageLive(_47);                // scope 20 at src\cryptonight.rs:126:20: 126:21
        _47 = _5;                        // scope 20 at src\cryptonight.rs:126:20: 126:21
        StorageLive(_48);                // scope 20 at src\cryptonight.rs:126:24: 126:25
        _48 = _10;                       // scope 20 at src\cryptonight.rs:126:24: 126:25
        _49 = CheckedMul(_47, _48);      // scope 20 at src\cryptonight.rs:126:19: 126:26
        assert(!(_49.1: bool), "attempt to multiply with overflow") -> bb15; // scope 20 at src\cryptonight.rs:126:19: 126:26
    }

    bb15: {                             
        _46 = (_49.0: u64);              // scope 20 at src\cryptonight.rs:126:19: 126:26
        StorageDead(_48);                // scope 20 at src\cryptonight.rs:126:26: 126:26
        StorageDead(_47);                // scope 20 at src\cryptonight.rs:126:26: 126:26
        StorageLive(_50);                // scope 20 at src\cryptonight.rs:126:29: 126:41
        StorageLive(_51);                // scope 20 at src\cryptonight.rs:126:30: 126:34
        _51 = _23;                       // scope 20 at src\cryptonight.rs:126:30: 126:34
        _52 = CheckedShr(_51, const 32i32); // scope 20 at src\cryptonight.rs:126:29: 126:41
        assert(!(_52.1: bool), "attempt to shift right with overflow") -> bb16; // scope 20 at src\cryptonight.rs:126:29: 126:41
    }

    bb16: {                             
        _50 = (_52.0: u64);              // scope 20 at src\cryptonight.rs:126:29: 126:41
        StorageDead(_51);                // scope 20 at src\cryptonight.rs:126:41: 126:41
        _53 = CheckedAdd(_46, _50);      // scope 20 at src\cryptonight.rs:126:19: 126:41
        assert(!(_53.1: bool), "attempt to add with overflow") -> bb17; // scope 20 at src\cryptonight.rs:126:19: 126:41
    }

    bb17: {                             
        _45 = (_53.0: u64);              // scope 20 at src\cryptonight.rs:126:19: 126:41
        StorageDead(_50);                // scope 20 at src\cryptonight.rs:126:41: 126:41
        StorageDead(_46);                // scope 20 at src\cryptonight.rs:126:41: 126:41
        StorageLive(_54);                // scope 20 at src\cryptonight.rs:126:44: 126:62
        StorageLive(_55);                // scope 20 at src\cryptonight.rs:126:45: 126:55
        _55 = _30;                       // scope 20 at src\cryptonight.rs:126:45: 126:55
        _56 = CheckedShl(_55, const 32i32); // scope 20 at src\cryptonight.rs:126:44: 126:62
        assert(!(_56.1: bool), "attempt to shift left with overflow") -> bb18; // scope 20 at src\cryptonight.rs:126:44: 126:62
    }

    bb18: {                             
        _54 = (_56.0: u64);              // scope 20 at src\cryptonight.rs:126:44: 126:62
        StorageDead(_55);                // scope 20 at src\cryptonight.rs:126:62: 126:62
        _57 = CheckedAdd(_45, _54);      // scope 20 at src\cryptonight.rs:126:19: 126:62
        assert(!(_57.1: bool), "attempt to add with overflow") -> bb19; // scope 20 at src\cryptonight.rs:126:19: 126:62
    }

    bb19: {                             
        _44 = (_57.0: u64);              // scope 20 at src\cryptonight.rs:126:19: 126:62
        StorageDead(_54);                // scope 20 at src\cryptonight.rs:126:62: 126:62
        StorageDead(_45);                // scope 20 at src\cryptonight.rs:126:62: 126:62
        StorageLive(_58);                // scope 20 at src\cryptonight.rs:126:65: 126:81
        _58 = _40;                       // scope 20 at src\cryptonight.rs:126:65: 126:81
        _59 = CheckedAdd(_44, _58);      // scope 20 at src\cryptonight.rs:126:19: 126:81
        assert(!(_59.1: bool), "attempt to add with overflow") -> bb20; // scope 20 at src\cryptonight.rs:126:19: 126:81
    }

    bb20: {                             
        (*_4) = (_59.0: u64);            // scope 20 at src\cryptonight.rs:126:5: 126:81
        StorageDead(_58);                // scope 20 at src\cryptonight.rs:126:81: 126:81
        StorageDead(_44);                // scope 20 at src\cryptonight.rs:126:81: 126:81
        StorageLive(_60);                // scope 20 at src\cryptonight.rs:127:5: 127:15
        _60 = _34;                       // scope 20 at src\cryptonight.rs:127:5: 127:15
        _0 = _60;                        // scope 20 at src\cryptonight.rs:127:5: 127:15
        StorageDead(_60);                // scope 20 at src\cryptonight.rs:127:15: 127:15
        StorageDead(_40);                // scope 18 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_34);                // scope 16 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_30);                // scope 14 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_23);                // scope 12 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_19);                // scope 10 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_15);                // scope 8 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_13);                // scope 6 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_10);                // scope 4 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_8);                 // scope 2 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_5);                 // scope 1 at src\cryptonight.rs:128:2: 128:2
        StorageDead(_4);                 // scope 0 at src\cryptonight.rs:128:2: 128:2
        return;                          // scope 0 at src\cryptonight.rs:128:2: 128:2
    }
}

const cryptonight::AES_BLOCK_SIZE: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 16usize;              // scope 0 at src\cryptonight.rs:24:35: 24:37
        return;                          // scope 0 at src\cryptonight.rs:24:1: 24:38
    }
}

const cryptonight::CNContext::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const Unevaluated(DefId { krate: CrateNum(0), index: DefIndex(0:42) => cnminer[5424]::cryptonight[0]::AES_BLOCK_SIZE[0] }, Slice([])); // scope 0 at src\cryptonight.rs:60:17: 60:31
        return;                          // scope 0 at src\cryptonight.rs:60:17: 60:31
    }
}

const oaes::OAES_RKEY_LEN: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 4usize;               // scope 0 at src\oaes.rs:14:35: 14:36
        return;                          // scope 0 at src\oaes.rs:14:1: 14:37
    }
}

const oaes::OAES_SUB_BYTE_VALUE::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 16usize;              // scope 0 at src\oaes.rs:23:36: 23:38
        return;                          // scope 0 at src\oaes.rs:23:36: 23:38
    }
}

fn keccak::keccakf(_1: &mut [u64; 25], _2: usize) -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let mut _3: u64;                 // "t" in scope 1 at src\keccak.rs:87:9: 87:14
        scope 3 {
            let mut _4: [u64; 5];        // "bc" in scope 3 at src\keccak.rs:88:9: 88:15
            scope 5 {
                let _5: ();              // "_result" in scope 5 at src\keccak.rs:89:5: 106:6
                scope 7 {
                    let mut _9: std::ops::Range<usize>; // "iter" in scope 7 at src\keccak.rs:89:5: 106:6
                    scope 8 {
                        let mut _11: usize; // "__next" in scope 8 at src\keccak.rs:89:5: 106:6
                        scope 10 {
                            let _15: usize; // "val" in scope 10 at src\keccak.rs:89:5: 106:6
                        }
                        scope 11 {
                            let _18: usize; // "round" in scope 11 at src\keccak.rs:89:9: 89:14
                            scope 13 {
                            }
                        }
                        scope 12 {
                        }
                    }
                    scope 9 {
                    }
                }
            }
            scope 6 {
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }
    let mut _6: std::ops::Range<usize>;
    let mut _7: std::ops::Range<usize>;
    let mut _8: usize;
    let mut _10: ();
    let mut _12: std::option::Option<usize>;
    let mut _13: &mut std::ops::Range<usize>;
    let mut _14: &mut std::ops::Range<usize>;
    let mut _16: isize;
    let mut _17: usize;
    let mut _19: usize;
    let mut _20: ();
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _28: u64;
    let mut _29: &u64;
    let mut _30: &[u64];
    let mut _31: &[u64; 25];
    let mut _32: usize;
    let mut _33: (usize, bool);
    let mut _34: u64;
    let mut _35: &u64;
    let mut _36: &[u64];
    let mut _37: &[u64; 25];
    let mut _38: usize;
    let mut _39: (usize, bool);
    let mut _40: u64;
    let mut _41: &u64;
    let mut _42: &[u64];
    let mut _43: &[u64; 25];
    let mut _44: usize;
    let mut _45: (usize, bool);
    let mut _46: u64;
    let mut _47: &u64;
    let mut _48: &[u64];
    let mut _49: &[u64; 25];
    let mut _50: usize;
    let mut _51: (usize, bool);
    let mut _52: usize;
    let mut _53: usize;
    let mut _54: bool;
    let mut _55: u64;
    let mut _56: u64;
    let mut _57: u64;
    let mut _58: u64;
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: bool;
    let mut _62: u64;
    let mut _63: &u64;
    let mut _64: &[u64];
    let mut _65: &[u64; 25];
    let mut _66: usize;
    let mut _67: (usize, bool);
    let mut _68: u64;
    let mut _69: &u64;
    let mut _70: &[u64];
    let mut _71: &[u64; 25];
    let mut _72: usize;
    let mut _73: (usize, bool);
    let mut _74: u64;
    let mut _75: &u64;
    let mut _76: &[u64];
    let mut _77: &[u64; 25];
    let mut _78: usize;
    let mut _79: (usize, bool);
    let mut _80: u64;
    let mut _81: &u64;
    let mut _82: &[u64];
    let mut _83: &[u64; 25];
    let mut _84: usize;
    let mut _85: (usize, bool);
    let mut _86: usize;
    let mut _87: usize;
    let mut _88: bool;
    let mut _89: u64;
    let mut _90: u64;
    let mut _91: u64;
    let mut _92: u64;
    let mut _93: usize;
    let mut _94: usize;
    let mut _95: bool;
    let mut _96: u64;
    let mut _97: &u64;
    let mut _98: &[u64];
    let mut _99: &[u64; 25];
    let mut _100: usize;
    let mut _101: (usize, bool);
    let mut _102: u64;
    let mut _103: &u64;
    let mut _104: &[u64];
    let mut _105: &[u64; 25];
    let mut _106: usize;
    let mut _107: (usize, bool);
    let mut _108: u64;
    let mut _109: &u64;
    let mut _110: &[u64];
    let mut _111: &[u64; 25];
    let mut _112: usize;
    let mut _113: (usize, bool);
    let mut _114: u64;
    let mut _115: &u64;
    let mut _116: &[u64];
    let mut _117: &[u64; 25];
    let mut _118: usize;
    let mut _119: (usize, bool);
    let mut _120: usize;
    let mut _121: usize;
    let mut _122: bool;
    let mut _123: u64;
    let mut _124: u64;
    let mut _125: u64;
    let mut _126: u64;
    let mut _127: usize;
    let mut _128: usize;
    let mut _129: bool;
    let mut _130: u64;
    let mut _131: &u64;
    let mut _132: &[u64];
    let mut _133: &[u64; 25];
    let mut _134: usize;
    let mut _135: (usize, bool);
    let mut _136: u64;
    let mut _137: &u64;
    let mut _138: &[u64];
    let mut _139: &[u64; 25];
    let mut _140: usize;
    let mut _141: (usize, bool);
    let mut _142: u64;
    let mut _143: &u64;
    let mut _144: &[u64];
    let mut _145: &[u64; 25];
    let mut _146: usize;
    let mut _147: (usize, bool);
    let mut _148: u64;
    let mut _149: &u64;
    let mut _150: &[u64];
    let mut _151: &[u64; 25];
    let mut _152: usize;
    let mut _153: (usize, bool);
    let mut _154: usize;
    let mut _155: usize;
    let mut _156: bool;
    let mut _157: u64;
    let mut _158: u64;
    let mut _159: u64;
    let mut _160: u64;
    let mut _161: usize;
    let mut _162: usize;
    let mut _163: bool;
    let mut _164: u64;
    let mut _165: &u64;
    let mut _166: &[u64];
    let mut _167: &[u64; 25];
    let mut _168: usize;
    let mut _169: (usize, bool);
    let mut _170: u64;
    let mut _171: &u64;
    let mut _172: &[u64];
    let mut _173: &[u64; 25];
    let mut _174: usize;
    let mut _175: (usize, bool);
    let mut _176: u64;
    let mut _177: &u64;
    let mut _178: &[u64];
    let mut _179: &[u64; 25];
    let mut _180: usize;
    let mut _181: (usize, bool);
    let mut _182: u64;
    let mut _183: &u64;
    let mut _184: &[u64];
    let mut _185: &[u64; 25];
    let mut _186: usize;
    let mut _187: (usize, bool);
    let mut _188: usize;
    let mut _189: usize;
    let mut _190: bool;
    let mut _191: u64;
    let mut _192: &u64;
    let mut _193: &[u64];
    let mut _194: &[u64; 5];
    let mut _195: usize;
    let mut _196: usize;
    let mut _197: (usize, bool);
    let mut _198: bool;
    let mut _199: u64;
    let mut _200: u64;
    let mut _201: u64;
    let mut _202: &u64;
    let mut _203: &[u64];
    let mut _204: &[u64; 5];
    let mut _205: usize;
    let mut _206: usize;
    let mut _207: (usize, bool);
    let mut _208: bool;
    let mut _209: (u64, bool);
    let mut _210: u64;
    let mut _211: u64;
    let mut _212: &u64;
    let mut _213: &[u64];
    let mut _214: &[u64; 5];
    let mut _215: usize;
    let mut _216: usize;
    let mut _217: (usize, bool);
    let mut _218: bool;
    let mut _219: i32;
    let mut _220: (i32, bool);
    let mut _221: (u64, bool);
    let mut _222: u64;
    let mut _223: usize;
    let mut _224: usize;
    let mut _225: bool;
    let mut _226: u64;
    let mut _227: &mut u64;
    let mut _228: &mut [u64];
    let mut _229: &mut [u64; 25];
    let mut _230: usize;
    let mut _231: (usize, bool);
    let mut _232: u64;
    let mut _233: &mut u64;
    let mut _234: &mut [u64];
    let mut _235: &mut [u64; 25];
    let mut _236: usize;
    let mut _237: (usize, bool);
    let mut _238: u64;
    let mut _239: &mut u64;
    let mut _240: &mut [u64];
    let mut _241: &mut [u64; 25];
    let mut _242: usize;
    let mut _243: (usize, bool);
    let mut _244: u64;
    let mut _245: &mut u64;
    let mut _246: &mut [u64];
    let mut _247: &mut [u64; 25];
    let mut _248: usize;
    let mut _249: (usize, bool);
    let mut _250: u64;
    let mut _251: &u64;
    let mut _252: &[u64];
    let mut _253: &[u64; 5];
    let mut _254: usize;
    let mut _255: usize;
    let mut _256: (usize, bool);
    let mut _257: bool;
    let mut _258: u64;
    let mut _259: u64;
    let mut _260: u64;
    let mut _261: &u64;
    let mut _262: &[u64];
    let mut _263: &[u64; 5];
    let mut _264: usize;
    let mut _265: usize;
    let mut _266: (usize, bool);
    let mut _267: bool;
    let mut _268: (u64, bool);
    let mut _269: u64;
    let mut _270: u64;
    let mut _271: &u64;
    let mut _272: &[u64];
    let mut _273: &[u64; 5];
    let mut _274: usize;
    let mut _275: usize;
    let mut _276: (usize, bool);
    let mut _277: bool;
    let mut _278: i32;
    let mut _279: (i32, bool);
    let mut _280: (u64, bool);
    let mut _281: u64;
    let mut _282: usize;
    let mut _283: usize;
    let mut _284: bool;
    let mut _285: u64;
    let mut _286: &mut u64;
    let mut _287: &mut [u64];
    let mut _288: &mut [u64; 25];
    let mut _289: usize;
    let mut _290: (usize, bool);
    let mut _291: u64;
    let mut _292: &mut u64;
    let mut _293: &mut [u64];
    let mut _294: &mut [u64; 25];
    let mut _295: usize;
    let mut _296: (usize, bool);
    let mut _297: u64;
    let mut _298: &mut u64;
    let mut _299: &mut [u64];
    let mut _300: &mut [u64; 25];
    let mut _301: usize;
    let mut _302: (usize, bool);
    let mut _303: u64;
    let mut _304: &mut u64;
    let mut _305: &mut [u64];
    let mut _306: &mut [u64; 25];
    let mut _307: usize;
    let mut _308: (usize, bool);
    let mut _309: u64;
    let mut _310: &u64;
    let mut _311: &[u64];
    let mut _312: &[u64; 5];
    let mut _313: usize;
    let mut _314: usize;
    let mut _315: (usize, bool);
    let mut _316: bool;
    let mut _317: u64;
    let mut _318: u64;
    let mut _319: u64;
    let mut _320: &u64;
    let mut _321: &[u64];
    let mut _322: &[u64; 5];
    let mut _323: usize;
    let mut _324: usize;
    let mut _325: (usize, bool);
    let mut _326: bool;
    let mut _327: (u64, bool);
    let mut _328: u64;
    let mut _329: u64;
    let mut _330: &u64;
    let mut _331: &[u64];
    let mut _332: &[u64; 5];
    let mut _333: usize;
    let mut _334: usize;
    let mut _335: (usize, bool);
    let mut _336: bool;
    let mut _337: i32;
    let mut _338: (i32, bool);
    let mut _339: (u64, bool);
    let mut _340: u64;
    let mut _341: usize;
    let mut _342: usize;
    let mut _343: bool;
    let mut _344: u64;
    let mut _345: &mut u64;
    let mut _346: &mut [u64];
    let mut _347: &mut [u64; 25];
    let mut _348: usize;
    let mut _349: (usize, bool);
    let mut _350: u64;
    let mut _351: &mut u64;
    let mut _352: &mut [u64];
    let mut _353: &mut [u64; 25];
    let mut _354: usize;
    let mut _355: (usize, bool);
    let mut _356: u64;
    let mut _357: &mut u64;
    let mut _358: &mut [u64];
    let mut _359: &mut [u64; 25];
    let mut _360: usize;
    let mut _361: (usize, bool);
    let mut _362: u64;
    let mut _363: &mut u64;
    let mut _364: &mut [u64];
    let mut _365: &mut [u64; 25];
    let mut _366: usize;
    let mut _367: (usize, bool);
    let mut _368: u64;
    let mut _369: &u64;
    let mut _370: &[u64];
    let mut _371: &[u64; 5];
    let mut _372: usize;
    let mut _373: usize;
    let mut _374: (usize, bool);
    let mut _375: bool;
    let mut _376: u64;
    let mut _377: u64;
    let mut _378: u64;
    let mut _379: &u64;
    let mut _380: &[u64];
    let mut _381: &[u64; 5];
    let mut _382: usize;
    let mut _383: usize;
    let mut _384: (usize, bool);
    let mut _385: bool;
    let mut _386: (u64, bool);
    let mut _387: u64;
    let mut _388: u64;
    let mut _389: &u64;
    let mut _390: &[u64];
    let mut _391: &[u64; 5];
    let mut _392: usize;
    let mut _393: usize;
    let mut _394: (usize, bool);
    let mut _395: bool;
    let mut _396: i32;
    let mut _397: (i32, bool);
    let mut _398: (u64, bool);
    let mut _399: u64;
    let mut _400: usize;
    let mut _401: usize;
    let mut _402: bool;
    let mut _403: u64;
    let mut _404: &mut u64;
    let mut _405: &mut [u64];
    let mut _406: &mut [u64; 25];
    let mut _407: usize;
    let mut _408: (usize, bool);
    let mut _409: u64;
    let mut _410: &mut u64;
    let mut _411: &mut [u64];
    let mut _412: &mut [u64; 25];
    let mut _413: usize;
    let mut _414: (usize, bool);
    let mut _415: u64;
    let mut _416: &mut u64;
    let mut _417: &mut [u64];
    let mut _418: &mut [u64; 25];
    let mut _419: usize;
    let mut _420: (usize, bool);
    let mut _421: u64;
    let mut _422: &mut u64;
    let mut _423: &mut [u64];
    let mut _424: &mut [u64; 25];
    let mut _425: usize;
    let mut _426: (usize, bool);
    let mut _427: u64;
    let mut _428: &u64;
    let mut _429: &[u64];
    let mut _430: &[u64; 5];
    let mut _431: usize;
    let mut _432: usize;
    let mut _433: (usize, bool);
    let mut _434: bool;
    let mut _435: u64;
    let mut _436: u64;
    let mut _437: u64;
    let mut _438: &u64;
    let mut _439: &[u64];
    let mut _440: &[u64; 5];
    let mut _441: usize;
    let mut _442: usize;
    let mut _443: (usize, bool);
    let mut _444: bool;
    let mut _445: (u64, bool);
    let mut _446: u64;
    let mut _447: u64;
    let mut _448: &u64;
    let mut _449: &[u64];
    let mut _450: &[u64; 5];
    let mut _451: usize;
    let mut _452: usize;
    let mut _453: (usize, bool);
    let mut _454: bool;
    let mut _455: i32;
    let mut _456: (i32, bool);
    let mut _457: (u64, bool);
    let mut _458: u64;
    let mut _459: usize;
    let mut _460: usize;
    let mut _461: bool;
    let mut _462: u64;
    let mut _463: &mut u64;
    let mut _464: &mut [u64];
    let mut _465: &mut [u64; 25];
    let mut _466: usize;
    let mut _467: (usize, bool);
    let mut _468: u64;
    let mut _469: &mut u64;
    let mut _470: &mut [u64];
    let mut _471: &mut [u64; 25];
    let mut _472: usize;
    let mut _473: (usize, bool);
    let mut _474: u64;
    let mut _475: &mut u64;
    let mut _476: &mut [u64];
    let mut _477: &mut [u64; 25];
    let mut _478: usize;
    let mut _479: (usize, bool);
    let mut _480: u64;
    let mut _481: &mut u64;
    let mut _482: &mut [u64];
    let mut _483: &mut [u64; 25];
    let mut _484: usize;
    let mut _485: (usize, bool);
    let mut _486: u64;
    let mut _487: usize;
    let mut _488: usize;
    let mut _489: bool;
    let mut _490: ();
    let mut _491: u64;
    let mut _492: &u64;
    let mut _493: &[u64];
    let mut _494: &[u64; 25];
    let mut _495: usize;
    let mut _496: &usize;
    let mut _497: &[usize];
    let mut _498: &[usize; 24];
    let mut _499: usize;
    let mut _500: (usize, bool);
    let mut _501: usize;
    let mut _502: usize;
    let mut _503: bool;
    let mut _504: u64;
    let mut _505: u64;
    let mut _506: i32;
    let mut _507: &i32;
    let mut _508: &[i32];
    let mut _509: &[i32; 24];
    let mut _510: usize;
    let mut _511: (usize, bool);
    let mut _512: (u64, bool);
    let mut _513: u64;
    let mut _514: u64;
    let mut _515: i32;
    let mut _516: i32;
    let mut _517: &i32;
    let mut _518: &[i32];
    let mut _519: &[i32; 24];
    let mut _520: usize;
    let mut _521: (usize, bool);
    let mut _522: (i32, bool);
    let mut _523: (u64, bool);
    let mut _524: &mut u64;
    let mut _525: &mut [u64];
    let mut _526: &mut [u64; 25];
    let mut _527: usize;
    let mut _528: &usize;
    let mut _529: &[usize];
    let mut _530: &[usize; 24];
    let mut _531: usize;
    let mut _532: (usize, bool);
    let mut _533: u64;
    let mut _534: usize;
    let mut _535: usize;
    let mut _536: bool;
    let mut _537: u64;
    let mut _538: &u64;
    let mut _539: &[u64];
    let mut _540: &[u64; 25];
    let mut _541: usize;
    let mut _542: &usize;
    let mut _543: &[usize];
    let mut _544: &[usize; 24];
    let mut _545: usize;
    let mut _546: (usize, bool);
    let mut _547: usize;
    let mut _548: usize;
    let mut _549: bool;
    let mut _550: u64;
    let mut _551: u64;
    let mut _552: i32;
    let mut _553: &i32;
    let mut _554: &[i32];
    let mut _555: &[i32; 24];
    let mut _556: usize;
    let mut _557: (usize, bool);
    let mut _558: (u64, bool);
    let mut _559: u64;
    let mut _560: u64;
    let mut _561: i32;
    let mut _562: i32;
    let mut _563: &i32;
    let mut _564: &[i32];
    let mut _565: &[i32; 24];
    let mut _566: usize;
    let mut _567: (usize, bool);
    let mut _568: (i32, bool);
    let mut _569: (u64, bool);
    let mut _570: &mut u64;
    let mut _571: &mut [u64];
    let mut _572: &mut [u64; 25];
    let mut _573: usize;
    let mut _574: &usize;
    let mut _575: &[usize];
    let mut _576: &[usize; 24];
    let mut _577: usize;
    let mut _578: (usize, bool);
    let mut _579: u64;
    let mut _580: usize;
    let mut _581: usize;
    let mut _582: bool;
    let mut _583: u64;
    let mut _584: &u64;
    let mut _585: &[u64];
    let mut _586: &[u64; 25];
    let mut _587: usize;
    let mut _588: &usize;
    let mut _589: &[usize];
    let mut _590: &[usize; 24];
    let mut _591: usize;
    let mut _592: (usize, bool);
    let mut _593: usize;
    let mut _594: usize;
    let mut _595: bool;
    let mut _596: u64;
    let mut _597: u64;
    let mut _598: i32;
    let mut _599: &i32;
    let mut _600: &[i32];
    let mut _601: &[i32; 24];
    let mut _602: usize;
    let mut _603: (usize, bool);
    let mut _604: (u64, bool);
    let mut _605: u64;
    let mut _606: u64;
    let mut _607: i32;
    let mut _608: i32;
    let mut _609: &i32;
    let mut _610: &[i32];
    let mut _611: &[i32; 24];
    let mut _612: usize;
    let mut _613: (usize, bool);
    let mut _614: (i32, bool);
    let mut _615: (u64, bool);
    let mut _616: &mut u64;
    let mut _617: &mut [u64];
    let mut _618: &mut [u64; 25];
    let mut _619: usize;
    let mut _620: &usize;
    let mut _621: &[usize];
    let mut _622: &[usize; 24];
    let mut _623: usize;
    let mut _624: (usize, bool);
    let mut _625: u64;
    let mut _626: usize;
    let mut _627: usize;
    let mut _628: bool;
    let mut _629: u64;
    let mut _630: &u64;
    let mut _631: &[u64];
    let mut _632: &[u64; 25];
    let mut _633: usize;
    let mut _634: &usize;
    let mut _635: &[usize];
    let mut _636: &[usize; 24];
    let mut _637: usize;
    let mut _638: (usize, bool);
    let mut _639: usize;
    let mut _640: usize;
    let mut _641: bool;
    let mut _642: u64;
    let mut _643: u64;
    let mut _644: i32;
    let mut _645: &i32;
    let mut _646: &[i32];
    let mut _647: &[i32; 24];
    let mut _648: usize;
    let mut _649: (usize, bool);
    let mut _650: (u64, bool);
    let mut _651: u64;
    let mut _652: u64;
    let mut _653: i32;
    let mut _654: i32;
    let mut _655: &i32;
    let mut _656: &[i32];
    let mut _657: &[i32; 24];
    let mut _658: usize;
    let mut _659: (usize, bool);
    let mut _660: (i32, bool);
    let mut _661: (u64, bool);
    let mut _662: &mut u64;
    let mut _663: &mut [u64];
    let mut _664: &mut [u64; 25];
    let mut _665: usize;
    let mut _666: &usize;
    let mut _667: &[usize];
    let mut _668: &[usize; 24];
    let mut _669: usize;
    let mut _670: (usize, bool);
    let mut _671: u64;
    let mut _672: usize;
    let mut _673: usize;
    let mut _674: bool;
    let mut _675: u64;
    let mut _676: &u64;
    let mut _677: &[u64];
    let mut _678: &[u64; 25];
    let mut _679: usize;
    let mut _680: &usize;
    let mut _681: &[usize];
    let mut _682: &[usize; 24];
    let mut _683: usize;
    let mut _684: (usize, bool);
    let mut _685: usize;
    let mut _686: usize;
    let mut _687: bool;
    let mut _688: u64;
    let mut _689: u64;
    let mut _690: i32;
    let mut _691: &i32;
    let mut _692: &[i32];
    let mut _693: &[i32; 24];
    let mut _694: usize;
    let mut _695: (usize, bool);
    let mut _696: (u64, bool);
    let mut _697: u64;
    let mut _698: u64;
    let mut _699: i32;
    let mut _700: i32;
    let mut _701: &i32;
    let mut _702: &[i32];
    let mut _703: &[i32; 24];
    let mut _704: usize;
    let mut _705: (usize, bool);
    let mut _706: (i32, bool);
    let mut _707: (u64, bool);
    let mut _708: &mut u64;
    let mut _709: &mut [u64];
    let mut _710: &mut [u64; 25];
    let mut _711: usize;
    let mut _712: &usize;
    let mut _713: &[usize];
    let mut _714: &[usize; 24];
    let mut _715: usize;
    let mut _716: (usize, bool);
    let mut _717: u64;
    let mut _718: usize;
    let mut _719: usize;
    let mut _720: bool;
    let mut _721: u64;
    let mut _722: &u64;
    let mut _723: &[u64];
    let mut _724: &[u64; 25];
    let mut _725: usize;
    let mut _726: &usize;
    let mut _727: &[usize];
    let mut _728: &[usize; 24];
    let mut _729: usize;
    let mut _730: (usize, bool);
    let mut _731: usize;
    let mut _732: usize;
    let mut _733: bool;
    let mut _734: u64;
    let mut _735: u64;
    let mut _736: i32;
    let mut _737: &i32;
    let mut _738: &[i32];
    let mut _739: &[i32; 24];
    let mut _740: usize;
    let mut _741: (usize, bool);
    let mut _742: (u64, bool);
    let mut _743: u64;
    let mut _744: u64;
    let mut _745: i32;
    let mut _746: i32;
    let mut _747: &i32;
    let mut _748: &[i32];
    let mut _749: &[i32; 24];
    let mut _750: usize;
    let mut _751: (usize, bool);
    let mut _752: (i32, bool);
    let mut _753: (u64, bool);
    let mut _754: &mut u64;
    let mut _755: &mut [u64];
    let mut _756: &mut [u64; 25];
    let mut _757: usize;
    let mut _758: &usize;
    let mut _759: &[usize];
    let mut _760: &[usize; 24];
    let mut _761: usize;
    let mut _762: (usize, bool);
    let mut _763: u64;
    let mut _764: usize;
    let mut _765: usize;
    let mut _766: bool;
    let mut _767: u64;
    let mut _768: &u64;
    let mut _769: &[u64];
    let mut _770: &[u64; 25];
    let mut _771: usize;
    let mut _772: &usize;
    let mut _773: &[usize];
    let mut _774: &[usize; 24];
    let mut _775: usize;
    let mut _776: (usize, bool);
    let mut _777: usize;
    let mut _778: usize;
    let mut _779: bool;
    let mut _780: u64;
    let mut _781: u64;
    let mut _782: i32;
    let mut _783: &i32;
    let mut _784: &[i32];
    let mut _785: &[i32; 24];
    let mut _786: usize;
    let mut _787: (usize, bool);
    let mut _788: (u64, bool);
    let mut _789: u64;
    let mut _790: u64;
    let mut _791: i32;
    let mut _792: i32;
    let mut _793: &i32;
    let mut _794: &[i32];
    let mut _795: &[i32; 24];
    let mut _796: usize;
    let mut _797: (usize, bool);
    let mut _798: (i32, bool);
    let mut _799: (u64, bool);
    let mut _800: &mut u64;
    let mut _801: &mut [u64];
    let mut _802: &mut [u64; 25];
    let mut _803: usize;
    let mut _804: &usize;
    let mut _805: &[usize];
    let mut _806: &[usize; 24];
    let mut _807: usize;
    let mut _808: (usize, bool);
    let mut _809: u64;
    let mut _810: usize;
    let mut _811: usize;
    let mut _812: bool;
    let mut _813: u64;
    let mut _814: &u64;
    let mut _815: &[u64];
    let mut _816: &[u64; 25];
    let mut _817: usize;
    let mut _818: &usize;
    let mut _819: &[usize];
    let mut _820: &[usize; 24];
    let mut _821: usize;
    let mut _822: (usize, bool);
    let mut _823: usize;
    let mut _824: usize;
    let mut _825: bool;
    let mut _826: u64;
    let mut _827: u64;
    let mut _828: i32;
    let mut _829: &i32;
    let mut _830: &[i32];
    let mut _831: &[i32; 24];
    let mut _832: usize;
    let mut _833: (usize, bool);
    let mut _834: (u64, bool);
    let mut _835: u64;
    let mut _836: u64;
    let mut _837: i32;
    let mut _838: i32;
    let mut _839: &i32;
    let mut _840: &[i32];
    let mut _841: &[i32; 24];
    let mut _842: usize;
    let mut _843: (usize, bool);
    let mut _844: (i32, bool);
    let mut _845: (u64, bool);
    let mut _846: &mut u64;
    let mut _847: &mut [u64];
    let mut _848: &mut [u64; 25];
    let mut _849: usize;
    let mut _850: &usize;
    let mut _851: &[usize];
    let mut _852: &[usize; 24];
    let mut _853: usize;
    let mut _854: (usize, bool);
    let mut _855: u64;
    let mut _856: usize;
    let mut _857: usize;
    let mut _858: bool;
    let mut _859: u64;
    let mut _860: &u64;
    let mut _861: &[u64];
    let mut _862: &[u64; 25];
    let mut _863: usize;
    let mut _864: &usize;
    let mut _865: &[usize];
    let mut _866: &[usize; 24];
    let mut _867: usize;
    let mut _868: (usize, bool);
    let mut _869: usize;
    let mut _870: usize;
    let mut _871: bool;
    let mut _872: u64;
    let mut _873: u64;
    let mut _874: i32;
    let mut _875: &i32;
    let mut _876: &[i32];
    let mut _877: &[i32; 24];
    let mut _878: usize;
    let mut _879: (usize, bool);
    let mut _880: (u64, bool);
    let mut _881: u64;
    let mut _882: u64;
    let mut _883: i32;
    let mut _884: i32;
    let mut _885: &i32;
    let mut _886: &[i32];
    let mut _887: &[i32; 24];
    let mut _888: usize;
    let mut _889: (usize, bool);
    let mut _890: (i32, bool);
    let mut _891: (u64, bool);
    let mut _892: &mut u64;
    let mut _893: &mut [u64];
    let mut _894: &mut [u64; 25];
    let mut _895: usize;
    let mut _896: &usize;
    let mut _897: &[usize];
    let mut _898: &[usize; 24];
    let mut _899: usize;
    let mut _900: (usize, bool);
    let mut _901: u64;
    let mut _902: usize;
    let mut _903: usize;
    let mut _904: bool;
    let mut _905: u64;
    let mut _906: &u64;
    let mut _907: &[u64];
    let mut _908: &[u64; 25];
    let mut _909: usize;
    let mut _910: &usize;
    let mut _911: &[usize];
    let mut _912: &[usize; 24];
    let mut _913: usize;
    let mut _914: (usize, bool);
    let mut _915: usize;
    let mut _916: usize;
    let mut _917: bool;
    let mut _918: u64;
    let mut _919: u64;
    let mut _920: i32;
    let mut _921: &i32;
    let mut _922: &[i32];
    let mut _923: &[i32; 24];
    let mut _924: usize;
    let mut _925: (usize, bool);
    let mut _926: (u64, bool);
    let mut _927: u64;
    let mut _928: u64;
    let mut _929: i32;
    let mut _930: i32;
    let mut _931: &i32;
    let mut _932: &[i32];
    let mut _933: &[i32; 24];
    let mut _934: usize;
    let mut _935: (usize, bool);
    let mut _936: (i32, bool);
    let mut _937: (u64, bool);
    let mut _938: &mut u64;
    let mut _939: &mut [u64];
    let mut _940: &mut [u64; 25];
    let mut _941: usize;
    let mut _942: &usize;
    let mut _943: &[usize];
    let mut _944: &[usize; 24];
    let mut _945: usize;
    let mut _946: (usize, bool);
    let mut _947: u64;
    let mut _948: usize;
    let mut _949: usize;
    let mut _950: bool;
    let mut _951: u64;
    let mut _952: &u64;
    let mut _953: &[u64];
    let mut _954: &[u64; 25];
    let mut _955: usize;
    let mut _956: &usize;
    let mut _957: &[usize];
    let mut _958: &[usize; 24];
    let mut _959: usize;
    let mut _960: (usize, bool);
    let mut _961: usize;
    let mut _962: usize;
    let mut _963: bool;
    let mut _964: u64;
    let mut _965: u64;
    let mut _966: i32;
    let mut _967: &i32;
    let mut _968: &[i32];
    let mut _969: &[i32; 24];
    let mut _970: usize;
    let mut _971: (usize, bool);
    let mut _972: (u64, bool);
    let mut _973: u64;
    let mut _974: u64;
    let mut _975: i32;
    let mut _976: i32;
    let mut _977: &i32;
    let mut _978: &[i32];
    let mut _979: &[i32; 24];
    let mut _980: usize;
    let mut _981: (usize, bool);
    let mut _982: (i32, bool);
    let mut _983: (u64, bool);
    let mut _984: &mut u64;
    let mut _985: &mut [u64];
    let mut _986: &mut [u64; 25];
    let mut _987: usize;
    let mut _988: &usize;
    let mut _989: &[usize];
    let mut _990: &[usize; 24];
    let mut _991: usize;
    let mut _992: (usize, bool);
    let mut _993: u64;
    let mut _994: usize;
    let mut _995: usize;
    let mut _996: bool;
    let mut _997: u64;
    let mut _998: &u64;
    let mut _999: &[u64];
    let mut _1000: &[u64; 25];
    let mut _1001: usize;
    let mut _1002: &usize;
    let mut _1003: &[usize];
    let mut _1004: &[usize; 24];
    let mut _1005: usize;
    let mut _1006: (usize, bool);
    let mut _1007: usize;
    let mut _1008: usize;
    let mut _1009: bool;
    let mut _1010: u64;
    let mut _1011: u64;
    let mut _1012: i32;
    let mut _1013: &i32;
    let mut _1014: &[i32];
    let mut _1015: &[i32; 24];
    let mut _1016: usize;
    let mut _1017: (usize, bool);
    let mut _1018: (u64, bool);
    let mut _1019: u64;
    let mut _1020: u64;
    let mut _1021: i32;
    let mut _1022: i32;
    let mut _1023: &i32;
    let mut _1024: &[i32];
    let mut _1025: &[i32; 24];
    let mut _1026: usize;
    let mut _1027: (usize, bool);
    let mut _1028: (i32, bool);
    let mut _1029: (u64, bool);
    let mut _1030: &mut u64;
    let mut _1031: &mut [u64];
    let mut _1032: &mut [u64; 25];
    let mut _1033: usize;
    let mut _1034: &usize;
    let mut _1035: &[usize];
    let mut _1036: &[usize; 24];
    let mut _1037: usize;
    let mut _1038: (usize, bool);
    let mut _1039: u64;
    let mut _1040: usize;
    let mut _1041: usize;
    let mut _1042: bool;
    let mut _1043: u64;
    let mut _1044: &u64;
    let mut _1045: &[u64];
    let mut _1046: &[u64; 25];
    let mut _1047: usize;
    let mut _1048: &usize;
    let mut _1049: &[usize];
    let mut _1050: &[usize; 24];
    let mut _1051: usize;
    let mut _1052: (usize, bool);
    let mut _1053: usize;
    let mut _1054: usize;
    let mut _1055: bool;
    let mut _1056: u64;
    let mut _1057: u64;
    let mut _1058: i32;
    let mut _1059: &i32;
    let mut _1060: &[i32];
    let mut _1061: &[i32; 24];
    let mut _1062: usize;
    let mut _1063: (usize, bool);
    let mut _1064: (u64, bool);
    let mut _1065: u64;
    let mut _1066: u64;
    let mut _1067: i32;
    let mut _1068: i32;
    let mut _1069: &i32;
    let mut _1070: &[i32];
    let mut _1071: &[i32; 24];
    let mut _1072: usize;
    let mut _1073: (usize, bool);
    let mut _1074: (i32, bool);
    let mut _1075: (u64, bool);
    let mut _1076: &mut u64;
    let mut _1077: &mut [u64];
    let mut _1078: &mut [u64; 25];
    let mut _1079: usize;
    let mut _1080: &usize;
    let mut _1081: &[usize];
    let mut _1082: &[usize; 24];
    let mut _1083: usize;
    let mut _1084: (usize, bool);
    let mut _1085: u64;
    let mut _1086: usize;
    let mut _1087: usize;
    let mut _1088: bool;
    let mut _1089: u64;
    let mut _1090: &u64;
    let mut _1091: &[u64];
    let mut _1092: &[u64; 25];
    let mut _1093: usize;
    let mut _1094: &usize;
    let mut _1095: &[usize];
    let mut _1096: &[usize; 24];
    let mut _1097: usize;
    let mut _1098: (usize, bool);
    let mut _1099: usize;
    let mut _1100: usize;
    let mut _1101: bool;
    let mut _1102: u64;
    let mut _1103: u64;
    let mut _1104: i32;
    let mut _1105: &i32;
    let mut _1106: &[i32];
    let mut _1107: &[i32; 24];
    let mut _1108: usize;
    let mut _1109: (usize, bool);
    let mut _1110: (u64, bool);
    let mut _1111: u64;
    let mut _1112: u64;
    let mut _1113: i32;
    let mut _1114: i32;
    let mut _1115: &i32;
    let mut _1116: &[i32];
    let mut _1117: &[i32; 24];
    let mut _1118: usize;
    let mut _1119: (usize, bool);
    let mut _1120: (i32, bool);
    let mut _1121: (u64, bool);
    let mut _1122: &mut u64;
    let mut _1123: &mut [u64];
    let mut _1124: &mut [u64; 25];
    let mut _1125: usize;
    let mut _1126: &usize;
    let mut _1127: &[usize];
    let mut _1128: &[usize; 24];
    let mut _1129: usize;
    let mut _1130: (usize, bool);
    let mut _1131: u64;
    let mut _1132: usize;
    let mut _1133: usize;
    let mut _1134: bool;
    let mut _1135: u64;
    let mut _1136: &u64;
    let mut _1137: &[u64];
    let mut _1138: &[u64; 25];
    let mut _1139: usize;
    let mut _1140: &usize;
    let mut _1141: &[usize];
    let mut _1142: &[usize; 24];
    let mut _1143: usize;
    let mut _1144: (usize, bool);
    let mut _1145: usize;
    let mut _1146: usize;
    let mut _1147: bool;
    let mut _1148: u64;
    let mut _1149: u64;
    let mut _1150: i32;
    let mut _1151: &i32;
    let mut _1152: &[i32];
    let mut _1153: &[i32; 24];
    let mut _1154: usize;
    let mut _1155: (usize, bool);
    let mut _1156: (u64, bool);
    let mut _1157: u64;
    let mut _1158: u64;
    let mut _1159: i32;
    let mut _1160: i32;
    let mut _1161: &i32;
    let mut _1162: &[i32];
    let mut _1163: &[i32; 24];
    let mut _1164: usize;
    let mut _1165: (usize, bool);
    let mut _1166: (i32, bool);
    let mut _1167: (u64, bool);
    let mut _1168: &mut u64;
    let mut _1169: &mut [u64];
    let mut _1170: &mut [u64; 25];
    let mut _1171: usize;
    let mut _1172: &usize;
    let mut _1173: &[usize];
    let mut _1174: &[usize; 24];
    let mut _1175: usize;
    let mut _1176: (usize, bool);
    let mut _1177: u64;
    let mut _1178: usize;
    let mut _1179: usize;
    let mut _1180: bool;
    let mut _1181: u64;
    let mut _1182: &u64;
    let mut _1183: &[u64];
    let mut _1184: &[u64; 25];
    let mut _1185: usize;
    let mut _1186: &usize;
    let mut _1187: &[usize];
    let mut _1188: &[usize; 24];
    let mut _1189: usize;
    let mut _1190: (usize, bool);
    let mut _1191: usize;
    let mut _1192: usize;
    let mut _1193: bool;
    let mut _1194: u64;
    let mut _1195: u64;
    let mut _1196: i32;
    let mut _1197: &i32;
    let mut _1198: &[i32];
    let mut _1199: &[i32; 24];
    let mut _1200: usize;
    let mut _1201: (usize, bool);
    let mut _1202: (u64, bool);
    let mut _1203: u64;
    let mut _1204: u64;
    let mut _1205: i32;
    let mut _1206: i32;
    let mut _1207: &i32;
    let mut _1208: &[i32];
    let mut _1209: &[i32; 24];
    let mut _1210: usize;
    let mut _1211: (usize, bool);
    let mut _1212: (i32, bool);
    let mut _1213: (u64, bool);
    let mut _1214: &mut u64;
    let mut _1215: &mut [u64];
    let mut _1216: &mut [u64; 25];
    let mut _1217: usize;
    let mut _1218: &usize;
    let mut _1219: &[usize];
    let mut _1220: &[usize; 24];
    let mut _1221: usize;
    let mut _1222: (usize, bool);
    let mut _1223: u64;
    let mut _1224: usize;
    let mut _1225: usize;
    let mut _1226: bool;
    let mut _1227: u64;
    let mut _1228: &u64;
    let mut _1229: &[u64];
    let mut _1230: &[u64; 25];
    let mut _1231: usize;
    let mut _1232: &usize;
    let mut _1233: &[usize];
    let mut _1234: &[usize; 24];
    let mut _1235: usize;
    let mut _1236: (usize, bool);
    let mut _1237: usize;
    let mut _1238: usize;
    let mut _1239: bool;
    let mut _1240: u64;
    let mut _1241: u64;
    let mut _1242: i32;
    let mut _1243: &i32;
    let mut _1244: &[i32];
    let mut _1245: &[i32; 24];
    let mut _1246: usize;
    let mut _1247: (usize, bool);
    let mut _1248: (u64, bool);
    let mut _1249: u64;
    let mut _1250: u64;
    let mut _1251: i32;
    let mut _1252: i32;
    let mut _1253: &i32;
    let mut _1254: &[i32];
    let mut _1255: &[i32; 24];
    let mut _1256: usize;
    let mut _1257: (usize, bool);
    let mut _1258: (i32, bool);
    let mut _1259: (u64, bool);
    let mut _1260: &mut u64;
    let mut _1261: &mut [u64];
    let mut _1262: &mut [u64; 25];
    let mut _1263: usize;
    let mut _1264: &usize;
    let mut _1265: &[usize];
    let mut _1266: &[usize; 24];
    let mut _1267: usize;
    let mut _1268: (usize, bool);
    let mut _1269: u64;
    let mut _1270: usize;
    let mut _1271: usize;
    let mut _1272: bool;
    let mut _1273: u64;
    let mut _1274: &u64;
    let mut _1275: &[u64];
    let mut _1276: &[u64; 25];
    let mut _1277: usize;
    let mut _1278: &usize;
    let mut _1279: &[usize];
    let mut _1280: &[usize; 24];
    let mut _1281: usize;
    let mut _1282: (usize, bool);
    let mut _1283: usize;
    let mut _1284: usize;
    let mut _1285: bool;
    let mut _1286: u64;
    let mut _1287: u64;
    let mut _1288: i32;
    let mut _1289: &i32;
    let mut _1290: &[i32];
    let mut _1291: &[i32; 24];
    let mut _1292: usize;
    let mut _1293: (usize, bool);
    let mut _1294: (u64, bool);
    let mut _1295: u64;
    let mut _1296: u64;
    let mut _1297: i32;
    let mut _1298: i32;
    let mut _1299: &i32;
    let mut _1300: &[i32];
    let mut _1301: &[i32; 24];
    let mut _1302: usize;
    let mut _1303: (usize, bool);
    let mut _1304: (i32, bool);
    let mut _1305: (u64, bool);
    let mut _1306: &mut u64;
    let mut _1307: &mut [u64];
    let mut _1308: &mut [u64; 25];
    let mut _1309: usize;
    let mut _1310: &usize;
    let mut _1311: &[usize];
    let mut _1312: &[usize; 24];
    let mut _1313: usize;
    let mut _1314: (usize, bool);
    let mut _1315: u64;
    let mut _1316: usize;
    let mut _1317: usize;
    let mut _1318: bool;
    let mut _1319: u64;
    let mut _1320: &u64;
    let mut _1321: &[u64];
    let mut _1322: &[u64; 25];
    let mut _1323: usize;
    let mut _1324: &usize;
    let mut _1325: &[usize];
    let mut _1326: &[usize; 24];
    let mut _1327: usize;
    let mut _1328: (usize, bool);
    let mut _1329: usize;
    let mut _1330: usize;
    let mut _1331: bool;
    let mut _1332: u64;
    let mut _1333: u64;
    let mut _1334: i32;
    let mut _1335: &i32;
    let mut _1336: &[i32];
    let mut _1337: &[i32; 24];
    let mut _1338: usize;
    let mut _1339: (usize, bool);
    let mut _1340: (u64, bool);
    let mut _1341: u64;
    let mut _1342: u64;
    let mut _1343: i32;
    let mut _1344: i32;
    let mut _1345: &i32;
    let mut _1346: &[i32];
    let mut _1347: &[i32; 24];
    let mut _1348: usize;
    let mut _1349: (usize, bool);
    let mut _1350: (i32, bool);
    let mut _1351: (u64, bool);
    let mut _1352: &mut u64;
    let mut _1353: &mut [u64];
    let mut _1354: &mut [u64; 25];
    let mut _1355: usize;
    let mut _1356: &usize;
    let mut _1357: &[usize];
    let mut _1358: &[usize; 24];
    let mut _1359: usize;
    let mut _1360: (usize, bool);
    let mut _1361: u64;
    let mut _1362: usize;
    let mut _1363: usize;
    let mut _1364: bool;
    let mut _1365: u64;
    let mut _1366: &u64;
    let mut _1367: &[u64];
    let mut _1368: &[u64; 25];
    let mut _1369: usize;
    let mut _1370: &usize;
    let mut _1371: &[usize];
    let mut _1372: &[usize; 24];
    let mut _1373: usize;
    let mut _1374: (usize, bool);
    let mut _1375: usize;
    let mut _1376: usize;
    let mut _1377: bool;
    let mut _1378: u64;
    let mut _1379: u64;
    let mut _1380: i32;
    let mut _1381: &i32;
    let mut _1382: &[i32];
    let mut _1383: &[i32; 24];
    let mut _1384: usize;
    let mut _1385: (usize, bool);
    let mut _1386: (u64, bool);
    let mut _1387: u64;
    let mut _1388: u64;
    let mut _1389: i32;
    let mut _1390: i32;
    let mut _1391: &i32;
    let mut _1392: &[i32];
    let mut _1393: &[i32; 24];
    let mut _1394: usize;
    let mut _1395: (usize, bool);
    let mut _1396: (i32, bool);
    let mut _1397: (u64, bool);
    let mut _1398: &mut u64;
    let mut _1399: &mut [u64];
    let mut _1400: &mut [u64; 25];
    let mut _1401: usize;
    let mut _1402: &usize;
    let mut _1403: &[usize];
    let mut _1404: &[usize; 24];
    let mut _1405: usize;
    let mut _1406: (usize, bool);
    let mut _1407: u64;
    let mut _1408: usize;
    let mut _1409: usize;
    let mut _1410: bool;
    let mut _1411: u64;
    let mut _1412: &u64;
    let mut _1413: &[u64];
    let mut _1414: &[u64; 25];
    let mut _1415: usize;
    let mut _1416: &usize;
    let mut _1417: &[usize];
    let mut _1418: &[usize; 24];
    let mut _1419: usize;
    let mut _1420: (usize, bool);
    let mut _1421: usize;
    let mut _1422: usize;
    let mut _1423: bool;
    let mut _1424: u64;
    let mut _1425: u64;
    let mut _1426: i32;
    let mut _1427: &i32;
    let mut _1428: &[i32];
    let mut _1429: &[i32; 24];
    let mut _1430: usize;
    let mut _1431: (usize, bool);
    let mut _1432: (u64, bool);
    let mut _1433: u64;
    let mut _1434: u64;
    let mut _1435: i32;
    let mut _1436: i32;
    let mut _1437: &i32;
    let mut _1438: &[i32];
    let mut _1439: &[i32; 24];
    let mut _1440: usize;
    let mut _1441: (usize, bool);
    let mut _1442: (i32, bool);
    let mut _1443: (u64, bool);
    let mut _1444: &mut u64;
    let mut _1445: &mut [u64];
    let mut _1446: &mut [u64; 25];
    let mut _1447: usize;
    let mut _1448: &usize;
    let mut _1449: &[usize];
    let mut _1450: &[usize; 24];
    let mut _1451: usize;
    let mut _1452: (usize, bool);
    let mut _1453: u64;
    let mut _1454: usize;
    let mut _1455: usize;
    let mut _1456: bool;
    let mut _1457: u64;
    let mut _1458: &u64;
    let mut _1459: &[u64];
    let mut _1460: &[u64; 25];
    let mut _1461: usize;
    let mut _1462: &usize;
    let mut _1463: &[usize];
    let mut _1464: &[usize; 24];
    let mut _1465: usize;
    let mut _1466: (usize, bool);
    let mut _1467: usize;
    let mut _1468: usize;
    let mut _1469: bool;
    let mut _1470: u64;
    let mut _1471: u64;
    let mut _1472: i32;
    let mut _1473: &i32;
    let mut _1474: &[i32];
    let mut _1475: &[i32; 24];
    let mut _1476: usize;
    let mut _1477: (usize, bool);
    let mut _1478: (u64, bool);
    let mut _1479: u64;
    let mut _1480: u64;
    let mut _1481: i32;
    let mut _1482: i32;
    let mut _1483: &i32;
    let mut _1484: &[i32];
    let mut _1485: &[i32; 24];
    let mut _1486: usize;
    let mut _1487: (usize, bool);
    let mut _1488: (i32, bool);
    let mut _1489: (u64, bool);
    let mut _1490: &mut u64;
    let mut _1491: &mut [u64];
    let mut _1492: &mut [u64; 25];
    let mut _1493: usize;
    let mut _1494: &usize;
    let mut _1495: &[usize];
    let mut _1496: &[usize; 24];
    let mut _1497: usize;
    let mut _1498: (usize, bool);
    let mut _1499: u64;
    let mut _1500: usize;
    let mut _1501: usize;
    let mut _1502: bool;
    let mut _1503: u64;
    let mut _1504: &u64;
    let mut _1505: &[u64];
    let mut _1506: &[u64; 25];
    let mut _1507: usize;
    let mut _1508: &usize;
    let mut _1509: &[usize];
    let mut _1510: &[usize; 24];
    let mut _1511: usize;
    let mut _1512: (usize, bool);
    let mut _1513: usize;
    let mut _1514: usize;
    let mut _1515: bool;
    let mut _1516: u64;
    let mut _1517: u64;
    let mut _1518: i32;
    let mut _1519: &i32;
    let mut _1520: &[i32];
    let mut _1521: &[i32; 24];
    let mut _1522: usize;
    let mut _1523: (usize, bool);
    let mut _1524: (u64, bool);
    let mut _1525: u64;
    let mut _1526: u64;
    let mut _1527: i32;
    let mut _1528: i32;
    let mut _1529: &i32;
    let mut _1530: &[i32];
    let mut _1531: &[i32; 24];
    let mut _1532: usize;
    let mut _1533: (usize, bool);
    let mut _1534: (i32, bool);
    let mut _1535: (u64, bool);
    let mut _1536: &mut u64;
    let mut _1537: &mut [u64];
    let mut _1538: &mut [u64; 25];
    let mut _1539: usize;
    let mut _1540: &usize;
    let mut _1541: &[usize];
    let mut _1542: &[usize; 24];
    let mut _1543: usize;
    let mut _1544: (usize, bool);
    let mut _1545: u64;
    let mut _1546: usize;
    let mut _1547: usize;
    let mut _1548: bool;
    let mut _1549: u64;
    let mut _1550: &u64;
    let mut _1551: &[u64];
    let mut _1552: &[u64; 25];
    let mut _1553: usize;
    let mut _1554: &usize;
    let mut _1555: &[usize];
    let mut _1556: &[usize; 24];
    let mut _1557: usize;
    let mut _1558: (usize, bool);
    let mut _1559: usize;
    let mut _1560: usize;
    let mut _1561: bool;
    let mut _1562: u64;
    let mut _1563: u64;
    let mut _1564: i32;
    let mut _1565: &i32;
    let mut _1566: &[i32];
    let mut _1567: &[i32; 24];
    let mut _1568: usize;
    let mut _1569: (usize, bool);
    let mut _1570: (u64, bool);
    let mut _1571: u64;
    let mut _1572: u64;
    let mut _1573: i32;
    let mut _1574: i32;
    let mut _1575: &i32;
    let mut _1576: &[i32];
    let mut _1577: &[i32; 24];
    let mut _1578: usize;
    let mut _1579: (usize, bool);
    let mut _1580: (i32, bool);
    let mut _1581: (u64, bool);
    let mut _1582: &mut u64;
    let mut _1583: &mut [u64];
    let mut _1584: &mut [u64; 25];
    let mut _1585: usize;
    let mut _1586: &usize;
    let mut _1587: &[usize];
    let mut _1588: &[usize; 24];
    let mut _1589: usize;
    let mut _1590: (usize, bool);
    let mut _1591: u64;
    let mut _1592: usize;
    let mut _1593: usize;
    let mut _1594: bool;
    let mut _1595: u64;
    let mut _1596: &u64;
    let mut _1597: &[u64];
    let mut _1598: &[u64; 25];
    let mut _1599: usize;
    let mut _1600: &usize;
    let mut _1601: &[usize];
    let mut _1602: &[usize; 24];
    let mut _1603: usize;
    let mut _1604: (usize, bool);
    let mut _1605: usize;
    let mut _1606: usize;
    let mut _1607: bool;
    let mut _1608: u64;
    let mut _1609: u64;
    let mut _1610: i32;
    let mut _1611: &i32;
    let mut _1612: &[i32];
    let mut _1613: &[i32; 24];
    let mut _1614: usize;
    let mut _1615: (usize, bool);
    let mut _1616: (u64, bool);
    let mut _1617: u64;
    let mut _1618: u64;
    let mut _1619: i32;
    let mut _1620: i32;
    let mut _1621: &i32;
    let mut _1622: &[i32];
    let mut _1623: &[i32; 24];
    let mut _1624: usize;
    let mut _1625: (usize, bool);
    let mut _1626: (i32, bool);
    let mut _1627: (u64, bool);
    let mut _1628: &mut u64;
    let mut _1629: &mut [u64];
    let mut _1630: &mut [u64; 25];
    let mut _1631: usize;
    let mut _1632: &usize;
    let mut _1633: &[usize];
    let mut _1634: &[usize; 24];
    let mut _1635: usize;
    let mut _1636: (usize, bool);
    let mut _1637: u64;
    let mut _1638: usize;
    let mut _1639: usize;
    let mut _1640: bool;
    let mut _1641: u64;
    let mut _1642: &u64;
    let mut _1643: &[u64];
    let mut _1644: &[u64; 25];
    let mut _1645: usize;
    let mut _1646: (usize, bool);
    let mut _1647: usize;
    let mut _1648: usize;
    let mut _1649: bool;
    let mut _1650: u64;
    let mut _1651: &u64;
    let mut _1652: &[u64];
    let mut _1653: &[u64; 25];
    let mut _1654: usize;
    let mut _1655: (usize, bool);
    let mut _1656: usize;
    let mut _1657: usize;
    let mut _1658: bool;
    let mut _1659: u64;
    let mut _1660: &u64;
    let mut _1661: &[u64];
    let mut _1662: &[u64; 25];
    let mut _1663: usize;
    let mut _1664: (usize, bool);
    let mut _1665: usize;
    let mut _1666: usize;
    let mut _1667: bool;
    let mut _1668: u64;
    let mut _1669: &u64;
    let mut _1670: &[u64];
    let mut _1671: &[u64; 25];
    let mut _1672: usize;
    let mut _1673: (usize, bool);
    let mut _1674: usize;
    let mut _1675: usize;
    let mut _1676: bool;
    let mut _1677: u64;
    let mut _1678: &u64;
    let mut _1679: &[u64];
    let mut _1680: &[u64; 25];
    let mut _1681: usize;
    let mut _1682: (usize, bool);
    let mut _1683: usize;
    let mut _1684: usize;
    let mut _1685: bool;
    let mut _1686: u64;
    let mut _1687: u64;
    let mut _1688: u64;
    let mut _1689: &u64;
    let mut _1690: &[u64];
    let mut _1691: &[u64; 5];
    let mut _1692: usize;
    let mut _1693: usize;
    let mut _1694: (usize, bool);
    let mut _1695: bool;
    let mut _1696: u64;
    let mut _1697: &u64;
    let mut _1698: &[u64];
    let mut _1699: &[u64; 5];
    let mut _1700: usize;
    let mut _1701: usize;
    let mut _1702: (usize, bool);
    let mut _1703: bool;
    let mut _1704: &mut u64;
    let mut _1705: &mut [u64];
    let mut _1706: &mut [u64; 25];
    let mut _1707: usize;
    let mut _1708: (usize, bool);
    let mut _1709: u64;
    let mut _1710: u64;
    let mut _1711: u64;
    let mut _1712: &u64;
    let mut _1713: &[u64];
    let mut _1714: &[u64; 5];
    let mut _1715: usize;
    let mut _1716: usize;
    let mut _1717: (usize, bool);
    let mut _1718: bool;
    let mut _1719: u64;
    let mut _1720: &u64;
    let mut _1721: &[u64];
    let mut _1722: &[u64; 5];
    let mut _1723: usize;
    let mut _1724: usize;
    let mut _1725: (usize, bool);
    let mut _1726: bool;
    let mut _1727: &mut u64;
    let mut _1728: &mut [u64];
    let mut _1729: &mut [u64; 25];
    let mut _1730: usize;
    let mut _1731: (usize, bool);
    let mut _1732: u64;
    let mut _1733: u64;
    let mut _1734: u64;
    let mut _1735: &u64;
    let mut _1736: &[u64];
    let mut _1737: &[u64; 5];
    let mut _1738: usize;
    let mut _1739: usize;
    let mut _1740: (usize, bool);
    let mut _1741: bool;
    let mut _1742: u64;
    let mut _1743: &u64;
    let mut _1744: &[u64];
    let mut _1745: &[u64; 5];
    let mut _1746: usize;
    let mut _1747: usize;
    let mut _1748: (usize, bool);
    let mut _1749: bool;
    let mut _1750: &mut u64;
    let mut _1751: &mut [u64];
    let mut _1752: &mut [u64; 25];
    let mut _1753: usize;
    let mut _1754: (usize, bool);
    let mut _1755: u64;
    let mut _1756: u64;
    let mut _1757: u64;
    let mut _1758: &u64;
    let mut _1759: &[u64];
    let mut _1760: &[u64; 5];
    let mut _1761: usize;
    let mut _1762: usize;
    let mut _1763: (usize, bool);
    let mut _1764: bool;
    let mut _1765: u64;
    let mut _1766: &u64;
    let mut _1767: &[u64];
    let mut _1768: &[u64; 5];
    let mut _1769: usize;
    let mut _1770: usize;
    let mut _1771: (usize, bool);
    let mut _1772: bool;
    let mut _1773: &mut u64;
    let mut _1774: &mut [u64];
    let mut _1775: &mut [u64; 25];
    let mut _1776: usize;
    let mut _1777: (usize, bool);
    let mut _1778: u64;
    let mut _1779: u64;
    let mut _1780: u64;
    let mut _1781: &u64;
    let mut _1782: &[u64];
    let mut _1783: &[u64; 5];
    let mut _1784: usize;
    let mut _1785: usize;
    let mut _1786: (usize, bool);
    let mut _1787: bool;
    let mut _1788: u64;
    let mut _1789: &u64;
    let mut _1790: &[u64];
    let mut _1791: &[u64; 5];
    let mut _1792: usize;
    let mut _1793: usize;
    let mut _1794: (usize, bool);
    let mut _1795: bool;
    let mut _1796: &mut u64;
    let mut _1797: &mut [u64];
    let mut _1798: &mut [u64; 25];
    let mut _1799: usize;
    let mut _1800: (usize, bool);
    let mut _1801: u64;
    let mut _1802: &u64;
    let mut _1803: &[u64];
    let mut _1804: &[u64; 25];
    let mut _1805: usize;
    let mut _1806: (usize, bool);
    let mut _1807: usize;
    let mut _1808: usize;
    let mut _1809: bool;
    let mut _1810: u64;
    let mut _1811: &u64;
    let mut _1812: &[u64];
    let mut _1813: &[u64; 25];
    let mut _1814: usize;
    let mut _1815: (usize, bool);
    let mut _1816: usize;
    let mut _1817: usize;
    let mut _1818: bool;
    let mut _1819: u64;
    let mut _1820: &u64;
    let mut _1821: &[u64];
    let mut _1822: &[u64; 25];
    let mut _1823: usize;
    let mut _1824: (usize, bool);
    let mut _1825: usize;
    let mut _1826: usize;
    let mut _1827: bool;
    let mut _1828: u64;
    let mut _1829: &u64;
    let mut _1830: &[u64];
    let mut _1831: &[u64; 25];
    let mut _1832: usize;
    let mut _1833: (usize, bool);
    let mut _1834: usize;
    let mut _1835: usize;
    let mut _1836: bool;
    let mut _1837: u64;
    let mut _1838: &u64;
    let mut _1839: &[u64];
    let mut _1840: &[u64; 25];
    let mut _1841: usize;
    let mut _1842: (usize, bool);
    let mut _1843: usize;
    let mut _1844: usize;
    let mut _1845: bool;
    let mut _1846: u64;
    let mut _1847: u64;
    let mut _1848: u64;
    let mut _1849: &u64;
    let mut _1850: &[u64];
    let mut _1851: &[u64; 5];
    let mut _1852: usize;
    let mut _1853: usize;
    let mut _1854: (usize, bool);
    let mut _1855: bool;
    let mut _1856: u64;
    let mut _1857: &u64;
    let mut _1858: &[u64];
    let mut _1859: &[u64; 5];
    let mut _1860: usize;
    let mut _1861: usize;
    let mut _1862: (usize, bool);
    let mut _1863: bool;
    let mut _1864: &mut u64;
    let mut _1865: &mut [u64];
    let mut _1866: &mut [u64; 25];
    let mut _1867: usize;
    let mut _1868: (usize, bool);
    let mut _1869: u64;
    let mut _1870: u64;
    let mut _1871: u64;
    let mut _1872: &u64;
    let mut _1873: &[u64];
    let mut _1874: &[u64; 5];
    let mut _1875: usize;
    let mut _1876: usize;
    let mut _1877: (usize, bool);
    let mut _1878: bool;
    let mut _1879: u64;
    let mut _1880: &u64;
    let mut _1881: &[u64];
    let mut _1882: &[u64; 5];
    let mut _1883: usize;
    let mut _1884: usize;
    let mut _1885: (usize, bool);
    let mut _1886: bool;
    let mut _1887: &mut u64;
    let mut _1888: &mut [u64];
    let mut _1889: &mut [u64; 25];
    let mut _1890: usize;
    let mut _1891: (usize, bool);
    let mut _1892: u64;
    let mut _1893: u64;
    let mut _1894: u64;
    let mut _1895: &u64;
    let mut _1896: &[u64];
    let mut _1897: &[u64; 5];
    let mut _1898: usize;
    let mut _1899: usize;
    let mut _1900: (usize, bool);
    let mut _1901: bool;
    let mut _1902: u64;
    let mut _1903: &u64;
    let mut _1904: &[u64];
    let mut _1905: &[u64; 5];
    let mut _1906: usize;
    let mut _1907: usize;
    let mut _1908: (usize, bool);
    let mut _1909: bool;
    let mut _1910: &mut u64;
    let mut _1911: &mut [u64];
    let mut _1912: &mut [u64; 25];
    let mut _1913: usize;
    let mut _1914: (usize, bool);
    let mut _1915: u64;
    let mut _1916: u64;
    let mut _1917: u64;
    let mut _1918: &u64;
    let mut _1919: &[u64];
    let mut _1920: &[u64; 5];
    let mut _1921: usize;
    let mut _1922: usize;
    let mut _1923: (usize, bool);
    let mut _1924: bool;
    let mut _1925: u64;
    let mut _1926: &u64;
    let mut _1927: &[u64];
    let mut _1928: &[u64; 5];
    let mut _1929: usize;
    let mut _1930: usize;
    let mut _1931: (usize, bool);
    let mut _1932: bool;
    let mut _1933: &mut u64;
    let mut _1934: &mut [u64];
    let mut _1935: &mut [u64; 25];
    let mut _1936: usize;
    let mut _1937: (usize, bool);
    let mut _1938: u64;
    let mut _1939: u64;
    let mut _1940: u64;
    let mut _1941: &u64;
    let mut _1942: &[u64];
    let mut _1943: &[u64; 5];
    let mut _1944: usize;
    let mut _1945: usize;
    let mut _1946: (usize, bool);
    let mut _1947: bool;
    let mut _1948: u64;
    let mut _1949: &u64;
    let mut _1950: &[u64];
    let mut _1951: &[u64; 5];
    let mut _1952: usize;
    let mut _1953: usize;
    let mut _1954: (usize, bool);
    let mut _1955: bool;
    let mut _1956: &mut u64;
    let mut _1957: &mut [u64];
    let mut _1958: &mut [u64; 25];
    let mut _1959: usize;
    let mut _1960: (usize, bool);
    let mut _1961: u64;
    let mut _1962: &u64;
    let mut _1963: &[u64];
    let mut _1964: &[u64; 25];
    let mut _1965: usize;
    let mut _1966: (usize, bool);
    let mut _1967: usize;
    let mut _1968: usize;
    let mut _1969: bool;
    let mut _1970: u64;
    let mut _1971: &u64;
    let mut _1972: &[u64];
    let mut _1973: &[u64; 25];
    let mut _1974: usize;
    let mut _1975: (usize, bool);
    let mut _1976: usize;
    let mut _1977: usize;
    let mut _1978: bool;
    let mut _1979: u64;
    let mut _1980: &u64;
    let mut _1981: &[u64];
    let mut _1982: &[u64; 25];
    let mut _1983: usize;
    let mut _1984: (usize, bool);
    let mut _1985: usize;
    let mut _1986: usize;
    let mut _1987: bool;
    let mut _1988: u64;
    let mut _1989: &u64;
    let mut _1990: &[u64];
    let mut _1991: &[u64; 25];
    let mut _1992: usize;
    let mut _1993: (usize, bool);
    let mut _1994: usize;
    let mut _1995: usize;
    let mut _1996: bool;
    let mut _1997: u64;
    let mut _1998: &u64;
    let mut _1999: &[u64];
    let mut _2000: &[u64; 25];
    let mut _2001: usize;
    let mut _2002: (usize, bool);
    let mut _2003: usize;
    let mut _2004: usize;
    let mut _2005: bool;
    let mut _2006: u64;
    let mut _2007: u64;
    let mut _2008: u64;
    let mut _2009: &u64;
    let mut _2010: &[u64];
    let mut _2011: &[u64; 5];
    let mut _2012: usize;
    let mut _2013: usize;
    let mut _2014: (usize, bool);
    let mut _2015: bool;
    let mut _2016: u64;
    let mut _2017: &u64;
    let mut _2018: &[u64];
    let mut _2019: &[u64; 5];
    let mut _2020: usize;
    let mut _2021: usize;
    let mut _2022: (usize, bool);
    let mut _2023: bool;
    let mut _2024: &mut u64;
    let mut _2025: &mut [u64];
    let mut _2026: &mut [u64; 25];
    let mut _2027: usize;
    let mut _2028: (usize, bool);
    let mut _2029: u64;
    let mut _2030: u64;
    let mut _2031: u64;
    let mut _2032: &u64;
    let mut _2033: &[u64];
    let mut _2034: &[u64; 5];
    let mut _2035: usize;
    let mut _2036: usize;
    let mut _2037: (usize, bool);
    let mut _2038: bool;
    let mut _2039: u64;
    let mut _2040: &u64;
    let mut _2041: &[u64];
    let mut _2042: &[u64; 5];
    let mut _2043: usize;
    let mut _2044: usize;
    let mut _2045: (usize, bool);
    let mut _2046: bool;
    let mut _2047: &mut u64;
    let mut _2048: &mut [u64];
    let mut _2049: &mut [u64; 25];
    let mut _2050: usize;
    let mut _2051: (usize, bool);
    let mut _2052: u64;
    let mut _2053: u64;
    let mut _2054: u64;
    let mut _2055: &u64;
    let mut _2056: &[u64];
    let mut _2057: &[u64; 5];
    let mut _2058: usize;
    let mut _2059: usize;
    let mut _2060: (usize, bool);
    let mut _2061: bool;
    let mut _2062: u64;
    let mut _2063: &u64;
    let mut _2064: &[u64];
    let mut _2065: &[u64; 5];
    let mut _2066: usize;
    let mut _2067: usize;
    let mut _2068: (usize, bool);
    let mut _2069: bool;
    let mut _2070: &mut u64;
    let mut _2071: &mut [u64];
    let mut _2072: &mut [u64; 25];
    let mut _2073: usize;
    let mut _2074: (usize, bool);
    let mut _2075: u64;
    let mut _2076: u64;
    let mut _2077: u64;
    let mut _2078: &u64;
    let mut _2079: &[u64];
    let mut _2080: &[u64; 5];
    let mut _2081: usize;
    let mut _2082: usize;
    let mut _2083: (usize, bool);
    let mut _2084: bool;
    let mut _2085: u64;
    let mut _2086: &u64;
    let mut _2087: &[u64];
    let mut _2088: &[u64; 5];
    let mut _2089: usize;
    let mut _2090: usize;
    let mut _2091: (usize, bool);
    let mut _2092: bool;
    let mut _2093: &mut u64;
    let mut _2094: &mut [u64];
    let mut _2095: &mut [u64; 25];
    let mut _2096: usize;
    let mut _2097: (usize, bool);
    let mut _2098: u64;
    let mut _2099: u64;
    let mut _2100: u64;
    let mut _2101: &u64;
    let mut _2102: &[u64];
    let mut _2103: &[u64; 5];
    let mut _2104: usize;
    let mut _2105: usize;
    let mut _2106: (usize, bool);
    let mut _2107: bool;
    let mut _2108: u64;
    let mut _2109: &u64;
    let mut _2110: &[u64];
    let mut _2111: &[u64; 5];
    let mut _2112: usize;
    let mut _2113: usize;
    let mut _2114: (usize, bool);
    let mut _2115: bool;
    let mut _2116: &mut u64;
    let mut _2117: &mut [u64];
    let mut _2118: &mut [u64; 25];
    let mut _2119: usize;
    let mut _2120: (usize, bool);
    let mut _2121: u64;
    let mut _2122: &u64;
    let mut _2123: &[u64];
    let mut _2124: &[u64; 25];
    let mut _2125: usize;
    let mut _2126: (usize, bool);
    let mut _2127: usize;
    let mut _2128: usize;
    let mut _2129: bool;
    let mut _2130: u64;
    let mut _2131: &u64;
    let mut _2132: &[u64];
    let mut _2133: &[u64; 25];
    let mut _2134: usize;
    let mut _2135: (usize, bool);
    let mut _2136: usize;
    let mut _2137: usize;
    let mut _2138: bool;
    let mut _2139: u64;
    let mut _2140: &u64;
    let mut _2141: &[u64];
    let mut _2142: &[u64; 25];
    let mut _2143: usize;
    let mut _2144: (usize, bool);
    let mut _2145: usize;
    let mut _2146: usize;
    let mut _2147: bool;
    let mut _2148: u64;
    let mut _2149: &u64;
    let mut _2150: &[u64];
    let mut _2151: &[u64; 25];
    let mut _2152: usize;
    let mut _2153: (usize, bool);
    let mut _2154: usize;
    let mut _2155: usize;
    let mut _2156: bool;
    let mut _2157: u64;
    let mut _2158: &u64;
    let mut _2159: &[u64];
    let mut _2160: &[u64; 25];
    let mut _2161: usize;
    let mut _2162: (usize, bool);
    let mut _2163: usize;
    let mut _2164: usize;
    let mut _2165: bool;
    let mut _2166: u64;
    let mut _2167: u64;
    let mut _2168: u64;
    let mut _2169: &u64;
    let mut _2170: &[u64];
    let mut _2171: &[u64; 5];
    let mut _2172: usize;
    let mut _2173: usize;
    let mut _2174: (usize, bool);
    let mut _2175: bool;
    let mut _2176: u64;
    let mut _2177: &u64;
    let mut _2178: &[u64];
    let mut _2179: &[u64; 5];
    let mut _2180: usize;
    let mut _2181: usize;
    let mut _2182: (usize, bool);
    let mut _2183: bool;
    let mut _2184: &mut u64;
    let mut _2185: &mut [u64];
    let mut _2186: &mut [u64; 25];
    let mut _2187: usize;
    let mut _2188: (usize, bool);
    let mut _2189: u64;
    let mut _2190: u64;
    let mut _2191: u64;
    let mut _2192: &u64;
    let mut _2193: &[u64];
    let mut _2194: &[u64; 5];
    let mut _2195: usize;
    let mut _2196: usize;
    let mut _2197: (usize, bool);
    let mut _2198: bool;
    let mut _2199: u64;
    let mut _2200: &u64;
    let mut _2201: &[u64];
    let mut _2202: &[u64; 5];
    let mut _2203: usize;
    let mut _2204: usize;
    let mut _2205: (usize, bool);
    let mut _2206: bool;
    let mut _2207: &mut u64;
    let mut _2208: &mut [u64];
    let mut _2209: &mut [u64; 25];
    let mut _2210: usize;
    let mut _2211: (usize, bool);
    let mut _2212: u64;
    let mut _2213: u64;
    let mut _2214: u64;
    let mut _2215: &u64;
    let mut _2216: &[u64];
    let mut _2217: &[u64; 5];
    let mut _2218: usize;
    let mut _2219: usize;
    let mut _2220: (usize, bool);
    let mut _2221: bool;
    let mut _2222: u64;
    let mut _2223: &u64;
    let mut _2224: &[u64];
    let mut _2225: &[u64; 5];
    let mut _2226: usize;
    let mut _2227: usize;
    let mut _2228: (usize, bool);
    let mut _2229: bool;
    let mut _2230: &mut u64;
    let mut _2231: &mut [u64];
    let mut _2232: &mut [u64; 25];
    let mut _2233: usize;
    let mut _2234: (usize, bool);
    let mut _2235: u64;
    let mut _2236: u64;
    let mut _2237: u64;
    let mut _2238: &u64;
    let mut _2239: &[u64];
    let mut _2240: &[u64; 5];
    let mut _2241: usize;
    let mut _2242: usize;
    let mut _2243: (usize, bool);
    let mut _2244: bool;
    let mut _2245: u64;
    let mut _2246: &u64;
    let mut _2247: &[u64];
    let mut _2248: &[u64; 5];
    let mut _2249: usize;
    let mut _2250: usize;
    let mut _2251: (usize, bool);
    let mut _2252: bool;
    let mut _2253: &mut u64;
    let mut _2254: &mut [u64];
    let mut _2255: &mut [u64; 25];
    let mut _2256: usize;
    let mut _2257: (usize, bool);
    let mut _2258: u64;
    let mut _2259: u64;
    let mut _2260: u64;
    let mut _2261: &u64;
    let mut _2262: &[u64];
    let mut _2263: &[u64; 5];
    let mut _2264: usize;
    let mut _2265: usize;
    let mut _2266: (usize, bool);
    let mut _2267: bool;
    let mut _2268: u64;
    let mut _2269: &u64;
    let mut _2270: &[u64];
    let mut _2271: &[u64; 5];
    let mut _2272: usize;
    let mut _2273: usize;
    let mut _2274: (usize, bool);
    let mut _2275: bool;
    let mut _2276: &mut u64;
    let mut _2277: &mut [u64];
    let mut _2278: &mut [u64; 25];
    let mut _2279: usize;
    let mut _2280: (usize, bool);
    let mut _2281: u64;
    let mut _2282: &u64;
    let mut _2283: &[u64];
    let mut _2284: &[u64; 25];
    let mut _2285: usize;
    let mut _2286: (usize, bool);
    let mut _2287: usize;
    let mut _2288: usize;
    let mut _2289: bool;
    let mut _2290: u64;
    let mut _2291: &u64;
    let mut _2292: &[u64];
    let mut _2293: &[u64; 25];
    let mut _2294: usize;
    let mut _2295: (usize, bool);
    let mut _2296: usize;
    let mut _2297: usize;
    let mut _2298: bool;
    let mut _2299: u64;
    let mut _2300: &u64;
    let mut _2301: &[u64];
    let mut _2302: &[u64; 25];
    let mut _2303: usize;
    let mut _2304: (usize, bool);
    let mut _2305: usize;
    let mut _2306: usize;
    let mut _2307: bool;
    let mut _2308: u64;
    let mut _2309: &u64;
    let mut _2310: &[u64];
    let mut _2311: &[u64; 25];
    let mut _2312: usize;
    let mut _2313: (usize, bool);
    let mut _2314: usize;
    let mut _2315: usize;
    let mut _2316: bool;
    let mut _2317: u64;
    let mut _2318: &u64;
    let mut _2319: &[u64];
    let mut _2320: &[u64; 25];
    let mut _2321: usize;
    let mut _2322: (usize, bool);
    let mut _2323: usize;
    let mut _2324: usize;
    let mut _2325: bool;
    let mut _2326: u64;
    let mut _2327: u64;
    let mut _2328: u64;
    let mut _2329: &u64;
    let mut _2330: &[u64];
    let mut _2331: &[u64; 5];
    let mut _2332: usize;
    let mut _2333: usize;
    let mut _2334: (usize, bool);
    let mut _2335: bool;
    let mut _2336: u64;
    let mut _2337: &u64;
    let mut _2338: &[u64];
    let mut _2339: &[u64; 5];
    let mut _2340: usize;
    let mut _2341: usize;
    let mut _2342: (usize, bool);
    let mut _2343: bool;
    let mut _2344: &mut u64;
    let mut _2345: &mut [u64];
    let mut _2346: &mut [u64; 25];
    let mut _2347: usize;
    let mut _2348: (usize, bool);
    let mut _2349: u64;
    let mut _2350: u64;
    let mut _2351: u64;
    let mut _2352: &u64;
    let mut _2353: &[u64];
    let mut _2354: &[u64; 5];
    let mut _2355: usize;
    let mut _2356: usize;
    let mut _2357: (usize, bool);
    let mut _2358: bool;
    let mut _2359: u64;
    let mut _2360: &u64;
    let mut _2361: &[u64];
    let mut _2362: &[u64; 5];
    let mut _2363: usize;
    let mut _2364: usize;
    let mut _2365: (usize, bool);
    let mut _2366: bool;
    let mut _2367: &mut u64;
    let mut _2368: &mut [u64];
    let mut _2369: &mut [u64; 25];
    let mut _2370: usize;
    let mut _2371: (usize, bool);
    let mut _2372: u64;
    let mut _2373: u64;
    let mut _2374: u64;
    let mut _2375: &u64;
    let mut _2376: &[u64];
    let mut _2377: &[u64; 5];
    let mut _2378: usize;
    let mut _2379: usize;
    let mut _2380: (usize, bool);
    let mut _2381: bool;
    let mut _2382: u64;
    let mut _2383: &u64;
    let mut _2384: &[u64];
    let mut _2385: &[u64; 5];
    let mut _2386: usize;
    let mut _2387: usize;
    let mut _2388: (usize, bool);
    let mut _2389: bool;
    let mut _2390: &mut u64;
    let mut _2391: &mut [u64];
    let mut _2392: &mut [u64; 25];
    let mut _2393: usize;
    let mut _2394: (usize, bool);
    let mut _2395: u64;
    let mut _2396: u64;
    let mut _2397: u64;
    let mut _2398: &u64;
    let mut _2399: &[u64];
    let mut _2400: &[u64; 5];
    let mut _2401: usize;
    let mut _2402: usize;
    let mut _2403: (usize, bool);
    let mut _2404: bool;
    let mut _2405: u64;
    let mut _2406: &u64;
    let mut _2407: &[u64];
    let mut _2408: &[u64; 5];
    let mut _2409: usize;
    let mut _2410: usize;
    let mut _2411: (usize, bool);
    let mut _2412: bool;
    let mut _2413: &mut u64;
    let mut _2414: &mut [u64];
    let mut _2415: &mut [u64; 25];
    let mut _2416: usize;
    let mut _2417: (usize, bool);
    let mut _2418: u64;
    let mut _2419: u64;
    let mut _2420: u64;
    let mut _2421: &u64;
    let mut _2422: &[u64];
    let mut _2423: &[u64; 5];
    let mut _2424: usize;
    let mut _2425: usize;
    let mut _2426: (usize, bool);
    let mut _2427: bool;
    let mut _2428: u64;
    let mut _2429: &u64;
    let mut _2430: &[u64];
    let mut _2431: &[u64; 5];
    let mut _2432: usize;
    let mut _2433: usize;
    let mut _2434: (usize, bool);
    let mut _2435: bool;
    let mut _2436: &mut u64;
    let mut _2437: &mut [u64];
    let mut _2438: &mut [u64; 25];
    let mut _2439: usize;
    let mut _2440: (usize, bool);
    let mut _2441: u64;
    let mut _2442: usize;
    let mut _2443: usize;
    let mut _2444: bool;
    let mut _2445: usize;
    let mut _2446: usize;
    let mut _2447: bool;
    let mut _2448: ();

    bb0: {                              
        StorageLive(_3);                 // scope 1 at src\keccak.rs:87:9: 87:14
        StorageLive(_4);                 // scope 3 at src\keccak.rs:88:9: 88:15
        _4 = [const 0u64; Us64(5)];      // scope 3 at src\keccak.rs:88:18: 88:27
        StorageLive(_5);                 // scope 5 at src\keccak.rs:89:5: 106:6
        StorageLive(_6);                 // scope 5 at src\keccak.rs:89:5: 106:6
        StorageLive(_7);                 // scope 5 at src\keccak.rs:89:18: 89:27
        StorageLive(_8);                 // scope 5 at src\keccak.rs:89:21: 89:27
        _8 = _2;                         // scope 5 at src\keccak.rs:89:21: 89:27
        _7 = std::ops::Range<usize> { start: const 0usize, end: _8 }; // scope 5 at src\keccak.rs:89:18: 89:27
        StorageDead(_8);                 // scope 5 at src\keccak.rs:89:27: 89:27
        _6 = const std::iter::IntoIterator::into_iter(_7) -> bb1; // scope 5 at src\keccak.rs:89:5: 106:6
    }

    bb1: {                              
        StorageDead(_7);                 // scope 5 at src\keccak.rs:106:6: 106:6
        StorageLive(_9);                 // scope 7 at src\keccak.rs:89:5: 106:6
        _9 = _6;                         // scope 7 at src\keccak.rs:89:5: 106:6
        goto -> bb2;                     // scope 7 at src\keccak.rs:89:5: 106:6
    }

    bb2: {                              
        StorageLive(_11);                // scope 8 at src\keccak.rs:89:5: 106:6
        StorageLive(_12);                // scope 8 at src\keccak.rs:89:5: 106:6
        StorageLive(_13);                // scope 8 at src\keccak.rs:89:5: 106:6
        StorageLive(_14);                // scope 8 at src\keccak.rs:89:5: 106:6
        _14 = &mut _9;                   // scope 8 at src\keccak.rs:89:5: 106:6
        _13 = _14;                       // scope 8 at src\keccak.rs:89:5: 106:6
        _12 = const std::iter::Iterator::next(_13) -> bb3; // scope 8 at src\keccak.rs:89:5: 106:6
    }

    bb3: {                              
        StorageDead(_13);                // scope 8 at src\keccak.rs:106:6: 106:6
        _16 = discriminant(_12);         // scope 10 at src\keccak.rs:89:5: 106:6
        switchInt(_16) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // scope 10 at src\keccak.rs:89:5: 106:6
    }

    bb4: {                              
        _5 = ();                         // scope 10 at src\keccak.rs:89:5: 106:6
        StorageDead(_15);                // scope 8 at src\keccak.rs:106:6: 106:6
        StorageDead(_12);                // scope 8 at src\keccak.rs:106:6: 106:6
        StorageDead(_14);                // scope 8 at src\keccak.rs:106:6: 106:6
        StorageDead(_11);                // scope 7 at src\keccak.rs:106:6: 106:6
        StorageDead(_9);                 // scope 5 at src\keccak.rs:106:6: 106:6
        StorageDead(_6);                 // scope 5 at src\keccak.rs:106:6: 106:6
        StorageLive(_2448);              // scope 5 at src\keccak.rs:89:5: 106:6
        _2448 = _5;                      // scope 5 at src\keccak.rs:89:5: 106:6
        _0 = _2448;                      // scope 5 at src\keccak.rs:89:5: 106:6
        StorageDead(_2448);              // scope 5 at src\keccak.rs:106:6: 106:6
        StorageDead(_5);                 // scope 3 at src\keccak.rs:106:6: 106:6
        StorageDead(_4);                 // scope 1 at src\keccak.rs:107:2: 107:2
        StorageDead(_3);                 // scope 0 at src\keccak.rs:107:2: 107:2
        return;                          // scope 0 at src\keccak.rs:107:2: 107:2
    }

    bb5: {                              
        unreachable;                     // scope 0 at src\keccak.rs:107:2: 107:2
    }

    bb6: {                              
        StorageLive(_15);                // scope 10 at src\keccak.rs:89:5: 106:6
        _15 = ((_12 as Some).0: usize);  // scope 10 at src\keccak.rs:89:5: 106:6
        StorageLive(_17);                // scope 10 at src\keccak.rs:89:5: 106:6
        _17 = _15;                       // scope 10 at src\keccak.rs:89:5: 106:6
        _11 = _17;                       // scope 10 at src\keccak.rs:89:5: 106:6
        StorageDead(_17);                // scope 10 at src\keccak.rs:106:6: 106:6
        StorageDead(_15);                // scope 8 at src\keccak.rs:106:6: 106:6
        StorageDead(_12);                // scope 8 at src\keccak.rs:106:6: 106:6
        StorageDead(_14);                // scope 8 at src\keccak.rs:106:6: 106:6
        StorageLive(_18);                // scope 11 at src\keccak.rs:89:9: 89:14
        StorageLive(_19);                // scope 11 at src\keccak.rs:89:5: 106:6
        _19 = _11;                       // scope 11 at src\keccak.rs:89:5: 106:6
        _18 = _19;                       // scope 11 at src\keccak.rs:89:5: 106:6
        StorageDead(_19);                // scope 11 at src\keccak.rs:106:6: 106:6
        StorageLive(_21);                // scope 11 at src\keccak.rs:32:19: 32:70
        StorageLive(_22);                // scope 11 at src\keccak.rs:32:19: 32:55
        StorageLive(_23);                // scope 11 at src\keccak.rs:32:19: 32:40
        StorageLive(_24);                // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_25);                // scope 11 at src\keccak.rs:91:34: 91:35
        _25 = const 0usize;              // scope 11 at src\keccak.rs:91:34: 91:35
        _26 = Len((*_1));                // scope 11 at src\keccak.rs:32:19: 32:26
        _27 = Lt(_25, _26);              // scope 11 at src\keccak.rs:32:19: 32:26
        assert(_27, "index out of bounds: the len is {} but the index is {}", _26, _25) -> bb7; // scope 11 at src\keccak.rs:32:19: 32:26
    }

    bb7: {                              
        _24 = (*_1)[_25];                // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_28);                // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_29);                // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_30);                // scope 11 at src\keccak.rs:91:43: 91:45
        StorageLive(_31);                // scope 11 at src\keccak.rs:91:43: 91:45
        _31 = _1;                        // scope 11 at src\keccak.rs:91:43: 91:45
        _30 = _31 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:91:43: 91:45
        StorageDead(_31);                // scope 11 at src\keccak.rs:91:45: 91:45
        StorageLive(_32);                // scope 11 at src\keccak.rs:32:33: 32:39
        _33 = CheckedAdd(const 0usize, const 5usize); // scope 11 at src\keccak.rs:32:33: 32:39
        assert(!(_33.1: bool), "attempt to add with overflow") -> bb8; // scope 11 at src\keccak.rs:32:33: 32:39
    }

    bb8: {                              
        _32 = (_33.0: usize);            // scope 11 at src\keccak.rs:32:33: 32:39
        _29 = const std::ops::Index::index(_30, _32) -> bb9; // scope 11 at src\keccak.rs:32:29: 32:40
    }

    bb9: {                              
        _28 = (*_29);                    // scope 11 at src\keccak.rs:32:29: 32:40
        StorageDead(_32);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_30);                // scope 11 at src\keccak.rs:32:40: 32:40
        _23 = BitXor(_24, _28);          // scope 11 at src\keccak.rs:32:19: 32:40
        StorageDead(_28);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_24);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageLive(_34);                // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_35);                // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_36);                // scope 11 at src\keccak.rs:91:43: 91:45
        StorageLive(_37);                // scope 11 at src\keccak.rs:91:43: 91:45
        _37 = _1;                        // scope 11 at src\keccak.rs:91:43: 91:45
        _36 = _37 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:91:43: 91:45
        StorageDead(_37);                // scope 11 at src\keccak.rs:91:45: 91:45
        StorageLive(_38);                // scope 11 at src\keccak.rs:32:47: 32:54
        _39 = CheckedAdd(const 0usize, const 10usize); // scope 11 at src\keccak.rs:32:47: 32:54
        assert(!(_39.1: bool), "attempt to add with overflow") -> bb10; // scope 11 at src\keccak.rs:32:47: 32:54
    }

    bb10: {                             
        _38 = (_39.0: usize);            // scope 11 at src\keccak.rs:32:47: 32:54
        _35 = const std::ops::Index::index(_36, _38) -> bb11; // scope 11 at src\keccak.rs:32:43: 32:55
    }

    bb11: {                             
        _34 = (*_35);                    // scope 11 at src\keccak.rs:32:43: 32:55
        StorageDead(_38);                // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_36);                // scope 11 at src\keccak.rs:32:55: 32:55
        _22 = BitXor(_23, _34);          // scope 11 at src\keccak.rs:32:19: 32:55
        StorageDead(_34);                // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_23);                // scope 11 at src\keccak.rs:32:55: 32:55
        StorageLive(_40);                // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_41);                // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_42);                // scope 11 at src\keccak.rs:91:43: 91:45
        StorageLive(_43);                // scope 11 at src\keccak.rs:91:43: 91:45
        _43 = _1;                        // scope 11 at src\keccak.rs:91:43: 91:45
        _42 = _43 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:91:43: 91:45
        StorageDead(_43);                // scope 11 at src\keccak.rs:91:45: 91:45
        StorageLive(_44);                // scope 11 at src\keccak.rs:32:62: 32:69
        _45 = CheckedAdd(const 0usize, const 15usize); // scope 11 at src\keccak.rs:32:62: 32:69
        assert(!(_45.1: bool), "attempt to add with overflow") -> bb12; // scope 11 at src\keccak.rs:32:62: 32:69
    }

    bb12: {                             
        _44 = (_45.0: usize);            // scope 11 at src\keccak.rs:32:62: 32:69
        _41 = const std::ops::Index::index(_42, _44) -> bb13; // scope 11 at src\keccak.rs:32:58: 32:70
    }

    bb13: {                             
        _40 = (*_41);                    // scope 11 at src\keccak.rs:32:58: 32:70
        StorageDead(_44);                // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_42);                // scope 11 at src\keccak.rs:32:70: 32:70
        _21 = BitXor(_22, _40);          // scope 11 at src\keccak.rs:32:19: 32:70
        StorageDead(_40);                // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_22);                // scope 11 at src\keccak.rs:32:70: 32:70
        StorageLive(_46);                // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_47);                // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_48);                // scope 11 at src\keccak.rs:91:43: 91:45
        StorageLive(_49);                // scope 11 at src\keccak.rs:91:43: 91:45
        _49 = _1;                        // scope 11 at src\keccak.rs:91:43: 91:45
        _48 = _49 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:91:43: 91:45
        StorageDead(_49);                // scope 11 at src\keccak.rs:91:45: 91:45
        StorageLive(_50);                // scope 11 at src\keccak.rs:32:77: 32:84
        _51 = CheckedAdd(const 0usize, const 20usize); // scope 11 at src\keccak.rs:32:77: 32:84
        assert(!(_51.1: bool), "attempt to add with overflow") -> bb14; // scope 11 at src\keccak.rs:32:77: 32:84
    }

    bb14: {                             
        _50 = (_51.0: usize);            // scope 11 at src\keccak.rs:32:77: 32:84
        _47 = const std::ops::Index::index(_48, _50) -> bb15; // scope 11 at src\keccak.rs:32:73: 32:85
    }

    bb15: {                             
        _46 = (*_47);                    // scope 11 at src\keccak.rs:32:73: 32:85
        StorageDead(_50);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_48);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageLive(_52);                // scope 11 at src\keccak.rs:91:34: 91:35
        _52 = const 0usize;              // scope 11 at src\keccak.rs:91:34: 91:35
        _53 = Len(_4);                   // scope 11 at src\keccak.rs:32:9: 32:16
        _54 = Lt(_52, _53);              // scope 11 at src\keccak.rs:32:9: 32:16
        assert(_54, "index out of bounds: the len is {} but the index is {}", _53, _52) -> bb16; // scope 11 at src\keccak.rs:32:9: 32:16
    }

    bb16: {                             
        _4[_52] = BitXor(_21, _46);      // scope 11 at src\keccak.rs:32:9: 32:85
        StorageDead(_46);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_21);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_47);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_41);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_35);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_29);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageLive(_55);                // scope 11 at src\keccak.rs:32:19: 32:70
        StorageLive(_56);                // scope 11 at src\keccak.rs:32:19: 32:55
        StorageLive(_57);                // scope 11 at src\keccak.rs:32:19: 32:40
        StorageLive(_58);                // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_59);                // scope 11 at src\keccak.rs:92:34: 92:35
        _59 = const 1usize;              // scope 11 at src\keccak.rs:92:34: 92:35
        _60 = Len((*_1));                // scope 11 at src\keccak.rs:32:19: 32:26
        _61 = Lt(_59, _60);              // scope 11 at src\keccak.rs:32:19: 32:26
        assert(_61, "index out of bounds: the len is {} but the index is {}", _60, _59) -> bb17; // scope 11 at src\keccak.rs:32:19: 32:26
    }

    bb17: {                             
        _58 = (*_1)[_59];                // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_62);                // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_63);                // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_64);                // scope 11 at src\keccak.rs:92:43: 92:45
        StorageLive(_65);                // scope 11 at src\keccak.rs:92:43: 92:45
        _65 = _1;                        // scope 11 at src\keccak.rs:92:43: 92:45
        _64 = _65 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:92:43: 92:45
        StorageDead(_65);                // scope 11 at src\keccak.rs:92:45: 92:45
        StorageLive(_66);                // scope 11 at src\keccak.rs:32:33: 32:39
        _67 = CheckedAdd(const 1usize, const 5usize); // scope 11 at src\keccak.rs:32:33: 32:39
        assert(!(_67.1: bool), "attempt to add with overflow") -> bb18; // scope 11 at src\keccak.rs:32:33: 32:39
    }

    bb18: {                             
        _66 = (_67.0: usize);            // scope 11 at src\keccak.rs:32:33: 32:39
        _63 = const std::ops::Index::index(_64, _66) -> bb19; // scope 11 at src\keccak.rs:32:29: 32:40
    }

    bb19: {                             
        _62 = (*_63);                    // scope 11 at src\keccak.rs:32:29: 32:40
        StorageDead(_66);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_64);                // scope 11 at src\keccak.rs:32:40: 32:40
        _57 = BitXor(_58, _62);          // scope 11 at src\keccak.rs:32:19: 32:40
        StorageDead(_62);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_58);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageLive(_68);                // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_69);                // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_70);                // scope 11 at src\keccak.rs:92:43: 92:45
        StorageLive(_71);                // scope 11 at src\keccak.rs:92:43: 92:45
        _71 = _1;                        // scope 11 at src\keccak.rs:92:43: 92:45
        _70 = _71 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:92:43: 92:45
        StorageDead(_71);                // scope 11 at src\keccak.rs:92:45: 92:45
        StorageLive(_72);                // scope 11 at src\keccak.rs:32:47: 32:54
        _73 = CheckedAdd(const 1usize, const 10usize); // scope 11 at src\keccak.rs:32:47: 32:54
        assert(!(_73.1: bool), "attempt to add with overflow") -> bb20; // scope 11 at src\keccak.rs:32:47: 32:54
    }

    bb20: {                             
        _72 = (_73.0: usize);            // scope 11 at src\keccak.rs:32:47: 32:54
        _69 = const std::ops::Index::index(_70, _72) -> bb21; // scope 11 at src\keccak.rs:32:43: 32:55
    }

    bb21: {                             
        _68 = (*_69);                    // scope 11 at src\keccak.rs:32:43: 32:55
        StorageDead(_72);                // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_70);                // scope 11 at src\keccak.rs:32:55: 32:55
        _56 = BitXor(_57, _68);          // scope 11 at src\keccak.rs:32:19: 32:55
        StorageDead(_68);                // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_57);                // scope 11 at src\keccak.rs:32:55: 32:55
        StorageLive(_74);                // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_75);                // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_76);                // scope 11 at src\keccak.rs:92:43: 92:45
        StorageLive(_77);                // scope 11 at src\keccak.rs:92:43: 92:45
        _77 = _1;                        // scope 11 at src\keccak.rs:92:43: 92:45
        _76 = _77 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:92:43: 92:45
        StorageDead(_77);                // scope 11 at src\keccak.rs:92:45: 92:45
        StorageLive(_78);                // scope 11 at src\keccak.rs:32:62: 32:69
        _79 = CheckedAdd(const 1usize, const 15usize); // scope 11 at src\keccak.rs:32:62: 32:69
        assert(!(_79.1: bool), "attempt to add with overflow") -> bb22; // scope 11 at src\keccak.rs:32:62: 32:69
    }

    bb22: {                             
        _78 = (_79.0: usize);            // scope 11 at src\keccak.rs:32:62: 32:69
        _75 = const std::ops::Index::index(_76, _78) -> bb23; // scope 11 at src\keccak.rs:32:58: 32:70
    }

    bb23: {                             
        _74 = (*_75);                    // scope 11 at src\keccak.rs:32:58: 32:70
        StorageDead(_78);                // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_76);                // scope 11 at src\keccak.rs:32:70: 32:70
        _55 = BitXor(_56, _74);          // scope 11 at src\keccak.rs:32:19: 32:70
        StorageDead(_74);                // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_56);                // scope 11 at src\keccak.rs:32:70: 32:70
        StorageLive(_80);                // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_81);                // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_82);                // scope 11 at src\keccak.rs:92:43: 92:45
        StorageLive(_83);                // scope 11 at src\keccak.rs:92:43: 92:45
        _83 = _1;                        // scope 11 at src\keccak.rs:92:43: 92:45
        _82 = _83 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:92:43: 92:45
        StorageDead(_83);                // scope 11 at src\keccak.rs:92:45: 92:45
        StorageLive(_84);                // scope 11 at src\keccak.rs:32:77: 32:84
        _85 = CheckedAdd(const 1usize, const 20usize); // scope 11 at src\keccak.rs:32:77: 32:84
        assert(!(_85.1: bool), "attempt to add with overflow") -> bb24; // scope 11 at src\keccak.rs:32:77: 32:84
    }

    bb24: {                             
        _84 = (_85.0: usize);            // scope 11 at src\keccak.rs:32:77: 32:84
        _81 = const std::ops::Index::index(_82, _84) -> bb25; // scope 11 at src\keccak.rs:32:73: 32:85
    }

    bb25: {                             
        _80 = (*_81);                    // scope 11 at src\keccak.rs:32:73: 32:85
        StorageDead(_84);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_82);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageLive(_86);                // scope 11 at src\keccak.rs:92:34: 92:35
        _86 = const 1usize;              // scope 11 at src\keccak.rs:92:34: 92:35
        _87 = Len(_4);                   // scope 11 at src\keccak.rs:32:9: 32:16
        _88 = Lt(_86, _87);              // scope 11 at src\keccak.rs:32:9: 32:16
        assert(_88, "index out of bounds: the len is {} but the index is {}", _87, _86) -> bb26; // scope 11 at src\keccak.rs:32:9: 32:16
    }

    bb26: {                             
        _4[_86] = BitXor(_55, _80);      // scope 11 at src\keccak.rs:32:9: 32:85
        StorageDead(_80);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_55);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_81);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_75);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_69);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_63);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageLive(_89);                // scope 11 at src\keccak.rs:32:19: 32:70
        StorageLive(_90);                // scope 11 at src\keccak.rs:32:19: 32:55
        StorageLive(_91);                // scope 11 at src\keccak.rs:32:19: 32:40
        StorageLive(_92);                // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_93);                // scope 11 at src\keccak.rs:93:34: 93:35
        _93 = const 2usize;              // scope 11 at src\keccak.rs:93:34: 93:35
        _94 = Len((*_1));                // scope 11 at src\keccak.rs:32:19: 32:26
        _95 = Lt(_93, _94);              // scope 11 at src\keccak.rs:32:19: 32:26
        assert(_95, "index out of bounds: the len is {} but the index is {}", _94, _93) -> bb27; // scope 11 at src\keccak.rs:32:19: 32:26
    }

    bb27: {                             
        _92 = (*_1)[_93];                // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_96);                // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_97);                // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_98);                // scope 11 at src\keccak.rs:93:43: 93:45
        StorageLive(_99);                // scope 11 at src\keccak.rs:93:43: 93:45
        _99 = _1;                        // scope 11 at src\keccak.rs:93:43: 93:45
        _98 = _99 as &[u64] (Unsize);    // scope 11 at src\keccak.rs:93:43: 93:45
        StorageDead(_99);                // scope 11 at src\keccak.rs:93:45: 93:45
        StorageLive(_100);               // scope 11 at src\keccak.rs:32:33: 32:39
        _101 = CheckedAdd(const 2usize, const 5usize); // scope 11 at src\keccak.rs:32:33: 32:39
        assert(!(_101.1: bool), "attempt to add with overflow") -> bb28; // scope 11 at src\keccak.rs:32:33: 32:39
    }

    bb28: {                             
        _100 = (_101.0: usize);          // scope 11 at src\keccak.rs:32:33: 32:39
        _97 = const std::ops::Index::index(_98, _100) -> bb29; // scope 11 at src\keccak.rs:32:29: 32:40
    }

    bb29: {                             
        _96 = (*_97);                    // scope 11 at src\keccak.rs:32:29: 32:40
        StorageDead(_100);               // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_98);                // scope 11 at src\keccak.rs:32:40: 32:40
        _91 = BitXor(_92, _96);          // scope 11 at src\keccak.rs:32:19: 32:40
        StorageDead(_96);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_92);                // scope 11 at src\keccak.rs:32:40: 32:40
        StorageLive(_102);               // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_103);               // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_104);               // scope 11 at src\keccak.rs:93:43: 93:45
        StorageLive(_105);               // scope 11 at src\keccak.rs:93:43: 93:45
        _105 = _1;                       // scope 11 at src\keccak.rs:93:43: 93:45
        _104 = _105 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:93:43: 93:45
        StorageDead(_105);               // scope 11 at src\keccak.rs:93:45: 93:45
        StorageLive(_106);               // scope 11 at src\keccak.rs:32:47: 32:54
        _107 = CheckedAdd(const 2usize, const 10usize); // scope 11 at src\keccak.rs:32:47: 32:54
        assert(!(_107.1: bool), "attempt to add with overflow") -> bb30; // scope 11 at src\keccak.rs:32:47: 32:54
    }

    bb30: {                             
        _106 = (_107.0: usize);          // scope 11 at src\keccak.rs:32:47: 32:54
        _103 = const std::ops::Index::index(_104, _106) -> bb31; // scope 11 at src\keccak.rs:32:43: 32:55
    }

    bb31: {                             
        _102 = (*_103);                  // scope 11 at src\keccak.rs:32:43: 32:55
        StorageDead(_106);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_104);               // scope 11 at src\keccak.rs:32:55: 32:55
        _90 = BitXor(_91, _102);         // scope 11 at src\keccak.rs:32:19: 32:55
        StorageDead(_102);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_91);                // scope 11 at src\keccak.rs:32:55: 32:55
        StorageLive(_108);               // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_109);               // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_110);               // scope 11 at src\keccak.rs:93:43: 93:45
        StorageLive(_111);               // scope 11 at src\keccak.rs:93:43: 93:45
        _111 = _1;                       // scope 11 at src\keccak.rs:93:43: 93:45
        _110 = _111 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:93:43: 93:45
        StorageDead(_111);               // scope 11 at src\keccak.rs:93:45: 93:45
        StorageLive(_112);               // scope 11 at src\keccak.rs:32:62: 32:69
        _113 = CheckedAdd(const 2usize, const 15usize); // scope 11 at src\keccak.rs:32:62: 32:69
        assert(!(_113.1: bool), "attempt to add with overflow") -> bb32; // scope 11 at src\keccak.rs:32:62: 32:69
    }

    bb32: {                             
        _112 = (_113.0: usize);          // scope 11 at src\keccak.rs:32:62: 32:69
        _109 = const std::ops::Index::index(_110, _112) -> bb33; // scope 11 at src\keccak.rs:32:58: 32:70
    }

    bb33: {                             
        _108 = (*_109);                  // scope 11 at src\keccak.rs:32:58: 32:70
        StorageDead(_112);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_110);               // scope 11 at src\keccak.rs:32:70: 32:70
        _89 = BitXor(_90, _108);         // scope 11 at src\keccak.rs:32:19: 32:70
        StorageDead(_108);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_90);                // scope 11 at src\keccak.rs:32:70: 32:70
        StorageLive(_114);               // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_115);               // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_116);               // scope 11 at src\keccak.rs:93:43: 93:45
        StorageLive(_117);               // scope 11 at src\keccak.rs:93:43: 93:45
        _117 = _1;                       // scope 11 at src\keccak.rs:93:43: 93:45
        _116 = _117 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:93:43: 93:45
        StorageDead(_117);               // scope 11 at src\keccak.rs:93:45: 93:45
        StorageLive(_118);               // scope 11 at src\keccak.rs:32:77: 32:84
        _119 = CheckedAdd(const 2usize, const 20usize); // scope 11 at src\keccak.rs:32:77: 32:84
        assert(!(_119.1: bool), "attempt to add with overflow") -> bb34; // scope 11 at src\keccak.rs:32:77: 32:84
    }

    bb34: {                             
        _118 = (_119.0: usize);          // scope 11 at src\keccak.rs:32:77: 32:84
        _115 = const std::ops::Index::index(_116, _118) -> bb35; // scope 11 at src\keccak.rs:32:73: 32:85
    }

    bb35: {                             
        _114 = (*_115);                  // scope 11 at src\keccak.rs:32:73: 32:85
        StorageDead(_118);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_116);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageLive(_120);               // scope 11 at src\keccak.rs:93:34: 93:35
        _120 = const 2usize;             // scope 11 at src\keccak.rs:93:34: 93:35
        _121 = Len(_4);                  // scope 11 at src\keccak.rs:32:9: 32:16
        _122 = Lt(_120, _121);           // scope 11 at src\keccak.rs:32:9: 32:16
        assert(_122, "index out of bounds: the len is {} but the index is {}", _121, _120) -> bb36; // scope 11 at src\keccak.rs:32:9: 32:16
    }

    bb36: {                             
        _4[_120] = BitXor(_89, _114);    // scope 11 at src\keccak.rs:32:9: 32:85
        StorageDead(_114);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_89);                // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_115);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_109);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_103);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_97);                // scope 11 at src\keccak.rs:32:86: 32:86
        StorageLive(_123);               // scope 11 at src\keccak.rs:32:19: 32:70
        StorageLive(_124);               // scope 11 at src\keccak.rs:32:19: 32:55
        StorageLive(_125);               // scope 11 at src\keccak.rs:32:19: 32:40
        StorageLive(_126);               // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_127);               // scope 11 at src\keccak.rs:94:34: 94:35
        _127 = const 3usize;             // scope 11 at src\keccak.rs:94:34: 94:35
        _128 = Len((*_1));               // scope 11 at src\keccak.rs:32:19: 32:26
        _129 = Lt(_127, _128);           // scope 11 at src\keccak.rs:32:19: 32:26
        assert(_129, "index out of bounds: the len is {} but the index is {}", _128, _127) -> bb37; // scope 11 at src\keccak.rs:32:19: 32:26
    }

    bb37: {                             
        _126 = (*_1)[_127];              // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_130);               // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_131);               // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_132);               // scope 11 at src\keccak.rs:94:43: 94:45
        StorageLive(_133);               // scope 11 at src\keccak.rs:94:43: 94:45
        _133 = _1;                       // scope 11 at src\keccak.rs:94:43: 94:45
        _132 = _133 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:94:43: 94:45
        StorageDead(_133);               // scope 11 at src\keccak.rs:94:45: 94:45
        StorageLive(_134);               // scope 11 at src\keccak.rs:32:33: 32:39
        _135 = CheckedAdd(const 3usize, const 5usize); // scope 11 at src\keccak.rs:32:33: 32:39
        assert(!(_135.1: bool), "attempt to add with overflow") -> bb38; // scope 11 at src\keccak.rs:32:33: 32:39
    }

    bb38: {                             
        _134 = (_135.0: usize);          // scope 11 at src\keccak.rs:32:33: 32:39
        _131 = const std::ops::Index::index(_132, _134) -> bb39; // scope 11 at src\keccak.rs:32:29: 32:40
    }

    bb39: {                             
        _130 = (*_131);                  // scope 11 at src\keccak.rs:32:29: 32:40
        StorageDead(_134);               // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_132);               // scope 11 at src\keccak.rs:32:40: 32:40
        _125 = BitXor(_126, _130);       // scope 11 at src\keccak.rs:32:19: 32:40
        StorageDead(_130);               // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_126);               // scope 11 at src\keccak.rs:32:40: 32:40
        StorageLive(_136);               // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_137);               // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_138);               // scope 11 at src\keccak.rs:94:43: 94:45
        StorageLive(_139);               // scope 11 at src\keccak.rs:94:43: 94:45
        _139 = _1;                       // scope 11 at src\keccak.rs:94:43: 94:45
        _138 = _139 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:94:43: 94:45
        StorageDead(_139);               // scope 11 at src\keccak.rs:94:45: 94:45
        StorageLive(_140);               // scope 11 at src\keccak.rs:32:47: 32:54
        _141 = CheckedAdd(const 3usize, const 10usize); // scope 11 at src\keccak.rs:32:47: 32:54
        assert(!(_141.1: bool), "attempt to add with overflow") -> bb40; // scope 11 at src\keccak.rs:32:47: 32:54
    }

    bb40: {                             
        _140 = (_141.0: usize);          // scope 11 at src\keccak.rs:32:47: 32:54
        _137 = const std::ops::Index::index(_138, _140) -> bb41; // scope 11 at src\keccak.rs:32:43: 32:55
    }

    bb41: {                             
        _136 = (*_137);                  // scope 11 at src\keccak.rs:32:43: 32:55
        StorageDead(_140);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_138);               // scope 11 at src\keccak.rs:32:55: 32:55
        _124 = BitXor(_125, _136);       // scope 11 at src\keccak.rs:32:19: 32:55
        StorageDead(_136);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_125);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageLive(_142);               // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_143);               // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_144);               // scope 11 at src\keccak.rs:94:43: 94:45
        StorageLive(_145);               // scope 11 at src\keccak.rs:94:43: 94:45
        _145 = _1;                       // scope 11 at src\keccak.rs:94:43: 94:45
        _144 = _145 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:94:43: 94:45
        StorageDead(_145);               // scope 11 at src\keccak.rs:94:45: 94:45
        StorageLive(_146);               // scope 11 at src\keccak.rs:32:62: 32:69
        _147 = CheckedAdd(const 3usize, const 15usize); // scope 11 at src\keccak.rs:32:62: 32:69
        assert(!(_147.1: bool), "attempt to add with overflow") -> bb42; // scope 11 at src\keccak.rs:32:62: 32:69
    }

    bb42: {                             
        _146 = (_147.0: usize);          // scope 11 at src\keccak.rs:32:62: 32:69
        _143 = const std::ops::Index::index(_144, _146) -> bb43; // scope 11 at src\keccak.rs:32:58: 32:70
    }

    bb43: {                             
        _142 = (*_143);                  // scope 11 at src\keccak.rs:32:58: 32:70
        StorageDead(_146);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_144);               // scope 11 at src\keccak.rs:32:70: 32:70
        _123 = BitXor(_124, _142);       // scope 11 at src\keccak.rs:32:19: 32:70
        StorageDead(_142);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_124);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageLive(_148);               // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_149);               // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_150);               // scope 11 at src\keccak.rs:94:43: 94:45
        StorageLive(_151);               // scope 11 at src\keccak.rs:94:43: 94:45
        _151 = _1;                       // scope 11 at src\keccak.rs:94:43: 94:45
        _150 = _151 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:94:43: 94:45
        StorageDead(_151);               // scope 11 at src\keccak.rs:94:45: 94:45
        StorageLive(_152);               // scope 11 at src\keccak.rs:32:77: 32:84
        _153 = CheckedAdd(const 3usize, const 20usize); // scope 11 at src\keccak.rs:32:77: 32:84
        assert(!(_153.1: bool), "attempt to add with overflow") -> bb44; // scope 11 at src\keccak.rs:32:77: 32:84
    }

    bb44: {                             
        _152 = (_153.0: usize);          // scope 11 at src\keccak.rs:32:77: 32:84
        _149 = const std::ops::Index::index(_150, _152) -> bb45; // scope 11 at src\keccak.rs:32:73: 32:85
    }

    bb45: {                             
        _148 = (*_149);                  // scope 11 at src\keccak.rs:32:73: 32:85
        StorageDead(_152);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_150);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageLive(_154);               // scope 11 at src\keccak.rs:94:34: 94:35
        _154 = const 3usize;             // scope 11 at src\keccak.rs:94:34: 94:35
        _155 = Len(_4);                  // scope 11 at src\keccak.rs:32:9: 32:16
        _156 = Lt(_154, _155);           // scope 11 at src\keccak.rs:32:9: 32:16
        assert(_156, "index out of bounds: the len is {} but the index is {}", _155, _154) -> bb46; // scope 11 at src\keccak.rs:32:9: 32:16
    }

    bb46: {                             
        _4[_154] = BitXor(_123, _148);   // scope 11 at src\keccak.rs:32:9: 32:85
        StorageDead(_148);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_123);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_149);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_143);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_137);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_131);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageLive(_157);               // scope 11 at src\keccak.rs:32:19: 32:70
        StorageLive(_158);               // scope 11 at src\keccak.rs:32:19: 32:55
        StorageLive(_159);               // scope 11 at src\keccak.rs:32:19: 32:40
        StorageLive(_160);               // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_161);               // scope 11 at src\keccak.rs:95:34: 95:35
        _161 = const 4usize;             // scope 11 at src\keccak.rs:95:34: 95:35
        _162 = Len((*_1));               // scope 11 at src\keccak.rs:32:19: 32:26
        _163 = Lt(_161, _162);           // scope 11 at src\keccak.rs:32:19: 32:26
        assert(_163, "index out of bounds: the len is {} but the index is {}", _162, _161) -> bb47; // scope 11 at src\keccak.rs:32:19: 32:26
    }

    bb47: {                             
        _160 = (*_1)[_161];              // scope 11 at src\keccak.rs:32:19: 32:26
        StorageLive(_164);               // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_165);               // scope 11 at src\keccak.rs:32:29: 32:40
        StorageLive(_166);               // scope 11 at src\keccak.rs:95:43: 95:45
        StorageLive(_167);               // scope 11 at src\keccak.rs:95:43: 95:45
        _167 = _1;                       // scope 11 at src\keccak.rs:95:43: 95:45
        _166 = _167 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:95:43: 95:45
        StorageDead(_167);               // scope 11 at src\keccak.rs:95:45: 95:45
        StorageLive(_168);               // scope 11 at src\keccak.rs:32:33: 32:39
        _169 = CheckedAdd(const 4usize, const 5usize); // scope 11 at src\keccak.rs:32:33: 32:39
        assert(!(_169.1: bool), "attempt to add with overflow") -> bb48; // scope 11 at src\keccak.rs:32:33: 32:39
    }

    bb48: {                             
        _168 = (_169.0: usize);          // scope 11 at src\keccak.rs:32:33: 32:39
        _165 = const std::ops::Index::index(_166, _168) -> bb49; // scope 11 at src\keccak.rs:32:29: 32:40
    }

    bb49: {                             
        _164 = (*_165);                  // scope 11 at src\keccak.rs:32:29: 32:40
        StorageDead(_168);               // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_166);               // scope 11 at src\keccak.rs:32:40: 32:40
        _159 = BitXor(_160, _164);       // scope 11 at src\keccak.rs:32:19: 32:40
        StorageDead(_164);               // scope 11 at src\keccak.rs:32:40: 32:40
        StorageDead(_160);               // scope 11 at src\keccak.rs:32:40: 32:40
        StorageLive(_170);               // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_171);               // scope 11 at src\keccak.rs:32:43: 32:55
        StorageLive(_172);               // scope 11 at src\keccak.rs:95:43: 95:45
        StorageLive(_173);               // scope 11 at src\keccak.rs:95:43: 95:45
        _173 = _1;                       // scope 11 at src\keccak.rs:95:43: 95:45
        _172 = _173 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:95:43: 95:45
        StorageDead(_173);               // scope 11 at src\keccak.rs:95:45: 95:45
        StorageLive(_174);               // scope 11 at src\keccak.rs:32:47: 32:54
        _175 = CheckedAdd(const 4usize, const 10usize); // scope 11 at src\keccak.rs:32:47: 32:54
        assert(!(_175.1: bool), "attempt to add with overflow") -> bb50; // scope 11 at src\keccak.rs:32:47: 32:54
    }

    bb50: {                             
        _174 = (_175.0: usize);          // scope 11 at src\keccak.rs:32:47: 32:54
        _171 = const std::ops::Index::index(_172, _174) -> bb51; // scope 11 at src\keccak.rs:32:43: 32:55
    }

    bb51: {                             
        _170 = (*_171);                  // scope 11 at src\keccak.rs:32:43: 32:55
        StorageDead(_174);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_172);               // scope 11 at src\keccak.rs:32:55: 32:55
        _158 = BitXor(_159, _170);       // scope 11 at src\keccak.rs:32:19: 32:55
        StorageDead(_170);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageDead(_159);               // scope 11 at src\keccak.rs:32:55: 32:55
        StorageLive(_176);               // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_177);               // scope 11 at src\keccak.rs:32:58: 32:70
        StorageLive(_178);               // scope 11 at src\keccak.rs:95:43: 95:45
        StorageLive(_179);               // scope 11 at src\keccak.rs:95:43: 95:45
        _179 = _1;                       // scope 11 at src\keccak.rs:95:43: 95:45
        _178 = _179 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:95:43: 95:45
        StorageDead(_179);               // scope 11 at src\keccak.rs:95:45: 95:45
        StorageLive(_180);               // scope 11 at src\keccak.rs:32:62: 32:69
        _181 = CheckedAdd(const 4usize, const 15usize); // scope 11 at src\keccak.rs:32:62: 32:69
        assert(!(_181.1: bool), "attempt to add with overflow") -> bb52; // scope 11 at src\keccak.rs:32:62: 32:69
    }

    bb52: {                             
        _180 = (_181.0: usize);          // scope 11 at src\keccak.rs:32:62: 32:69
        _177 = const std::ops::Index::index(_178, _180) -> bb53; // scope 11 at src\keccak.rs:32:58: 32:70
    }

    bb53: {                             
        _176 = (*_177);                  // scope 11 at src\keccak.rs:32:58: 32:70
        StorageDead(_180);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_178);               // scope 11 at src\keccak.rs:32:70: 32:70
        _157 = BitXor(_158, _176);       // scope 11 at src\keccak.rs:32:19: 32:70
        StorageDead(_176);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageDead(_158);               // scope 11 at src\keccak.rs:32:70: 32:70
        StorageLive(_182);               // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_183);               // scope 11 at src\keccak.rs:32:73: 32:85
        StorageLive(_184);               // scope 11 at src\keccak.rs:95:43: 95:45
        StorageLive(_185);               // scope 11 at src\keccak.rs:95:43: 95:45
        _185 = _1;                       // scope 11 at src\keccak.rs:95:43: 95:45
        _184 = _185 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:95:43: 95:45
        StorageDead(_185);               // scope 11 at src\keccak.rs:95:45: 95:45
        StorageLive(_186);               // scope 11 at src\keccak.rs:32:77: 32:84
        _187 = CheckedAdd(const 4usize, const 20usize); // scope 11 at src\keccak.rs:32:77: 32:84
        assert(!(_187.1: bool), "attempt to add with overflow") -> bb54; // scope 11 at src\keccak.rs:32:77: 32:84
    }

    bb54: {                             
        _186 = (_187.0: usize);          // scope 11 at src\keccak.rs:32:77: 32:84
        _183 = const std::ops::Index::index(_184, _186) -> bb55; // scope 11 at src\keccak.rs:32:73: 32:85
    }

    bb55: {                             
        _182 = (*_183);                  // scope 11 at src\keccak.rs:32:73: 32:85
        StorageDead(_186);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_184);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageLive(_188);               // scope 11 at src\keccak.rs:95:34: 95:35
        _188 = const 4usize;             // scope 11 at src\keccak.rs:95:34: 95:35
        _189 = Len(_4);                  // scope 11 at src\keccak.rs:32:9: 32:16
        _190 = Lt(_188, _189);           // scope 11 at src\keccak.rs:32:9: 32:16
        assert(_190, "index out of bounds: the len is {} but the index is {}", _189, _188) -> bb56; // scope 11 at src\keccak.rs:32:9: 32:16
    }

    bb56: {                             
        _4[_188] = BitXor(_157, _182);   // scope 11 at src\keccak.rs:32:9: 32:85
        StorageDead(_182);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_157);               // scope 11 at src\keccak.rs:32:85: 32:85
        StorageDead(_183);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_177);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_171);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageDead(_165);               // scope 11 at src\keccak.rs:32:86: 32:86
        StorageLive(_191);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_192);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_193);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_194);               // scope 11 at src\keccak.rs:96:44: 96:46
        _194 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _193 = _194 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_194);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_195);               // scope 11 at src\keccak.rs:39:18: 39:30
        StorageLive(_196);               // scope 11 at src\keccak.rs:39:18: 39:26
        _197 = CheckedAdd(const 0usize, const 4usize); // scope 11 at src\keccak.rs:39:18: 39:26
        assert(!(_197.1: bool), "attempt to add with overflow") -> bb57; // scope 11 at src\keccak.rs:39:18: 39:26
    }

    bb57: {                             
        _196 = (_197.0: usize);          // scope 11 at src\keccak.rs:39:18: 39:26
        _198 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:18: 39:30
        assert(!_198, "attempt to calculate the remainder with a divisor of zero") -> bb58; // scope 11 at src\keccak.rs:39:18: 39:30
    }

    bb58: {                             
        _195 = Rem(_196, const 5usize);  // scope 11 at src\keccak.rs:39:18: 39:30
        StorageDead(_196);               // scope 11 at src\keccak.rs:39:30: 39:30
        _192 = const std::ops::Index::index(_193, _195) -> bb59; // scope 11 at src\keccak.rs:39:14: 39:31
    }

    bb59: {                             
        _191 = (*_192);                  // scope 11 at src\keccak.rs:39:14: 39:31
        StorageDead(_195);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageDead(_193);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageLive(_199);               // scope 11 at src\keccak.rs:27:29: 27:59
        StorageLive(_200);               // scope 11 at src\keccak.rs:27:30: 39:62
        StorageLive(_201);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_202);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_203);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_204);               // scope 11 at src\keccak.rs:96:44: 96:46
        _204 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _203 = _204 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_204);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_205);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_206);               // scope 11 at src\keccak.rs:39:46: 39:54
        _207 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_207.1: bool), "attempt to add with overflow") -> bb60; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb60: {                             
        _206 = (_207.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _208 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_208, "attempt to calculate the remainder with a divisor of zero") -> bb61; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb61: {                             
        _205 = Rem(_206, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_206);               // scope 11 at src\keccak.rs:39:58: 39:58
        _202 = const std::ops::Index::index(_203, _205) -> bb62; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb62: {                             
        _201 = (*_202);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_205);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_203);               // scope 11 at src\keccak.rs:39:59: 39:59
        _209 = CheckedShl(_201, const 1i32); // scope 11 at src\keccak.rs:27:30: 39:62
        assert(!(_209.1: bool), "attempt to shift left with overflow") -> bb63; // scope 11 at src\keccak.rs:27:30: 39:62
    }

    bb63: {                             
        _200 = (_209.0: u64);            // scope 11 at src\keccak.rs:27:30: 39:62
        StorageDead(_201);               // scope 11 at src\keccak.rs:39:62: 39:62
        StorageLive(_210);               // scope 11 at src\keccak.rs:27:42: 27:59
        StorageLive(_211);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_212);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_213);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_214);               // scope 11 at src\keccak.rs:96:44: 96:46
        _214 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _213 = _214 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_214);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_215);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_216);               // scope 11 at src\keccak.rs:39:46: 39:54
        _217 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_217.1: bool), "attempt to add with overflow") -> bb64; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb64: {                             
        _216 = (_217.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _218 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_218, "attempt to calculate the remainder with a divisor of zero") -> bb65; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb65: {                             
        _215 = Rem(_216, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_216);               // scope 11 at src\keccak.rs:39:58: 39:58
        _212 = const std::ops::Index::index(_213, _215) -> bb66; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb66: {                             
        _211 = (*_212);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_215);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_213);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageLive(_219);               // scope 11 at src\keccak.rs:27:50: 39:62
        _220 = CheckedSub(const 64i32, const 1i32); // scope 11 at src\keccak.rs:27:50: 39:62
        assert(!(_220.1: bool), "attempt to subtract with overflow") -> bb67; // scope 11 at src\keccak.rs:27:50: 39:62
    }

    bb67: {                             
        _219 = (_220.0: i32);            // scope 11 at src\keccak.rs:27:50: 39:62
        _221 = CheckedShr(_211, _219);   // scope 11 at src\keccak.rs:27:42: 27:59
        assert(!(_221.1: bool), "attempt to shift right with overflow") -> bb68; // scope 11 at src\keccak.rs:27:42: 27:59
    }

    bb68: {                             
        _210 = (_221.0: u64);            // scope 11 at src\keccak.rs:27:42: 27:59
        StorageDead(_219);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_211);               // scope 11 at src\keccak.rs:27:59: 27:59
        _199 = BitOr(_200, _210);        // scope 11 at src\keccak.rs:27:29: 27:59
        StorageDead(_210);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_200);               // scope 11 at src\keccak.rs:27:59: 27:59
        _3 = BitXor(_191, _199);         // scope 11 at src\keccak.rs:39:9: 39:63
        StorageDead(_199);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_191);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_212);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_202);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_192);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageLive(_222);               // scope 11 at src\keccak.rs:96:49: 96:50
        _222 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_223);               // scope 11 at src\keccak.rs:43:54: 43:55
        _223 = const 0usize;             // scope 11 at src\keccak.rs:43:54: 43:55
        _224 = Len((*_1));               // scope 11 at src\keccak.rs:35:9: 35:21
        _225 = Lt(_223, _224);           // scope 11 at src\keccak.rs:35:9: 35:21
        assert(_225, "index out of bounds: the len is {} but the index is {}", _224, _223) -> bb69; // scope 11 at src\keccak.rs:35:9: 35:21
    }

    bb69: {                             
        (*_1)[_223] = BitXor((*_1)[_223], _222); // scope 11 at src\keccak.rs:35:9: 96:50
        StorageDead(_222);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageLive(_226);               // scope 11 at src\keccak.rs:96:49: 96:50
        _226 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_227);               // scope 11 at src\keccak.rs:35:29: 35:41
        StorageLive(_228);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_229);               // scope 11 at src\keccak.rs:96:35: 96:37
        _229 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _228 = _229 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_229);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_230);               // scope 11 at src\keccak.rs:35:33: 35:40
        _231 = CheckedAdd(const 0usize, const 5usize); // scope 11 at src\keccak.rs:35:33: 35:40
        assert(!(_231.1: bool), "attempt to add with overflow") -> bb70; // scope 11 at src\keccak.rs:35:33: 35:40
    }

    bb70: {                             
        _230 = (_231.0: usize);          // scope 11 at src\keccak.rs:35:33: 35:40
        _227 = const std::ops::IndexMut::index_mut(_228, _230) -> bb71; // scope 11 at src\keccak.rs:35:29: 35:41
    }

    bb71: {                             
        StorageDead(_230);               // scope 11 at src\keccak.rs:35:41: 35:41
        StorageDead(_228);               // scope 11 at src\keccak.rs:35:41: 35:41
        (*_227) = BitXor((*_227), _226); // scope 11 at src\keccak.rs:35:29: 96:50
        StorageDead(_226);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_227);               // scope 11 at src\keccak.rs:35:48: 35:48
        StorageLive(_232);               // scope 11 at src\keccak.rs:96:49: 96:50
        _232 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_233);               // scope 11 at src\keccak.rs:35:49: 35:61
        StorageLive(_234);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_235);               // scope 11 at src\keccak.rs:96:35: 96:37
        _235 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _234 = _235 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_235);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_236);               // scope 11 at src\keccak.rs:35:53: 35:60
        _237 = CheckedAdd(const 0usize, const 10usize); // scope 11 at src\keccak.rs:35:53: 35:60
        assert(!(_237.1: bool), "attempt to add with overflow") -> bb72; // scope 11 at src\keccak.rs:35:53: 35:60
    }

    bb72: {                             
        _236 = (_237.0: usize);          // scope 11 at src\keccak.rs:35:53: 35:60
        _233 = const std::ops::IndexMut::index_mut(_234, _236) -> bb73; // scope 11 at src\keccak.rs:35:49: 35:61
    }

    bb73: {                             
        StorageDead(_236);               // scope 11 at src\keccak.rs:35:61: 35:61
        StorageDead(_234);               // scope 11 at src\keccak.rs:35:61: 35:61
        (*_233) = BitXor((*_233), _232); // scope 11 at src\keccak.rs:35:49: 96:50
        StorageDead(_232);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_233);               // scope 11 at src\keccak.rs:35:68: 35:68
        StorageLive(_238);               // scope 11 at src\keccak.rs:96:49: 96:50
        _238 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_239);               // scope 11 at src\keccak.rs:36:9: 36:21
        StorageLive(_240);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_241);               // scope 11 at src\keccak.rs:96:35: 96:37
        _241 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _240 = _241 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_241);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_242);               // scope 11 at src\keccak.rs:36:13: 36:20
        _243 = CheckedAdd(const 0usize, const 15usize); // scope 11 at src\keccak.rs:36:13: 36:20
        assert(!(_243.1: bool), "attempt to add with overflow") -> bb74; // scope 11 at src\keccak.rs:36:13: 36:20
    }

    bb74: {                             
        _242 = (_243.0: usize);          // scope 11 at src\keccak.rs:36:13: 36:20
        _239 = const std::ops::IndexMut::index_mut(_240, _242) -> bb75; // scope 11 at src\keccak.rs:36:9: 36:21
    }

    bb75: {                             
        StorageDead(_242);               // scope 11 at src\keccak.rs:36:21: 36:21
        StorageDead(_240);               // scope 11 at src\keccak.rs:36:21: 36:21
        (*_239) = BitXor((*_239), _238); // scope 11 at src\keccak.rs:36:9: 96:50
        StorageDead(_238);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_239);               // scope 11 at src\keccak.rs:36:28: 36:28
        StorageLive(_244);               // scope 11 at src\keccak.rs:96:49: 96:50
        _244 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_245);               // scope 11 at src\keccak.rs:36:29: 36:41
        StorageLive(_246);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_247);               // scope 11 at src\keccak.rs:96:35: 96:37
        _247 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _246 = _247 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_247);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_248);               // scope 11 at src\keccak.rs:36:33: 36:40
        _249 = CheckedAdd(const 0usize, const 20usize); // scope 11 at src\keccak.rs:36:33: 36:40
        assert(!(_249.1: bool), "attempt to add with overflow") -> bb76; // scope 11 at src\keccak.rs:36:33: 36:40
    }

    bb76: {                             
        _248 = (_249.0: usize);          // scope 11 at src\keccak.rs:36:33: 36:40
        _245 = const std::ops::IndexMut::index_mut(_246, _248) -> bb77; // scope 11 at src\keccak.rs:36:29: 36:41
    }

    bb77: {                             
        StorageDead(_248);               // scope 11 at src\keccak.rs:36:41: 36:41
        StorageDead(_246);               // scope 11 at src\keccak.rs:36:41: 36:41
        (*_245) = BitXor((*_245), _244); // scope 11 at src\keccak.rs:36:29: 96:50
        StorageDead(_244);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_245);               // scope 11 at src\keccak.rs:36:48: 36:48
        StorageLive(_250);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_251);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_252);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_253);               // scope 11 at src\keccak.rs:96:44: 96:46
        _253 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _252 = _253 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_253);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_254);               // scope 11 at src\keccak.rs:39:18: 39:30
        StorageLive(_255);               // scope 11 at src\keccak.rs:39:18: 39:26
        _256 = CheckedAdd(const 1usize, const 4usize); // scope 11 at src\keccak.rs:39:18: 39:26
        assert(!(_256.1: bool), "attempt to add with overflow") -> bb78; // scope 11 at src\keccak.rs:39:18: 39:26
    }

    bb78: {                             
        _255 = (_256.0: usize);          // scope 11 at src\keccak.rs:39:18: 39:26
        _257 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:18: 39:30
        assert(!_257, "attempt to calculate the remainder with a divisor of zero") -> bb79; // scope 11 at src\keccak.rs:39:18: 39:30
    }

    bb79: {                             
        _254 = Rem(_255, const 5usize);  // scope 11 at src\keccak.rs:39:18: 39:30
        StorageDead(_255);               // scope 11 at src\keccak.rs:39:30: 39:30
        _251 = const std::ops::Index::index(_252, _254) -> bb80; // scope 11 at src\keccak.rs:39:14: 39:31
    }

    bb80: {                             
        _250 = (*_251);                  // scope 11 at src\keccak.rs:39:14: 39:31
        StorageDead(_254);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageDead(_252);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageLive(_258);               // scope 11 at src\keccak.rs:27:29: 27:59
        StorageLive(_259);               // scope 11 at src\keccak.rs:27:30: 39:62
        StorageLive(_260);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_261);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_262);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_263);               // scope 11 at src\keccak.rs:96:44: 96:46
        _263 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _262 = _263 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_263);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_264);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_265);               // scope 11 at src\keccak.rs:39:46: 39:54
        _266 = CheckedAdd(const 1usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_266.1: bool), "attempt to add with overflow") -> bb81; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb81: {                             
        _265 = (_266.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _267 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_267, "attempt to calculate the remainder with a divisor of zero") -> bb82; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb82: {                             
        _264 = Rem(_265, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_265);               // scope 11 at src\keccak.rs:39:58: 39:58
        _261 = const std::ops::Index::index(_262, _264) -> bb83; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb83: {                             
        _260 = (*_261);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_264);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_262);               // scope 11 at src\keccak.rs:39:59: 39:59
        _268 = CheckedShl(_260, const 1i32); // scope 11 at src\keccak.rs:27:30: 39:62
        assert(!(_268.1: bool), "attempt to shift left with overflow") -> bb84; // scope 11 at src\keccak.rs:27:30: 39:62
    }

    bb84: {                             
        _259 = (_268.0: u64);            // scope 11 at src\keccak.rs:27:30: 39:62
        StorageDead(_260);               // scope 11 at src\keccak.rs:39:62: 39:62
        StorageLive(_269);               // scope 11 at src\keccak.rs:27:42: 27:59
        StorageLive(_270);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_271);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_272);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_273);               // scope 11 at src\keccak.rs:96:44: 96:46
        _273 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _272 = _273 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_273);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_274);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_275);               // scope 11 at src\keccak.rs:39:46: 39:54
        _276 = CheckedAdd(const 1usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_276.1: bool), "attempt to add with overflow") -> bb85; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb85: {                             
        _275 = (_276.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _277 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_277, "attempt to calculate the remainder with a divisor of zero") -> bb86; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb86: {                             
        _274 = Rem(_275, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_275);               // scope 11 at src\keccak.rs:39:58: 39:58
        _271 = const std::ops::Index::index(_272, _274) -> bb87; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb87: {                             
        _270 = (*_271);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_274);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_272);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageLive(_278);               // scope 11 at src\keccak.rs:27:50: 39:62
        _279 = CheckedSub(const 64i32, const 1i32); // scope 11 at src\keccak.rs:27:50: 39:62
        assert(!(_279.1: bool), "attempt to subtract with overflow") -> bb88; // scope 11 at src\keccak.rs:27:50: 39:62
    }

    bb88: {                             
        _278 = (_279.0: i32);            // scope 11 at src\keccak.rs:27:50: 39:62
        _280 = CheckedShr(_270, _278);   // scope 11 at src\keccak.rs:27:42: 27:59
        assert(!(_280.1: bool), "attempt to shift right with overflow") -> bb89; // scope 11 at src\keccak.rs:27:42: 27:59
    }

    bb89: {                             
        _269 = (_280.0: u64);            // scope 11 at src\keccak.rs:27:42: 27:59
        StorageDead(_278);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_270);               // scope 11 at src\keccak.rs:27:59: 27:59
        _258 = BitOr(_259, _269);        // scope 11 at src\keccak.rs:27:29: 27:59
        StorageDead(_269);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_259);               // scope 11 at src\keccak.rs:27:59: 27:59
        _3 = BitXor(_250, _258);         // scope 11 at src\keccak.rs:39:9: 39:63
        StorageDead(_258);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_250);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_271);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_261);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_251);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageLive(_281);               // scope 11 at src\keccak.rs:96:49: 96:50
        _281 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_282);               // scope 11 at src\keccak.rs:43:104: 43:105
        _282 = const 1usize;             // scope 11 at src\keccak.rs:43:104: 43:105
        _283 = Len((*_1));               // scope 11 at src\keccak.rs:35:9: 35:21
        _284 = Lt(_282, _283);           // scope 11 at src\keccak.rs:35:9: 35:21
        assert(_284, "index out of bounds: the len is {} but the index is {}", _283, _282) -> bb90; // scope 11 at src\keccak.rs:35:9: 35:21
    }

    bb90: {                             
        (*_1)[_282] = BitXor((*_1)[_282], _281); // scope 11 at src\keccak.rs:35:9: 96:50
        StorageDead(_281);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageLive(_285);               // scope 11 at src\keccak.rs:96:49: 96:50
        _285 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_286);               // scope 11 at src\keccak.rs:35:29: 35:41
        StorageLive(_287);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_288);               // scope 11 at src\keccak.rs:96:35: 96:37
        _288 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _287 = _288 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_288);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_289);               // scope 11 at src\keccak.rs:35:33: 35:40
        _290 = CheckedAdd(const 1usize, const 5usize); // scope 11 at src\keccak.rs:35:33: 35:40
        assert(!(_290.1: bool), "attempt to add with overflow") -> bb91; // scope 11 at src\keccak.rs:35:33: 35:40
    }

    bb91: {                             
        _289 = (_290.0: usize);          // scope 11 at src\keccak.rs:35:33: 35:40
        _286 = const std::ops::IndexMut::index_mut(_287, _289) -> bb92; // scope 11 at src\keccak.rs:35:29: 35:41
    }

    bb92: {                             
        StorageDead(_289);               // scope 11 at src\keccak.rs:35:41: 35:41
        StorageDead(_287);               // scope 11 at src\keccak.rs:35:41: 35:41
        (*_286) = BitXor((*_286), _285); // scope 11 at src\keccak.rs:35:29: 96:50
        StorageDead(_285);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_286);               // scope 11 at src\keccak.rs:35:48: 35:48
        StorageLive(_291);               // scope 11 at src\keccak.rs:96:49: 96:50
        _291 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_292);               // scope 11 at src\keccak.rs:35:49: 35:61
        StorageLive(_293);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_294);               // scope 11 at src\keccak.rs:96:35: 96:37
        _294 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _293 = _294 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_294);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_295);               // scope 11 at src\keccak.rs:35:53: 35:60
        _296 = CheckedAdd(const 1usize, const 10usize); // scope 11 at src\keccak.rs:35:53: 35:60
        assert(!(_296.1: bool), "attempt to add with overflow") -> bb93; // scope 11 at src\keccak.rs:35:53: 35:60
    }

    bb93: {                             
        _295 = (_296.0: usize);          // scope 11 at src\keccak.rs:35:53: 35:60
        _292 = const std::ops::IndexMut::index_mut(_293, _295) -> bb94; // scope 11 at src\keccak.rs:35:49: 35:61
    }

    bb94: {                             
        StorageDead(_295);               // scope 11 at src\keccak.rs:35:61: 35:61
        StorageDead(_293);               // scope 11 at src\keccak.rs:35:61: 35:61
        (*_292) = BitXor((*_292), _291); // scope 11 at src\keccak.rs:35:49: 96:50
        StorageDead(_291);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_292);               // scope 11 at src\keccak.rs:35:68: 35:68
        StorageLive(_297);               // scope 11 at src\keccak.rs:96:49: 96:50
        _297 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_298);               // scope 11 at src\keccak.rs:36:9: 36:21
        StorageLive(_299);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_300);               // scope 11 at src\keccak.rs:96:35: 96:37
        _300 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _299 = _300 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_300);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_301);               // scope 11 at src\keccak.rs:36:13: 36:20
        _302 = CheckedAdd(const 1usize, const 15usize); // scope 11 at src\keccak.rs:36:13: 36:20
        assert(!(_302.1: bool), "attempt to add with overflow") -> bb95; // scope 11 at src\keccak.rs:36:13: 36:20
    }

    bb95: {                             
        _301 = (_302.0: usize);          // scope 11 at src\keccak.rs:36:13: 36:20
        _298 = const std::ops::IndexMut::index_mut(_299, _301) -> bb96; // scope 11 at src\keccak.rs:36:9: 36:21
    }

    bb96: {                             
        StorageDead(_301);               // scope 11 at src\keccak.rs:36:21: 36:21
        StorageDead(_299);               // scope 11 at src\keccak.rs:36:21: 36:21
        (*_298) = BitXor((*_298), _297); // scope 11 at src\keccak.rs:36:9: 96:50
        StorageDead(_297);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_298);               // scope 11 at src\keccak.rs:36:28: 36:28
        StorageLive(_303);               // scope 11 at src\keccak.rs:96:49: 96:50
        _303 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_304);               // scope 11 at src\keccak.rs:36:29: 36:41
        StorageLive(_305);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_306);               // scope 11 at src\keccak.rs:96:35: 96:37
        _306 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _305 = _306 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_306);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_307);               // scope 11 at src\keccak.rs:36:33: 36:40
        _308 = CheckedAdd(const 1usize, const 20usize); // scope 11 at src\keccak.rs:36:33: 36:40
        assert(!(_308.1: bool), "attempt to add with overflow") -> bb97; // scope 11 at src\keccak.rs:36:33: 36:40
    }

    bb97: {                             
        _307 = (_308.0: usize);          // scope 11 at src\keccak.rs:36:33: 36:40
        _304 = const std::ops::IndexMut::index_mut(_305, _307) -> bb98; // scope 11 at src\keccak.rs:36:29: 36:41
    }

    bb98: {                             
        StorageDead(_307);               // scope 11 at src\keccak.rs:36:41: 36:41
        StorageDead(_305);               // scope 11 at src\keccak.rs:36:41: 36:41
        (*_304) = BitXor((*_304), _303); // scope 11 at src\keccak.rs:36:29: 96:50
        StorageDead(_303);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_304);               // scope 11 at src\keccak.rs:36:48: 36:48
        StorageLive(_309);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_310);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_311);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_312);               // scope 11 at src\keccak.rs:96:44: 96:46
        _312 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _311 = _312 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_312);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_313);               // scope 11 at src\keccak.rs:39:18: 39:30
        StorageLive(_314);               // scope 11 at src\keccak.rs:39:18: 39:26
        _315 = CheckedAdd(const 2usize, const 4usize); // scope 11 at src\keccak.rs:39:18: 39:26
        assert(!(_315.1: bool), "attempt to add with overflow") -> bb99; // scope 11 at src\keccak.rs:39:18: 39:26
    }

    bb99: {                             
        _314 = (_315.0: usize);          // scope 11 at src\keccak.rs:39:18: 39:26
        _316 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:18: 39:30
        assert(!_316, "attempt to calculate the remainder with a divisor of zero") -> bb100; // scope 11 at src\keccak.rs:39:18: 39:30
    }

    bb100: {                            
        _313 = Rem(_314, const 5usize);  // scope 11 at src\keccak.rs:39:18: 39:30
        StorageDead(_314);               // scope 11 at src\keccak.rs:39:30: 39:30
        _310 = const std::ops::Index::index(_311, _313) -> bb101; // scope 11 at src\keccak.rs:39:14: 39:31
    }

    bb101: {                            
        _309 = (*_310);                  // scope 11 at src\keccak.rs:39:14: 39:31
        StorageDead(_313);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageDead(_311);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageLive(_317);               // scope 11 at src\keccak.rs:27:29: 27:59
        StorageLive(_318);               // scope 11 at src\keccak.rs:27:30: 39:62
        StorageLive(_319);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_320);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_321);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_322);               // scope 11 at src\keccak.rs:96:44: 96:46
        _322 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _321 = _322 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_322);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_323);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_324);               // scope 11 at src\keccak.rs:39:46: 39:54
        _325 = CheckedAdd(const 2usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_325.1: bool), "attempt to add with overflow") -> bb102; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb102: {                            
        _324 = (_325.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _326 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_326, "attempt to calculate the remainder with a divisor of zero") -> bb103; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb103: {                            
        _323 = Rem(_324, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_324);               // scope 11 at src\keccak.rs:39:58: 39:58
        _320 = const std::ops::Index::index(_321, _323) -> bb104; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb104: {                            
        _319 = (*_320);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_323);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_321);               // scope 11 at src\keccak.rs:39:59: 39:59
        _327 = CheckedShl(_319, const 1i32); // scope 11 at src\keccak.rs:27:30: 39:62
        assert(!(_327.1: bool), "attempt to shift left with overflow") -> bb105; // scope 11 at src\keccak.rs:27:30: 39:62
    }

    bb105: {                            
        _318 = (_327.0: u64);            // scope 11 at src\keccak.rs:27:30: 39:62
        StorageDead(_319);               // scope 11 at src\keccak.rs:39:62: 39:62
        StorageLive(_328);               // scope 11 at src\keccak.rs:27:42: 27:59
        StorageLive(_329);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_330);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_331);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_332);               // scope 11 at src\keccak.rs:96:44: 96:46
        _332 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _331 = _332 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_332);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_333);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_334);               // scope 11 at src\keccak.rs:39:46: 39:54
        _335 = CheckedAdd(const 2usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_335.1: bool), "attempt to add with overflow") -> bb106; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb106: {                            
        _334 = (_335.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _336 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_336, "attempt to calculate the remainder with a divisor of zero") -> bb107; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb107: {                            
        _333 = Rem(_334, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_334);               // scope 11 at src\keccak.rs:39:58: 39:58
        _330 = const std::ops::Index::index(_331, _333) -> bb108; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb108: {                            
        _329 = (*_330);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_333);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_331);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageLive(_337);               // scope 11 at src\keccak.rs:27:50: 39:62
        _338 = CheckedSub(const 64i32, const 1i32); // scope 11 at src\keccak.rs:27:50: 39:62
        assert(!(_338.1: bool), "attempt to subtract with overflow") -> bb109; // scope 11 at src\keccak.rs:27:50: 39:62
    }

    bb109: {                            
        _337 = (_338.0: i32);            // scope 11 at src\keccak.rs:27:50: 39:62
        _339 = CheckedShr(_329, _337);   // scope 11 at src\keccak.rs:27:42: 27:59
        assert(!(_339.1: bool), "attempt to shift right with overflow") -> bb110; // scope 11 at src\keccak.rs:27:42: 27:59
    }

    bb110: {                            
        _328 = (_339.0: u64);            // scope 11 at src\keccak.rs:27:42: 27:59
        StorageDead(_337);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_329);               // scope 11 at src\keccak.rs:27:59: 27:59
        _317 = BitOr(_318, _328);        // scope 11 at src\keccak.rs:27:29: 27:59
        StorageDead(_328);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_318);               // scope 11 at src\keccak.rs:27:59: 27:59
        _3 = BitXor(_309, _317);         // scope 11 at src\keccak.rs:39:9: 39:63
        StorageDead(_317);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_309);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_330);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_320);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_310);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageLive(_340);               // scope 11 at src\keccak.rs:96:49: 96:50
        _340 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_341);               // scope 11 at src\keccak.rs:44:54: 44:55
        _341 = const 2usize;             // scope 11 at src\keccak.rs:44:54: 44:55
        _342 = Len((*_1));               // scope 11 at src\keccak.rs:35:9: 35:21
        _343 = Lt(_341, _342);           // scope 11 at src\keccak.rs:35:9: 35:21
        assert(_343, "index out of bounds: the len is {} but the index is {}", _342, _341) -> bb111; // scope 11 at src\keccak.rs:35:9: 35:21
    }

    bb111: {                            
        (*_1)[_341] = BitXor((*_1)[_341], _340); // scope 11 at src\keccak.rs:35:9: 96:50
        StorageDead(_340);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageLive(_344);               // scope 11 at src\keccak.rs:96:49: 96:50
        _344 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_345);               // scope 11 at src\keccak.rs:35:29: 35:41
        StorageLive(_346);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_347);               // scope 11 at src\keccak.rs:96:35: 96:37
        _347 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _346 = _347 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_347);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_348);               // scope 11 at src\keccak.rs:35:33: 35:40
        _349 = CheckedAdd(const 2usize, const 5usize); // scope 11 at src\keccak.rs:35:33: 35:40
        assert(!(_349.1: bool), "attempt to add with overflow") -> bb112; // scope 11 at src\keccak.rs:35:33: 35:40
    }

    bb112: {                            
        _348 = (_349.0: usize);          // scope 11 at src\keccak.rs:35:33: 35:40
        _345 = const std::ops::IndexMut::index_mut(_346, _348) -> bb113; // scope 11 at src\keccak.rs:35:29: 35:41
    }

    bb113: {                            
        StorageDead(_348);               // scope 11 at src\keccak.rs:35:41: 35:41
        StorageDead(_346);               // scope 11 at src\keccak.rs:35:41: 35:41
        (*_345) = BitXor((*_345), _344); // scope 11 at src\keccak.rs:35:29: 96:50
        StorageDead(_344);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_345);               // scope 11 at src\keccak.rs:35:48: 35:48
        StorageLive(_350);               // scope 11 at src\keccak.rs:96:49: 96:50
        _350 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_351);               // scope 11 at src\keccak.rs:35:49: 35:61
        StorageLive(_352);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_353);               // scope 11 at src\keccak.rs:96:35: 96:37
        _353 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _352 = _353 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_353);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_354);               // scope 11 at src\keccak.rs:35:53: 35:60
        _355 = CheckedAdd(const 2usize, const 10usize); // scope 11 at src\keccak.rs:35:53: 35:60
        assert(!(_355.1: bool), "attempt to add with overflow") -> bb114; // scope 11 at src\keccak.rs:35:53: 35:60
    }

    bb114: {                            
        _354 = (_355.0: usize);          // scope 11 at src\keccak.rs:35:53: 35:60
        _351 = const std::ops::IndexMut::index_mut(_352, _354) -> bb115; // scope 11 at src\keccak.rs:35:49: 35:61
    }

    bb115: {                            
        StorageDead(_354);               // scope 11 at src\keccak.rs:35:61: 35:61
        StorageDead(_352);               // scope 11 at src\keccak.rs:35:61: 35:61
        (*_351) = BitXor((*_351), _350); // scope 11 at src\keccak.rs:35:49: 96:50
        StorageDead(_350);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_351);               // scope 11 at src\keccak.rs:35:68: 35:68
        StorageLive(_356);               // scope 11 at src\keccak.rs:96:49: 96:50
        _356 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_357);               // scope 11 at src\keccak.rs:36:9: 36:21
        StorageLive(_358);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_359);               // scope 11 at src\keccak.rs:96:35: 96:37
        _359 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _358 = _359 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_359);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_360);               // scope 11 at src\keccak.rs:36:13: 36:20
        _361 = CheckedAdd(const 2usize, const 15usize); // scope 11 at src\keccak.rs:36:13: 36:20
        assert(!(_361.1: bool), "attempt to add with overflow") -> bb116; // scope 11 at src\keccak.rs:36:13: 36:20
    }

    bb116: {                            
        _360 = (_361.0: usize);          // scope 11 at src\keccak.rs:36:13: 36:20
        _357 = const std::ops::IndexMut::index_mut(_358, _360) -> bb117; // scope 11 at src\keccak.rs:36:9: 36:21
    }

    bb117: {                            
        StorageDead(_360);               // scope 11 at src\keccak.rs:36:21: 36:21
        StorageDead(_358);               // scope 11 at src\keccak.rs:36:21: 36:21
        (*_357) = BitXor((*_357), _356); // scope 11 at src\keccak.rs:36:9: 96:50
        StorageDead(_356);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_357);               // scope 11 at src\keccak.rs:36:28: 36:28
        StorageLive(_362);               // scope 11 at src\keccak.rs:96:49: 96:50
        _362 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_363);               // scope 11 at src\keccak.rs:36:29: 36:41
        StorageLive(_364);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_365);               // scope 11 at src\keccak.rs:96:35: 96:37
        _365 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _364 = _365 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_365);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_366);               // scope 11 at src\keccak.rs:36:33: 36:40
        _367 = CheckedAdd(const 2usize, const 20usize); // scope 11 at src\keccak.rs:36:33: 36:40
        assert(!(_367.1: bool), "attempt to add with overflow") -> bb118; // scope 11 at src\keccak.rs:36:33: 36:40
    }

    bb118: {                            
        _366 = (_367.0: usize);          // scope 11 at src\keccak.rs:36:33: 36:40
        _363 = const std::ops::IndexMut::index_mut(_364, _366) -> bb119; // scope 11 at src\keccak.rs:36:29: 36:41
    }

    bb119: {                            
        StorageDead(_366);               // scope 11 at src\keccak.rs:36:41: 36:41
        StorageDead(_364);               // scope 11 at src\keccak.rs:36:41: 36:41
        (*_363) = BitXor((*_363), _362); // scope 11 at src\keccak.rs:36:29: 96:50
        StorageDead(_362);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_363);               // scope 11 at src\keccak.rs:36:48: 36:48
        StorageLive(_368);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_369);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_370);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_371);               // scope 11 at src\keccak.rs:96:44: 96:46
        _371 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _370 = _371 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_371);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_372);               // scope 11 at src\keccak.rs:39:18: 39:30
        StorageLive(_373);               // scope 11 at src\keccak.rs:39:18: 39:26
        _374 = CheckedAdd(const 3usize, const 4usize); // scope 11 at src\keccak.rs:39:18: 39:26
        assert(!(_374.1: bool), "attempt to add with overflow") -> bb120; // scope 11 at src\keccak.rs:39:18: 39:26
    }

    bb120: {                            
        _373 = (_374.0: usize);          // scope 11 at src\keccak.rs:39:18: 39:26
        _375 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:18: 39:30
        assert(!_375, "attempt to calculate the remainder with a divisor of zero") -> bb121; // scope 11 at src\keccak.rs:39:18: 39:30
    }

    bb121: {                            
        _372 = Rem(_373, const 5usize);  // scope 11 at src\keccak.rs:39:18: 39:30
        StorageDead(_373);               // scope 11 at src\keccak.rs:39:30: 39:30
        _369 = const std::ops::Index::index(_370, _372) -> bb122; // scope 11 at src\keccak.rs:39:14: 39:31
    }

    bb122: {                            
        _368 = (*_369);                  // scope 11 at src\keccak.rs:39:14: 39:31
        StorageDead(_372);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageDead(_370);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageLive(_376);               // scope 11 at src\keccak.rs:27:29: 27:59
        StorageLive(_377);               // scope 11 at src\keccak.rs:27:30: 39:62
        StorageLive(_378);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_379);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_380);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_381);               // scope 11 at src\keccak.rs:96:44: 96:46
        _381 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _380 = _381 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_381);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_382);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_383);               // scope 11 at src\keccak.rs:39:46: 39:54
        _384 = CheckedAdd(const 3usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_384.1: bool), "attempt to add with overflow") -> bb123; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb123: {                            
        _383 = (_384.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _385 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_385, "attempt to calculate the remainder with a divisor of zero") -> bb124; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb124: {                            
        _382 = Rem(_383, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_383);               // scope 11 at src\keccak.rs:39:58: 39:58
        _379 = const std::ops::Index::index(_380, _382) -> bb125; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb125: {                            
        _378 = (*_379);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_382);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_380);               // scope 11 at src\keccak.rs:39:59: 39:59
        _386 = CheckedShl(_378, const 1i32); // scope 11 at src\keccak.rs:27:30: 39:62
        assert(!(_386.1: bool), "attempt to shift left with overflow") -> bb126; // scope 11 at src\keccak.rs:27:30: 39:62
    }

    bb126: {                            
        _377 = (_386.0: u64);            // scope 11 at src\keccak.rs:27:30: 39:62
        StorageDead(_378);               // scope 11 at src\keccak.rs:39:62: 39:62
        StorageLive(_387);               // scope 11 at src\keccak.rs:27:42: 27:59
        StorageLive(_388);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_389);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_390);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_391);               // scope 11 at src\keccak.rs:96:44: 96:46
        _391 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _390 = _391 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_391);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_392);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_393);               // scope 11 at src\keccak.rs:39:46: 39:54
        _394 = CheckedAdd(const 3usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_394.1: bool), "attempt to add with overflow") -> bb127; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb127: {                            
        _393 = (_394.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _395 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_395, "attempt to calculate the remainder with a divisor of zero") -> bb128; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb128: {                            
        _392 = Rem(_393, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_393);               // scope 11 at src\keccak.rs:39:58: 39:58
        _389 = const std::ops::Index::index(_390, _392) -> bb129; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb129: {                            
        _388 = (*_389);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_392);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_390);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageLive(_396);               // scope 11 at src\keccak.rs:27:50: 39:62
        _397 = CheckedSub(const 64i32, const 1i32); // scope 11 at src\keccak.rs:27:50: 39:62
        assert(!(_397.1: bool), "attempt to subtract with overflow") -> bb130; // scope 11 at src\keccak.rs:27:50: 39:62
    }

    bb130: {                            
        _396 = (_397.0: i32);            // scope 11 at src\keccak.rs:27:50: 39:62
        _398 = CheckedShr(_388, _396);   // scope 11 at src\keccak.rs:27:42: 27:59
        assert(!(_398.1: bool), "attempt to shift right with overflow") -> bb131; // scope 11 at src\keccak.rs:27:42: 27:59
    }

    bb131: {                            
        _387 = (_398.0: u64);            // scope 11 at src\keccak.rs:27:42: 27:59
        StorageDead(_396);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_388);               // scope 11 at src\keccak.rs:27:59: 27:59
        _376 = BitOr(_377, _387);        // scope 11 at src\keccak.rs:27:29: 27:59
        StorageDead(_387);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_377);               // scope 11 at src\keccak.rs:27:59: 27:59
        _3 = BitXor(_368, _376);         // scope 11 at src\keccak.rs:39:9: 39:63
        StorageDead(_376);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_368);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_389);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_379);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_369);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageLive(_399);               // scope 11 at src\keccak.rs:96:49: 96:50
        _399 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_400);               // scope 11 at src\keccak.rs:44:104: 44:105
        _400 = const 3usize;             // scope 11 at src\keccak.rs:44:104: 44:105
        _401 = Len((*_1));               // scope 11 at src\keccak.rs:35:9: 35:21
        _402 = Lt(_400, _401);           // scope 11 at src\keccak.rs:35:9: 35:21
        assert(_402, "index out of bounds: the len is {} but the index is {}", _401, _400) -> bb132; // scope 11 at src\keccak.rs:35:9: 35:21
    }

    bb132: {                            
        (*_1)[_400] = BitXor((*_1)[_400], _399); // scope 11 at src\keccak.rs:35:9: 96:50
        StorageDead(_399);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageLive(_403);               // scope 11 at src\keccak.rs:96:49: 96:50
        _403 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_404);               // scope 11 at src\keccak.rs:35:29: 35:41
        StorageLive(_405);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_406);               // scope 11 at src\keccak.rs:96:35: 96:37
        _406 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _405 = _406 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_406);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_407);               // scope 11 at src\keccak.rs:35:33: 35:40
        _408 = CheckedAdd(const 3usize, const 5usize); // scope 11 at src\keccak.rs:35:33: 35:40
        assert(!(_408.1: bool), "attempt to add with overflow") -> bb133; // scope 11 at src\keccak.rs:35:33: 35:40
    }

    bb133: {                            
        _407 = (_408.0: usize);          // scope 11 at src\keccak.rs:35:33: 35:40
        _404 = const std::ops::IndexMut::index_mut(_405, _407) -> bb134; // scope 11 at src\keccak.rs:35:29: 35:41
    }

    bb134: {                            
        StorageDead(_407);               // scope 11 at src\keccak.rs:35:41: 35:41
        StorageDead(_405);               // scope 11 at src\keccak.rs:35:41: 35:41
        (*_404) = BitXor((*_404), _403); // scope 11 at src\keccak.rs:35:29: 96:50
        StorageDead(_403);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_404);               // scope 11 at src\keccak.rs:35:48: 35:48
        StorageLive(_409);               // scope 11 at src\keccak.rs:96:49: 96:50
        _409 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_410);               // scope 11 at src\keccak.rs:35:49: 35:61
        StorageLive(_411);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_412);               // scope 11 at src\keccak.rs:96:35: 96:37
        _412 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _411 = _412 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_412);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_413);               // scope 11 at src\keccak.rs:35:53: 35:60
        _414 = CheckedAdd(const 3usize, const 10usize); // scope 11 at src\keccak.rs:35:53: 35:60
        assert(!(_414.1: bool), "attempt to add with overflow") -> bb135; // scope 11 at src\keccak.rs:35:53: 35:60
    }

    bb135: {                            
        _413 = (_414.0: usize);          // scope 11 at src\keccak.rs:35:53: 35:60
        _410 = const std::ops::IndexMut::index_mut(_411, _413) -> bb136; // scope 11 at src\keccak.rs:35:49: 35:61
    }

    bb136: {                            
        StorageDead(_413);               // scope 11 at src\keccak.rs:35:61: 35:61
        StorageDead(_411);               // scope 11 at src\keccak.rs:35:61: 35:61
        (*_410) = BitXor((*_410), _409); // scope 11 at src\keccak.rs:35:49: 96:50
        StorageDead(_409);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_410);               // scope 11 at src\keccak.rs:35:68: 35:68
        StorageLive(_415);               // scope 11 at src\keccak.rs:96:49: 96:50
        _415 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_416);               // scope 11 at src\keccak.rs:36:9: 36:21
        StorageLive(_417);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_418);               // scope 11 at src\keccak.rs:96:35: 96:37
        _418 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _417 = _418 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_418);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_419);               // scope 11 at src\keccak.rs:36:13: 36:20
        _420 = CheckedAdd(const 3usize, const 15usize); // scope 11 at src\keccak.rs:36:13: 36:20
        assert(!(_420.1: bool), "attempt to add with overflow") -> bb137; // scope 11 at src\keccak.rs:36:13: 36:20
    }

    bb137: {                            
        _419 = (_420.0: usize);          // scope 11 at src\keccak.rs:36:13: 36:20
        _416 = const std::ops::IndexMut::index_mut(_417, _419) -> bb138; // scope 11 at src\keccak.rs:36:9: 36:21
    }

    bb138: {                            
        StorageDead(_419);               // scope 11 at src\keccak.rs:36:21: 36:21
        StorageDead(_417);               // scope 11 at src\keccak.rs:36:21: 36:21
        (*_416) = BitXor((*_416), _415); // scope 11 at src\keccak.rs:36:9: 96:50
        StorageDead(_415);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_416);               // scope 11 at src\keccak.rs:36:28: 36:28
        StorageLive(_421);               // scope 11 at src\keccak.rs:96:49: 96:50
        _421 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_422);               // scope 11 at src\keccak.rs:36:29: 36:41
        StorageLive(_423);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_424);               // scope 11 at src\keccak.rs:96:35: 96:37
        _424 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _423 = _424 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_424);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_425);               // scope 11 at src\keccak.rs:36:33: 36:40
        _426 = CheckedAdd(const 3usize, const 20usize); // scope 11 at src\keccak.rs:36:33: 36:40
        assert(!(_426.1: bool), "attempt to add with overflow") -> bb139; // scope 11 at src\keccak.rs:36:33: 36:40
    }

    bb139: {                            
        _425 = (_426.0: usize);          // scope 11 at src\keccak.rs:36:33: 36:40
        _422 = const std::ops::IndexMut::index_mut(_423, _425) -> bb140; // scope 11 at src\keccak.rs:36:29: 36:41
    }

    bb140: {                            
        StorageDead(_425);               // scope 11 at src\keccak.rs:36:41: 36:41
        StorageDead(_423);               // scope 11 at src\keccak.rs:36:41: 36:41
        (*_422) = BitXor((*_422), _421); // scope 11 at src\keccak.rs:36:29: 96:50
        StorageDead(_421);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_422);               // scope 11 at src\keccak.rs:36:48: 36:48
        StorageLive(_427);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_428);               // scope 11 at src\keccak.rs:39:14: 39:31
        StorageLive(_429);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_430);               // scope 11 at src\keccak.rs:96:44: 96:46
        _430 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _429 = _430 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_430);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_431);               // scope 11 at src\keccak.rs:39:18: 39:30
        StorageLive(_432);               // scope 11 at src\keccak.rs:39:18: 39:26
        _433 = CheckedAdd(const 4usize, const 4usize); // scope 11 at src\keccak.rs:39:18: 39:26
        assert(!(_433.1: bool), "attempt to add with overflow") -> bb141; // scope 11 at src\keccak.rs:39:18: 39:26
    }

    bb141: {                            
        _432 = (_433.0: usize);          // scope 11 at src\keccak.rs:39:18: 39:26
        _434 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:18: 39:30
        assert(!_434, "attempt to calculate the remainder with a divisor of zero") -> bb142; // scope 11 at src\keccak.rs:39:18: 39:30
    }

    bb142: {                            
        _431 = Rem(_432, const 5usize);  // scope 11 at src\keccak.rs:39:18: 39:30
        StorageDead(_432);               // scope 11 at src\keccak.rs:39:30: 39:30
        _428 = const std::ops::Index::index(_429, _431) -> bb143; // scope 11 at src\keccak.rs:39:14: 39:31
    }

    bb143: {                            
        _427 = (*_428);                  // scope 11 at src\keccak.rs:39:14: 39:31
        StorageDead(_431);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageDead(_429);               // scope 11 at src\keccak.rs:39:31: 39:31
        StorageLive(_435);               // scope 11 at src\keccak.rs:27:29: 27:59
        StorageLive(_436);               // scope 11 at src\keccak.rs:27:30: 39:62
        StorageLive(_437);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_438);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_439);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_440);               // scope 11 at src\keccak.rs:96:44: 96:46
        _440 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _439 = _440 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_440);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_441);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_442);               // scope 11 at src\keccak.rs:39:46: 39:54
        _443 = CheckedAdd(const 4usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_443.1: bool), "attempt to add with overflow") -> bb144; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb144: {                            
        _442 = (_443.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _444 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_444, "attempt to calculate the remainder with a divisor of zero") -> bb145; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb145: {                            
        _441 = Rem(_442, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_442);               // scope 11 at src\keccak.rs:39:58: 39:58
        _438 = const std::ops::Index::index(_439, _441) -> bb146; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb146: {                            
        _437 = (*_438);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_441);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_439);               // scope 11 at src\keccak.rs:39:59: 39:59
        _445 = CheckedShl(_437, const 1i32); // scope 11 at src\keccak.rs:27:30: 39:62
        assert(!(_445.1: bool), "attempt to shift left with overflow") -> bb147; // scope 11 at src\keccak.rs:27:30: 39:62
    }

    bb147: {                            
        _436 = (_445.0: u64);            // scope 11 at src\keccak.rs:27:30: 39:62
        StorageDead(_437);               // scope 11 at src\keccak.rs:39:62: 39:62
        StorageLive(_446);               // scope 11 at src\keccak.rs:27:42: 27:59
        StorageLive(_447);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_448);               // scope 11 at src\keccak.rs:39:42: 39:59
        StorageLive(_449);               // scope 11 at src\keccak.rs:96:44: 96:46
        StorageLive(_450);               // scope 11 at src\keccak.rs:96:44: 96:46
        _450 = &_4;                      // scope 11 at src\keccak.rs:96:44: 96:46
        _449 = _450 as &[u64] (Unsize);  // scope 11 at src\keccak.rs:96:44: 96:46
        StorageDead(_450);               // scope 11 at src\keccak.rs:96:46: 96:46
        StorageLive(_451);               // scope 11 at src\keccak.rs:39:46: 39:58
        StorageLive(_452);               // scope 11 at src\keccak.rs:39:46: 39:54
        _453 = CheckedAdd(const 4usize, const 1usize); // scope 11 at src\keccak.rs:39:46: 39:54
        assert(!(_453.1: bool), "attempt to add with overflow") -> bb148; // scope 11 at src\keccak.rs:39:46: 39:54
    }

    bb148: {                            
        _452 = (_453.0: usize);          // scope 11 at src\keccak.rs:39:46: 39:54
        _454 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:39:46: 39:58
        assert(!_454, "attempt to calculate the remainder with a divisor of zero") -> bb149; // scope 11 at src\keccak.rs:39:46: 39:58
    }

    bb149: {                            
        _451 = Rem(_452, const 5usize);  // scope 11 at src\keccak.rs:39:46: 39:58
        StorageDead(_452);               // scope 11 at src\keccak.rs:39:58: 39:58
        _448 = const std::ops::Index::index(_449, _451) -> bb150; // scope 11 at src\keccak.rs:39:42: 39:59
    }

    bb150: {                            
        _447 = (*_448);                  // scope 11 at src\keccak.rs:39:42: 39:59
        StorageDead(_451);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageDead(_449);               // scope 11 at src\keccak.rs:39:59: 39:59
        StorageLive(_455);               // scope 11 at src\keccak.rs:27:50: 39:62
        _456 = CheckedSub(const 64i32, const 1i32); // scope 11 at src\keccak.rs:27:50: 39:62
        assert(!(_456.1: bool), "attempt to subtract with overflow") -> bb151; // scope 11 at src\keccak.rs:27:50: 39:62
    }

    bb151: {                            
        _455 = (_456.0: i32);            // scope 11 at src\keccak.rs:27:50: 39:62
        _457 = CheckedShr(_447, _455);   // scope 11 at src\keccak.rs:27:42: 27:59
        assert(!(_457.1: bool), "attempt to shift right with overflow") -> bb152; // scope 11 at src\keccak.rs:27:42: 27:59
    }

    bb152: {                            
        _446 = (_457.0: u64);            // scope 11 at src\keccak.rs:27:42: 27:59
        StorageDead(_455);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_447);               // scope 11 at src\keccak.rs:27:59: 27:59
        _435 = BitOr(_436, _446);        // scope 11 at src\keccak.rs:27:29: 27:59
        StorageDead(_446);               // scope 11 at src\keccak.rs:27:59: 27:59
        StorageDead(_436);               // scope 11 at src\keccak.rs:27:59: 27:59
        _3 = BitXor(_427, _435);         // scope 11 at src\keccak.rs:39:9: 39:63
        StorageDead(_435);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_427);               // scope 11 at src\keccak.rs:39:63: 39:63
        StorageDead(_448);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_438);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageDead(_428);               // scope 11 at src\keccak.rs:39:64: 39:64
        StorageLive(_458);               // scope 11 at src\keccak.rs:96:49: 96:50
        _458 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_459);               // scope 11 at src\keccak.rs:45:54: 45:55
        _459 = const 4usize;             // scope 11 at src\keccak.rs:45:54: 45:55
        _460 = Len((*_1));               // scope 11 at src\keccak.rs:35:9: 35:21
        _461 = Lt(_459, _460);           // scope 11 at src\keccak.rs:35:9: 35:21
        assert(_461, "index out of bounds: the len is {} but the index is {}", _460, _459) -> bb153; // scope 11 at src\keccak.rs:35:9: 35:21
    }

    bb153: {                            
        (*_1)[_459] = BitXor((*_1)[_459], _458); // scope 11 at src\keccak.rs:35:9: 96:50
        StorageDead(_458);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageLive(_462);               // scope 11 at src\keccak.rs:96:49: 96:50
        _462 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_463);               // scope 11 at src\keccak.rs:35:29: 35:41
        StorageLive(_464);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_465);               // scope 11 at src\keccak.rs:96:35: 96:37
        _465 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _464 = _465 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_465);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_466);               // scope 11 at src\keccak.rs:35:33: 35:40
        _467 = CheckedAdd(const 4usize, const 5usize); // scope 11 at src\keccak.rs:35:33: 35:40
        assert(!(_467.1: bool), "attempt to add with overflow") -> bb154; // scope 11 at src\keccak.rs:35:33: 35:40
    }

    bb154: {                            
        _466 = (_467.0: usize);          // scope 11 at src\keccak.rs:35:33: 35:40
        _463 = const std::ops::IndexMut::index_mut(_464, _466) -> bb155; // scope 11 at src\keccak.rs:35:29: 35:41
    }

    bb155: {                            
        StorageDead(_466);               // scope 11 at src\keccak.rs:35:41: 35:41
        StorageDead(_464);               // scope 11 at src\keccak.rs:35:41: 35:41
        (*_463) = BitXor((*_463), _462); // scope 11 at src\keccak.rs:35:29: 96:50
        StorageDead(_462);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_463);               // scope 11 at src\keccak.rs:35:48: 35:48
        StorageLive(_468);               // scope 11 at src\keccak.rs:96:49: 96:50
        _468 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_469);               // scope 11 at src\keccak.rs:35:49: 35:61
        StorageLive(_470);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_471);               // scope 11 at src\keccak.rs:96:35: 96:37
        _471 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _470 = _471 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_471);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_472);               // scope 11 at src\keccak.rs:35:53: 35:60
        _473 = CheckedAdd(const 4usize, const 10usize); // scope 11 at src\keccak.rs:35:53: 35:60
        assert(!(_473.1: bool), "attempt to add with overflow") -> bb156; // scope 11 at src\keccak.rs:35:53: 35:60
    }

    bb156: {                            
        _472 = (_473.0: usize);          // scope 11 at src\keccak.rs:35:53: 35:60
        _469 = const std::ops::IndexMut::index_mut(_470, _472) -> bb157; // scope 11 at src\keccak.rs:35:49: 35:61
    }

    bb157: {                            
        StorageDead(_472);               // scope 11 at src\keccak.rs:35:61: 35:61
        StorageDead(_470);               // scope 11 at src\keccak.rs:35:61: 35:61
        (*_469) = BitXor((*_469), _468); // scope 11 at src\keccak.rs:35:49: 96:50
        StorageDead(_468);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_469);               // scope 11 at src\keccak.rs:35:68: 35:68
        StorageLive(_474);               // scope 11 at src\keccak.rs:96:49: 96:50
        _474 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_475);               // scope 11 at src\keccak.rs:36:9: 36:21
        StorageLive(_476);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_477);               // scope 11 at src\keccak.rs:96:35: 96:37
        _477 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _476 = _477 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_477);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_478);               // scope 11 at src\keccak.rs:36:13: 36:20
        _479 = CheckedAdd(const 4usize, const 15usize); // scope 11 at src\keccak.rs:36:13: 36:20
        assert(!(_479.1: bool), "attempt to add with overflow") -> bb158; // scope 11 at src\keccak.rs:36:13: 36:20
    }

    bb158: {                            
        _478 = (_479.0: usize);          // scope 11 at src\keccak.rs:36:13: 36:20
        _475 = const std::ops::IndexMut::index_mut(_476, _478) -> bb159; // scope 11 at src\keccak.rs:36:9: 36:21
    }

    bb159: {                            
        StorageDead(_478);               // scope 11 at src\keccak.rs:36:21: 36:21
        StorageDead(_476);               // scope 11 at src\keccak.rs:36:21: 36:21
        (*_475) = BitXor((*_475), _474); // scope 11 at src\keccak.rs:36:9: 96:50
        StorageDead(_474);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_475);               // scope 11 at src\keccak.rs:36:28: 36:28
        StorageLive(_480);               // scope 11 at src\keccak.rs:96:49: 96:50
        _480 = _3;                       // scope 11 at src\keccak.rs:96:49: 96:50
        StorageLive(_481);               // scope 11 at src\keccak.rs:36:29: 36:41
        StorageLive(_482);               // scope 11 at src\keccak.rs:96:35: 96:37
        StorageLive(_483);               // scope 11 at src\keccak.rs:96:35: 96:37
        _483 = _1;                       // scope 11 at src\keccak.rs:96:35: 96:37
        _482 = _483 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:96:35: 96:37
        StorageDead(_483);               // scope 11 at src\keccak.rs:96:37: 96:37
        StorageLive(_484);               // scope 11 at src\keccak.rs:36:33: 36:40
        _485 = CheckedAdd(const 4usize, const 20usize); // scope 11 at src\keccak.rs:36:33: 36:40
        assert(!(_485.1: bool), "attempt to add with overflow") -> bb160; // scope 11 at src\keccak.rs:36:33: 36:40
    }

    bb160: {                            
        _484 = (_485.0: usize);          // scope 11 at src\keccak.rs:36:33: 36:40
        _481 = const std::ops::IndexMut::index_mut(_482, _484) -> bb161; // scope 11 at src\keccak.rs:36:29: 36:41
    }

    bb161: {                            
        StorageDead(_484);               // scope 11 at src\keccak.rs:36:41: 36:41
        StorageDead(_482);               // scope 11 at src\keccak.rs:36:41: 36:41
        (*_481) = BitXor((*_481), _480); // scope 11 at src\keccak.rs:36:29: 96:50
        StorageDead(_480);               // scope 11 at src\keccak.rs:96:50: 96:50
        StorageDead(_481);               // scope 11 at src\keccak.rs:36:48: 36:48
        StorageLive(_486);               // scope 11 at src\keccak.rs:98:13: 98:18
        StorageLive(_487);               // scope 11 at src\keccak.rs:98:16: 98:17
        _487 = const 1usize;             // scope 11 at src\keccak.rs:98:16: 98:17
        _488 = Len((*_1));               // scope 11 at src\keccak.rs:98:13: 98:18
        _489 = Lt(_487, _488);           // scope 11 at src\keccak.rs:98:13: 98:18
        assert(_489, "index out of bounds: the len is {} but the index is {}", _488, _487) -> bb162; // scope 11 at src\keccak.rs:98:13: 98:18
    }

    bb162: {                            
        _486 = (*_1)[_487];              // scope 11 at src\keccak.rs:98:13: 98:18
        _3 = _486;                       // scope 11 at src\keccak.rs:98:9: 98:18
        StorageDead(_486);               // scope 11 at src\keccak.rs:98:18: 98:18
        StorageLive(_491);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_492);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_493);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_494);               // scope 13 at src\keccak.rs:100:36: 100:38
        _494 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _493 = _494 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_494);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_495);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_496);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_497);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_498);               // scope 13 at src\keccak.rs:48:22: 48:49
        _498 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _497 = _498 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_498);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_499);               // scope 13 at src\keccak.rs:53:46: 53:52
        _500 = CheckedAdd(const 0usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_500.1: bool), "attempt to add with overflow") -> bb163; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb163: {                            
        _499 = (_500.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _496 = const std::ops::Index::index(_497, _499) -> bb164; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb164: {                            
        _495 = (*_496);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_499);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_497);               // scope 13 at src\keccak.rs:48:53: 48:53
        _492 = const std::ops::Index::index(_493, _495) -> bb165; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb165: {                            
        _491 = (*_492);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_495);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_493);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_501);               // scope 13 at src\keccak.rs:48:13: 48:14
        _501 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _502 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _503 = Lt(_501, _502);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_503, "index out of bounds: the len is {} but the index is {}", _502, _501) -> bb166; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb166: {                            
        _4[_501] = _491;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_491);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_492);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_496);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_504);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_505);               // scope 13 at src\keccak.rs:49:56: 53:43
        _505 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_506);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_507);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_508);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_509);               // scope 13 at src\keccak.rs:49:60: 49:87
        _509 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _508 = _509 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_509);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_510);               // scope 13 at src\keccak.rs:53:46: 53:52
        _511 = CheckedAdd(const 0usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_511.1: bool), "attempt to add with overflow") -> bb167; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb167: {                            
        _510 = (_511.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _507 = const std::ops::Index::index(_508, _510) -> bb168; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb168: {                            
        _506 = (*_507);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_510);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_508);               // scope 13 at src\keccak.rs:49:91: 49:91
        _512 = CheckedShl(_505, _506);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_512.1: bool), "attempt to shift left with overflow") -> bb169; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb169: {                            
        _504 = (_512.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_506);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_505);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_513);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_514);               // scope 13 at src\keccak.rs:49:56: 53:43
        _514 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_515);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_516);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_517);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_518);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_519);               // scope 13 at src\keccak.rs:49:60: 49:87
        _519 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _518 = _519 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_519);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_520);               // scope 13 at src\keccak.rs:53:46: 53:52
        _521 = CheckedAdd(const 0usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_521.1: bool), "attempt to add with overflow") -> bb170; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb170: {                            
        _520 = (_521.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _517 = const std::ops::Index::index(_518, _520) -> bb171; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb171: {                            
        _516 = (*_517);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_520);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_518);               // scope 13 at src\keccak.rs:49:91: 49:91
        _522 = CheckedSub(const 64i32, _516); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_522.1: bool), "attempt to subtract with overflow") -> bb172; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb172: {                            
        _515 = (_522.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_516);               // scope 13 at src\keccak.rs:49:91: 49:91
        _523 = CheckedShr(_514, _515);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_523.1: bool), "attempt to shift right with overflow") -> bb173; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb173: {                            
        _513 = (_523.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_515);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_514);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_524);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_525);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_526);               // scope 13 at src\keccak.rs:100:36: 100:38
        _526 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _525 = _526 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_526);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_527);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_528);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_529);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_530);               // scope 13 at src\keccak.rs:49:13: 49:40
        _530 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _529 = _530 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_530);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_531);               // scope 13 at src\keccak.rs:53:46: 53:52
        _532 = CheckedAdd(const 0usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_532.1: bool), "attempt to add with overflow") -> bb174; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb174: {                            
        _531 = (_532.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _528 = const std::ops::Index::index(_529, _531) -> bb175; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb175: {                            
        _527 = (*_528);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_531);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_529);               // scope 13 at src\keccak.rs:49:44: 49:44
        _524 = const std::ops::IndexMut::index_mut(_525, _527) -> bb176; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb176: {                            
        StorageDead(_527);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_525);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_524) = BitOr(_504, _513);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_513);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_504);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_524);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_528);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_517);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_507);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_533);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_534);               // scope 13 at src\keccak.rs:50:18: 50:19
        _534 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _535 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _536 = Lt(_534, _535);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_536, "index out of bounds: the len is {} but the index is {}", _535, _534) -> bb177; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb177: {                            
        _533 = _4[_534];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _533;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_533);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_537);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_538);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_539);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_540);               // scope 13 at src\keccak.rs:100:36: 100:38
        _540 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _539 = _540 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_540);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_541);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_542);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_543);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_544);               // scope 13 at src\keccak.rs:48:22: 48:49
        _544 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _543 = _544 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_544);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_545);               // scope 13 at src\keccak.rs:53:93: 53:99
        _546 = CheckedAdd(const 0usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_546.1: bool), "attempt to add with overflow") -> bb178; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb178: {                            
        _545 = (_546.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _542 = const std::ops::Index::index(_543, _545) -> bb179; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb179: {                            
        _541 = (*_542);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_545);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_543);               // scope 13 at src\keccak.rs:48:53: 48:53
        _538 = const std::ops::Index::index(_539, _541) -> bb180; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb180: {                            
        _537 = (*_538);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_541);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_539);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_547);               // scope 13 at src\keccak.rs:48:13: 48:14
        _547 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _548 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _549 = Lt(_547, _548);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_549, "index out of bounds: the len is {} but the index is {}", _548, _547) -> bb181; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb181: {                            
        _4[_547] = _537;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_537);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_538);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_542);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_550);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_551);               // scope 13 at src\keccak.rs:49:56: 53:90
        _551 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_552);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_553);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_554);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_555);               // scope 13 at src\keccak.rs:49:60: 49:87
        _555 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _554 = _555 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_555);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_556);               // scope 13 at src\keccak.rs:53:93: 53:99
        _557 = CheckedAdd(const 0usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_557.1: bool), "attempt to add with overflow") -> bb182; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb182: {                            
        _556 = (_557.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _553 = const std::ops::Index::index(_554, _556) -> bb183; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb183: {                            
        _552 = (*_553);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_556);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_554);               // scope 13 at src\keccak.rs:49:91: 49:91
        _558 = CheckedShl(_551, _552);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_558.1: bool), "attempt to shift left with overflow") -> bb184; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb184: {                            
        _550 = (_558.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_552);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_551);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_559);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_560);               // scope 13 at src\keccak.rs:49:56: 53:90
        _560 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_561);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_562);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_563);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_564);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_565);               // scope 13 at src\keccak.rs:49:60: 49:87
        _565 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _564 = _565 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_565);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_566);               // scope 13 at src\keccak.rs:53:93: 53:99
        _567 = CheckedAdd(const 0usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_567.1: bool), "attempt to add with overflow") -> bb185; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb185: {                            
        _566 = (_567.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _563 = const std::ops::Index::index(_564, _566) -> bb186; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb186: {                            
        _562 = (*_563);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_566);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_564);               // scope 13 at src\keccak.rs:49:91: 49:91
        _568 = CheckedSub(const 64i32, _562); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_568.1: bool), "attempt to subtract with overflow") -> bb187; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb187: {                            
        _561 = (_568.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_562);               // scope 13 at src\keccak.rs:49:91: 49:91
        _569 = CheckedShr(_560, _561);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_569.1: bool), "attempt to shift right with overflow") -> bb188; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb188: {                            
        _559 = (_569.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_561);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_560);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_570);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_571);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_572);               // scope 13 at src\keccak.rs:100:36: 100:38
        _572 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _571 = _572 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_572);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_573);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_574);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_575);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_576);               // scope 13 at src\keccak.rs:49:13: 49:40
        _576 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _575 = _576 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_576);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_577);               // scope 13 at src\keccak.rs:53:93: 53:99
        _578 = CheckedAdd(const 0usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_578.1: bool), "attempt to add with overflow") -> bb189; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb189: {                            
        _577 = (_578.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _574 = const std::ops::Index::index(_575, _577) -> bb190; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb190: {                            
        _573 = (*_574);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_577);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_575);               // scope 13 at src\keccak.rs:49:44: 49:44
        _570 = const std::ops::IndexMut::index_mut(_571, _573) -> bb191; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb191: {                            
        StorageDead(_573);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_571);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_570) = BitOr(_550, _559);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_559);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_550);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_570);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_574);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_563);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_553);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_579);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_580);               // scope 13 at src\keccak.rs:50:18: 50:19
        _580 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _581 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _582 = Lt(_580, _581);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_582, "index out of bounds: the len is {} but the index is {}", _581, _580) -> bb192; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb192: {                            
        _579 = _4[_580];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _579;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_579);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_583);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_584);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_585);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_586);               // scope 13 at src\keccak.rs:100:36: 100:38
        _586 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _585 = _586 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_586);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_587);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_588);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_589);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_590);               // scope 13 at src\keccak.rs:48:22: 48:49
        _590 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _589 = _590 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_590);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_591);               // scope 13 at src\keccak.rs:54:46: 54:52
        _592 = CheckedAdd(const 0usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_592.1: bool), "attempt to add with overflow") -> bb193; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb193: {                            
        _591 = (_592.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _588 = const std::ops::Index::index(_589, _591) -> bb194; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb194: {                            
        _587 = (*_588);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_591);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_589);               // scope 13 at src\keccak.rs:48:53: 48:53
        _584 = const std::ops::Index::index(_585, _587) -> bb195; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb195: {                            
        _583 = (*_584);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_587);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_585);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_593);               // scope 13 at src\keccak.rs:48:13: 48:14
        _593 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _594 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _595 = Lt(_593, _594);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_595, "index out of bounds: the len is {} but the index is {}", _594, _593) -> bb196; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb196: {                            
        _4[_593] = _583;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_583);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_584);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_588);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_596);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_597);               // scope 13 at src\keccak.rs:49:56: 54:43
        _597 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_598);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_599);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_600);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_601);               // scope 13 at src\keccak.rs:49:60: 49:87
        _601 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _600 = _601 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_601);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_602);               // scope 13 at src\keccak.rs:54:46: 54:52
        _603 = CheckedAdd(const 0usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_603.1: bool), "attempt to add with overflow") -> bb197; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb197: {                            
        _602 = (_603.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _599 = const std::ops::Index::index(_600, _602) -> bb198; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb198: {                            
        _598 = (*_599);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_602);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_600);               // scope 13 at src\keccak.rs:49:91: 49:91
        _604 = CheckedShl(_597, _598);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_604.1: bool), "attempt to shift left with overflow") -> bb199; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb199: {                            
        _596 = (_604.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_598);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_597);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_605);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_606);               // scope 13 at src\keccak.rs:49:56: 54:43
        _606 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_607);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_608);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_609);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_610);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_611);               // scope 13 at src\keccak.rs:49:60: 49:87
        _611 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _610 = _611 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_611);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_612);               // scope 13 at src\keccak.rs:54:46: 54:52
        _613 = CheckedAdd(const 0usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_613.1: bool), "attempt to add with overflow") -> bb200; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb200: {                            
        _612 = (_613.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _609 = const std::ops::Index::index(_610, _612) -> bb201; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb201: {                            
        _608 = (*_609);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_612);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_610);               // scope 13 at src\keccak.rs:49:91: 49:91
        _614 = CheckedSub(const 64i32, _608); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_614.1: bool), "attempt to subtract with overflow") -> bb202; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb202: {                            
        _607 = (_614.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_608);               // scope 13 at src\keccak.rs:49:91: 49:91
        _615 = CheckedShr(_606, _607);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_615.1: bool), "attempt to shift right with overflow") -> bb203; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb203: {                            
        _605 = (_615.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_607);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_606);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_616);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_617);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_618);               // scope 13 at src\keccak.rs:100:36: 100:38
        _618 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _617 = _618 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_618);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_619);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_620);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_621);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_622);               // scope 13 at src\keccak.rs:49:13: 49:40
        _622 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _621 = _622 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_622);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_623);               // scope 13 at src\keccak.rs:54:46: 54:52
        _624 = CheckedAdd(const 0usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_624.1: bool), "attempt to add with overflow") -> bb204; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb204: {                            
        _623 = (_624.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _620 = const std::ops::Index::index(_621, _623) -> bb205; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb205: {                            
        _619 = (*_620);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_623);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_621);               // scope 13 at src\keccak.rs:49:44: 49:44
        _616 = const std::ops::IndexMut::index_mut(_617, _619) -> bb206; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb206: {                            
        StorageDead(_619);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_617);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_616) = BitOr(_596, _605);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_605);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_596);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_616);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_620);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_609);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_599);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_625);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_626);               // scope 13 at src\keccak.rs:50:18: 50:19
        _626 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _627 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _628 = Lt(_626, _627);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_628, "index out of bounds: the len is {} but the index is {}", _627, _626) -> bb207; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb207: {                            
        _625 = _4[_626];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _625;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_625);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_629);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_630);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_631);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_632);               // scope 13 at src\keccak.rs:100:36: 100:38
        _632 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _631 = _632 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_632);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_633);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_634);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_635);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_636);               // scope 13 at src\keccak.rs:48:22: 48:49
        _636 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _635 = _636 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_636);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_637);               // scope 13 at src\keccak.rs:54:93: 54:99
        _638 = CheckedAdd(const 0usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_638.1: bool), "attempt to add with overflow") -> bb208; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb208: {                            
        _637 = (_638.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _634 = const std::ops::Index::index(_635, _637) -> bb209; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb209: {                            
        _633 = (*_634);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_637);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_635);               // scope 13 at src\keccak.rs:48:53: 48:53
        _630 = const std::ops::Index::index(_631, _633) -> bb210; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb210: {                            
        _629 = (*_630);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_633);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_631);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_639);               // scope 13 at src\keccak.rs:48:13: 48:14
        _639 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _640 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _641 = Lt(_639, _640);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_641, "index out of bounds: the len is {} but the index is {}", _640, _639) -> bb211; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb211: {                            
        _4[_639] = _629;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_629);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_630);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_634);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_642);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_643);               // scope 13 at src\keccak.rs:49:56: 54:90
        _643 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_644);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_645);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_646);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_647);               // scope 13 at src\keccak.rs:49:60: 49:87
        _647 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _646 = _647 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_647);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_648);               // scope 13 at src\keccak.rs:54:93: 54:99
        _649 = CheckedAdd(const 0usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_649.1: bool), "attempt to add with overflow") -> bb212; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb212: {                            
        _648 = (_649.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _645 = const std::ops::Index::index(_646, _648) -> bb213; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb213: {                            
        _644 = (*_645);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_648);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_646);               // scope 13 at src\keccak.rs:49:91: 49:91
        _650 = CheckedShl(_643, _644);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_650.1: bool), "attempt to shift left with overflow") -> bb214; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb214: {                            
        _642 = (_650.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_644);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_643);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_651);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_652);               // scope 13 at src\keccak.rs:49:56: 54:90
        _652 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_653);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_654);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_655);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_656);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_657);               // scope 13 at src\keccak.rs:49:60: 49:87
        _657 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _656 = _657 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_657);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_658);               // scope 13 at src\keccak.rs:54:93: 54:99
        _659 = CheckedAdd(const 0usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_659.1: bool), "attempt to add with overflow") -> bb215; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb215: {                            
        _658 = (_659.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _655 = const std::ops::Index::index(_656, _658) -> bb216; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb216: {                            
        _654 = (*_655);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_658);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_656);               // scope 13 at src\keccak.rs:49:91: 49:91
        _660 = CheckedSub(const 64i32, _654); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_660.1: bool), "attempt to subtract with overflow") -> bb217; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb217: {                            
        _653 = (_660.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_654);               // scope 13 at src\keccak.rs:49:91: 49:91
        _661 = CheckedShr(_652, _653);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_661.1: bool), "attempt to shift right with overflow") -> bb218; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb218: {                            
        _651 = (_661.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_653);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_652);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_662);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_663);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_664);               // scope 13 at src\keccak.rs:100:36: 100:38
        _664 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _663 = _664 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_664);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_665);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_666);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_667);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_668);               // scope 13 at src\keccak.rs:49:13: 49:40
        _668 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _667 = _668 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_668);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_669);               // scope 13 at src\keccak.rs:54:93: 54:99
        _670 = CheckedAdd(const 0usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_670.1: bool), "attempt to add with overflow") -> bb219; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb219: {                            
        _669 = (_670.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _666 = const std::ops::Index::index(_667, _669) -> bb220; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb220: {                            
        _665 = (*_666);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_669);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_667);               // scope 13 at src\keccak.rs:49:44: 49:44
        _662 = const std::ops::IndexMut::index_mut(_663, _665) -> bb221; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb221: {                            
        StorageDead(_665);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_663);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_662) = BitOr(_642, _651);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_651);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_642);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_662);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_666);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_655);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_645);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_671);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_672);               // scope 13 at src\keccak.rs:50:18: 50:19
        _672 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _673 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _674 = Lt(_672, _673);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_674, "index out of bounds: the len is {} but the index is {}", _673, _672) -> bb222; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb222: {                            
        _671 = _4[_672];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _671;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_671);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_675);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_676);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_677);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_678);               // scope 13 at src\keccak.rs:100:36: 100:38
        _678 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _677 = _678 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_678);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_679);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_680);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_681);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_682);               // scope 13 at src\keccak.rs:48:22: 48:49
        _682 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _681 = _682 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_682);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_683);               // scope 13 at src\keccak.rs:55:46: 55:52
        _684 = CheckedAdd(const 0usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_684.1: bool), "attempt to add with overflow") -> bb223; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb223: {                            
        _683 = (_684.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _680 = const std::ops::Index::index(_681, _683) -> bb224; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb224: {                            
        _679 = (*_680);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_683);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_681);               // scope 13 at src\keccak.rs:48:53: 48:53
        _676 = const std::ops::Index::index(_677, _679) -> bb225; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb225: {                            
        _675 = (*_676);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_679);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_677);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_685);               // scope 13 at src\keccak.rs:48:13: 48:14
        _685 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _686 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _687 = Lt(_685, _686);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_687, "index out of bounds: the len is {} but the index is {}", _686, _685) -> bb226; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb226: {                            
        _4[_685] = _675;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_675);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_676);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_680);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_688);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_689);               // scope 13 at src\keccak.rs:49:56: 55:43
        _689 = _3;                       // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_690);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_691);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_692);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_693);               // scope 13 at src\keccak.rs:49:60: 49:87
        _693 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _692 = _693 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_693);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_694);               // scope 13 at src\keccak.rs:55:46: 55:52
        _695 = CheckedAdd(const 0usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_695.1: bool), "attempt to add with overflow") -> bb227; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb227: {                            
        _694 = (_695.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _691 = const std::ops::Index::index(_692, _694) -> bb228; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb228: {                            
        _690 = (*_691);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_694);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_692);               // scope 13 at src\keccak.rs:49:91: 49:91
        _696 = CheckedShl(_689, _690);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_696.1: bool), "attempt to shift left with overflow") -> bb229; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb229: {                            
        _688 = (_696.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_690);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_689);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_697);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_698);               // scope 13 at src\keccak.rs:49:56: 55:43
        _698 = _3;                       // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_699);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_700);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_701);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_702);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_703);               // scope 13 at src\keccak.rs:49:60: 49:87
        _703 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _702 = _703 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_703);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_704);               // scope 13 at src\keccak.rs:55:46: 55:52
        _705 = CheckedAdd(const 0usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_705.1: bool), "attempt to add with overflow") -> bb230; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb230: {                            
        _704 = (_705.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _701 = const std::ops::Index::index(_702, _704) -> bb231; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb231: {                            
        _700 = (*_701);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_704);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_702);               // scope 13 at src\keccak.rs:49:91: 49:91
        _706 = CheckedSub(const 64i32, _700); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_706.1: bool), "attempt to subtract with overflow") -> bb232; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb232: {                            
        _699 = (_706.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_700);               // scope 13 at src\keccak.rs:49:91: 49:91
        _707 = CheckedShr(_698, _699);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_707.1: bool), "attempt to shift right with overflow") -> bb233; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb233: {                            
        _697 = (_707.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_699);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_698);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_708);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_709);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_710);               // scope 13 at src\keccak.rs:100:36: 100:38
        _710 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _709 = _710 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_710);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_711);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_712);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_713);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_714);               // scope 13 at src\keccak.rs:49:13: 49:40
        _714 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _713 = _714 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_714);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_715);               // scope 13 at src\keccak.rs:55:46: 55:52
        _716 = CheckedAdd(const 0usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_716.1: bool), "attempt to add with overflow") -> bb234; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb234: {                            
        _715 = (_716.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _712 = const std::ops::Index::index(_713, _715) -> bb235; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb235: {                            
        _711 = (*_712);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_715);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_713);               // scope 13 at src\keccak.rs:49:44: 49:44
        _708 = const std::ops::IndexMut::index_mut(_709, _711) -> bb236; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb236: {                            
        StorageDead(_711);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_709);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_708) = BitOr(_688, _697);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_697);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_688);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_708);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_712);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_701);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_691);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_717);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_718);               // scope 13 at src\keccak.rs:50:18: 50:19
        _718 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _719 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _720 = Lt(_718, _719);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_720, "index out of bounds: the len is {} but the index is {}", _719, _718) -> bb237; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb237: {                            
        _717 = _4[_718];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _717;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_717);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_721);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_722);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_723);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_724);               // scope 13 at src\keccak.rs:100:36: 100:38
        _724 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _723 = _724 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_724);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_725);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_726);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_727);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_728);               // scope 13 at src\keccak.rs:48:22: 48:49
        _728 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _727 = _728 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_728);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_729);               // scope 13 at src\keccak.rs:53:46: 53:52
        _730 = CheckedAdd(const 5usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_730.1: bool), "attempt to add with overflow") -> bb238; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb238: {                            
        _729 = (_730.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _726 = const std::ops::Index::index(_727, _729) -> bb239; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb239: {                            
        _725 = (*_726);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_729);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_727);               // scope 13 at src\keccak.rs:48:53: 48:53
        _722 = const std::ops::Index::index(_723, _725) -> bb240; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb240: {                            
        _721 = (*_722);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_725);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_723);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_731);               // scope 13 at src\keccak.rs:48:13: 48:14
        _731 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _732 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _733 = Lt(_731, _732);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_733, "index out of bounds: the len is {} but the index is {}", _732, _731) -> bb241; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb241: {                            
        _4[_731] = _721;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_721);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_722);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_726);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_734);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_735);               // scope 13 at src\keccak.rs:49:56: 53:43
        _735 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_736);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_737);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_738);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_739);               // scope 13 at src\keccak.rs:49:60: 49:87
        _739 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _738 = _739 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_739);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_740);               // scope 13 at src\keccak.rs:53:46: 53:52
        _741 = CheckedAdd(const 5usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_741.1: bool), "attempt to add with overflow") -> bb242; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb242: {                            
        _740 = (_741.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _737 = const std::ops::Index::index(_738, _740) -> bb243; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb243: {                            
        _736 = (*_737);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_740);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_738);               // scope 13 at src\keccak.rs:49:91: 49:91
        _742 = CheckedShl(_735, _736);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_742.1: bool), "attempt to shift left with overflow") -> bb244; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb244: {                            
        _734 = (_742.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_736);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_735);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_743);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_744);               // scope 13 at src\keccak.rs:49:56: 53:43
        _744 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_745);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_746);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_747);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_748);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_749);               // scope 13 at src\keccak.rs:49:60: 49:87
        _749 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _748 = _749 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_749);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_750);               // scope 13 at src\keccak.rs:53:46: 53:52
        _751 = CheckedAdd(const 5usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_751.1: bool), "attempt to add with overflow") -> bb245; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb245: {                            
        _750 = (_751.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _747 = const std::ops::Index::index(_748, _750) -> bb246; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb246: {                            
        _746 = (*_747);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_750);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_748);               // scope 13 at src\keccak.rs:49:91: 49:91
        _752 = CheckedSub(const 64i32, _746); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_752.1: bool), "attempt to subtract with overflow") -> bb247; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb247: {                            
        _745 = (_752.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_746);               // scope 13 at src\keccak.rs:49:91: 49:91
        _753 = CheckedShr(_744, _745);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_753.1: bool), "attempt to shift right with overflow") -> bb248; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb248: {                            
        _743 = (_753.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_745);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_744);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_754);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_755);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_756);               // scope 13 at src\keccak.rs:100:36: 100:38
        _756 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _755 = _756 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_756);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_757);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_758);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_759);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_760);               // scope 13 at src\keccak.rs:49:13: 49:40
        _760 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _759 = _760 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_760);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_761);               // scope 13 at src\keccak.rs:53:46: 53:52
        _762 = CheckedAdd(const 5usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_762.1: bool), "attempt to add with overflow") -> bb249; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb249: {                            
        _761 = (_762.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _758 = const std::ops::Index::index(_759, _761) -> bb250; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb250: {                            
        _757 = (*_758);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_761);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_759);               // scope 13 at src\keccak.rs:49:44: 49:44
        _754 = const std::ops::IndexMut::index_mut(_755, _757) -> bb251; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb251: {                            
        StorageDead(_757);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_755);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_754) = BitOr(_734, _743);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_743);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_734);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_754);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_758);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_747);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_737);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_763);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_764);               // scope 13 at src\keccak.rs:50:18: 50:19
        _764 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _765 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _766 = Lt(_764, _765);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_766, "index out of bounds: the len is {} but the index is {}", _765, _764) -> bb252; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb252: {                            
        _763 = _4[_764];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _763;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_763);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_767);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_768);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_769);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_770);               // scope 13 at src\keccak.rs:100:36: 100:38
        _770 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _769 = _770 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_770);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_771);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_772);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_773);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_774);               // scope 13 at src\keccak.rs:48:22: 48:49
        _774 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _773 = _774 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_774);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_775);               // scope 13 at src\keccak.rs:53:93: 53:99
        _776 = CheckedAdd(const 5usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_776.1: bool), "attempt to add with overflow") -> bb253; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb253: {                            
        _775 = (_776.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _772 = const std::ops::Index::index(_773, _775) -> bb254; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb254: {                            
        _771 = (*_772);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_775);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_773);               // scope 13 at src\keccak.rs:48:53: 48:53
        _768 = const std::ops::Index::index(_769, _771) -> bb255; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb255: {                            
        _767 = (*_768);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_771);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_769);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_777);               // scope 13 at src\keccak.rs:48:13: 48:14
        _777 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _778 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _779 = Lt(_777, _778);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_779, "index out of bounds: the len is {} but the index is {}", _778, _777) -> bb256; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb256: {                            
        _4[_777] = _767;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_767);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_768);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_772);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_780);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_781);               // scope 13 at src\keccak.rs:49:56: 53:90
        _781 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_782);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_783);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_784);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_785);               // scope 13 at src\keccak.rs:49:60: 49:87
        _785 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _784 = _785 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_785);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_786);               // scope 13 at src\keccak.rs:53:93: 53:99
        _787 = CheckedAdd(const 5usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_787.1: bool), "attempt to add with overflow") -> bb257; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb257: {                            
        _786 = (_787.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _783 = const std::ops::Index::index(_784, _786) -> bb258; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb258: {                            
        _782 = (*_783);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_786);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_784);               // scope 13 at src\keccak.rs:49:91: 49:91
        _788 = CheckedShl(_781, _782);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_788.1: bool), "attempt to shift left with overflow") -> bb259; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb259: {                            
        _780 = (_788.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_782);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_781);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_789);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_790);               // scope 13 at src\keccak.rs:49:56: 53:90
        _790 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_791);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_792);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_793);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_794);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_795);               // scope 13 at src\keccak.rs:49:60: 49:87
        _795 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _794 = _795 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_795);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_796);               // scope 13 at src\keccak.rs:53:93: 53:99
        _797 = CheckedAdd(const 5usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_797.1: bool), "attempt to add with overflow") -> bb260; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb260: {                            
        _796 = (_797.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _793 = const std::ops::Index::index(_794, _796) -> bb261; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb261: {                            
        _792 = (*_793);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_796);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_794);               // scope 13 at src\keccak.rs:49:91: 49:91
        _798 = CheckedSub(const 64i32, _792); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_798.1: bool), "attempt to subtract with overflow") -> bb262; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb262: {                            
        _791 = (_798.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_792);               // scope 13 at src\keccak.rs:49:91: 49:91
        _799 = CheckedShr(_790, _791);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_799.1: bool), "attempt to shift right with overflow") -> bb263; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb263: {                            
        _789 = (_799.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_791);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_790);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_800);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_801);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_802);               // scope 13 at src\keccak.rs:100:36: 100:38
        _802 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _801 = _802 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_802);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_803);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_804);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_805);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_806);               // scope 13 at src\keccak.rs:49:13: 49:40
        _806 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _805 = _806 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_806);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_807);               // scope 13 at src\keccak.rs:53:93: 53:99
        _808 = CheckedAdd(const 5usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_808.1: bool), "attempt to add with overflow") -> bb264; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb264: {                            
        _807 = (_808.0: usize);          // scope 13 at src\keccak.rs:53:93: 53:99
        _804 = const std::ops::Index::index(_805, _807) -> bb265; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb265: {                            
        _803 = (*_804);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_807);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_805);               // scope 13 at src\keccak.rs:49:44: 49:44
        _800 = const std::ops::IndexMut::index_mut(_801, _803) -> bb266; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb266: {                            
        StorageDead(_803);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_801);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_800) = BitOr(_780, _789);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_789);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_780);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_800);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_804);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_793);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_783);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_809);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_810);               // scope 13 at src\keccak.rs:50:18: 50:19
        _810 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _811 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _812 = Lt(_810, _811);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_812, "index out of bounds: the len is {} but the index is {}", _811, _810) -> bb267; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb267: {                            
        _809 = _4[_810];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _809;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_809);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_813);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_814);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_815);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_816);               // scope 13 at src\keccak.rs:100:36: 100:38
        _816 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _815 = _816 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_816);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_817);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_818);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_819);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_820);               // scope 13 at src\keccak.rs:48:22: 48:49
        _820 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _819 = _820 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_820);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_821);               // scope 13 at src\keccak.rs:54:46: 54:52
        _822 = CheckedAdd(const 5usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_822.1: bool), "attempt to add with overflow") -> bb268; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb268: {                            
        _821 = (_822.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _818 = const std::ops::Index::index(_819, _821) -> bb269; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb269: {                            
        _817 = (*_818);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_821);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_819);               // scope 13 at src\keccak.rs:48:53: 48:53
        _814 = const std::ops::Index::index(_815, _817) -> bb270; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb270: {                            
        _813 = (*_814);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_817);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_815);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_823);               // scope 13 at src\keccak.rs:48:13: 48:14
        _823 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _824 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _825 = Lt(_823, _824);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_825, "index out of bounds: the len is {} but the index is {}", _824, _823) -> bb271; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb271: {                            
        _4[_823] = _813;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_813);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_814);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_818);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_826);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_827);               // scope 13 at src\keccak.rs:49:56: 54:43
        _827 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_828);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_829);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_830);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_831);               // scope 13 at src\keccak.rs:49:60: 49:87
        _831 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _830 = _831 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_831);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_832);               // scope 13 at src\keccak.rs:54:46: 54:52
        _833 = CheckedAdd(const 5usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_833.1: bool), "attempt to add with overflow") -> bb272; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb272: {                            
        _832 = (_833.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _829 = const std::ops::Index::index(_830, _832) -> bb273; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb273: {                            
        _828 = (*_829);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_832);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_830);               // scope 13 at src\keccak.rs:49:91: 49:91
        _834 = CheckedShl(_827, _828);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_834.1: bool), "attempt to shift left with overflow") -> bb274; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb274: {                            
        _826 = (_834.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_828);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_827);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_835);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_836);               // scope 13 at src\keccak.rs:49:56: 54:43
        _836 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_837);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_838);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_839);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_840);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_841);               // scope 13 at src\keccak.rs:49:60: 49:87
        _841 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _840 = _841 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_841);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_842);               // scope 13 at src\keccak.rs:54:46: 54:52
        _843 = CheckedAdd(const 5usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_843.1: bool), "attempt to add with overflow") -> bb275; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb275: {                            
        _842 = (_843.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _839 = const std::ops::Index::index(_840, _842) -> bb276; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb276: {                            
        _838 = (*_839);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_842);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_840);               // scope 13 at src\keccak.rs:49:91: 49:91
        _844 = CheckedSub(const 64i32, _838); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_844.1: bool), "attempt to subtract with overflow") -> bb277; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb277: {                            
        _837 = (_844.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_838);               // scope 13 at src\keccak.rs:49:91: 49:91
        _845 = CheckedShr(_836, _837);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_845.1: bool), "attempt to shift right with overflow") -> bb278; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb278: {                            
        _835 = (_845.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_837);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_836);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_846);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_847);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_848);               // scope 13 at src\keccak.rs:100:36: 100:38
        _848 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _847 = _848 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_848);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_849);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_850);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_851);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_852);               // scope 13 at src\keccak.rs:49:13: 49:40
        _852 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _851 = _852 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_852);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_853);               // scope 13 at src\keccak.rs:54:46: 54:52
        _854 = CheckedAdd(const 5usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_854.1: bool), "attempt to add with overflow") -> bb279; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb279: {                            
        _853 = (_854.0: usize);          // scope 13 at src\keccak.rs:54:46: 54:52
        _850 = const std::ops::Index::index(_851, _853) -> bb280; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb280: {                            
        _849 = (*_850);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_853);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_851);               // scope 13 at src\keccak.rs:49:44: 49:44
        _846 = const std::ops::IndexMut::index_mut(_847, _849) -> bb281; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb281: {                            
        StorageDead(_849);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_847);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_846) = BitOr(_826, _835);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_835);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_826);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_846);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_850);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_839);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_829);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_855);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_856);               // scope 13 at src\keccak.rs:50:18: 50:19
        _856 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _857 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _858 = Lt(_856, _857);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_858, "index out of bounds: the len is {} but the index is {}", _857, _856) -> bb282; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb282: {                            
        _855 = _4[_856];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _855;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_855);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_859);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_860);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_861);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_862);               // scope 13 at src\keccak.rs:100:36: 100:38
        _862 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _861 = _862 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_862);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_863);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_864);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_865);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_866);               // scope 13 at src\keccak.rs:48:22: 48:49
        _866 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _865 = _866 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_866);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_867);               // scope 13 at src\keccak.rs:54:93: 54:99
        _868 = CheckedAdd(const 5usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_868.1: bool), "attempt to add with overflow") -> bb283; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb283: {                            
        _867 = (_868.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _864 = const std::ops::Index::index(_865, _867) -> bb284; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb284: {                            
        _863 = (*_864);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_867);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_865);               // scope 13 at src\keccak.rs:48:53: 48:53
        _860 = const std::ops::Index::index(_861, _863) -> bb285; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb285: {                            
        _859 = (*_860);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_863);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_861);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_869);               // scope 13 at src\keccak.rs:48:13: 48:14
        _869 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _870 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _871 = Lt(_869, _870);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_871, "index out of bounds: the len is {} but the index is {}", _870, _869) -> bb286; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb286: {                            
        _4[_869] = _859;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_859);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_860);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_864);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_872);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_873);               // scope 13 at src\keccak.rs:49:56: 54:90
        _873 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_874);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_875);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_876);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_877);               // scope 13 at src\keccak.rs:49:60: 49:87
        _877 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _876 = _877 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_877);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_878);               // scope 13 at src\keccak.rs:54:93: 54:99
        _879 = CheckedAdd(const 5usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_879.1: bool), "attempt to add with overflow") -> bb287; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb287: {                            
        _878 = (_879.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _875 = const std::ops::Index::index(_876, _878) -> bb288; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb288: {                            
        _874 = (*_875);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_878);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_876);               // scope 13 at src\keccak.rs:49:91: 49:91
        _880 = CheckedShl(_873, _874);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_880.1: bool), "attempt to shift left with overflow") -> bb289; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb289: {                            
        _872 = (_880.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_874);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_873);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_881);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_882);               // scope 13 at src\keccak.rs:49:56: 54:90
        _882 = _3;                       // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_883);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_884);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_885);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_886);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_887);               // scope 13 at src\keccak.rs:49:60: 49:87
        _887 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _886 = _887 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_887);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_888);               // scope 13 at src\keccak.rs:54:93: 54:99
        _889 = CheckedAdd(const 5usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_889.1: bool), "attempt to add with overflow") -> bb290; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb290: {                            
        _888 = (_889.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _885 = const std::ops::Index::index(_886, _888) -> bb291; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb291: {                            
        _884 = (*_885);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_888);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_886);               // scope 13 at src\keccak.rs:49:91: 49:91
        _890 = CheckedSub(const 64i32, _884); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_890.1: bool), "attempt to subtract with overflow") -> bb292; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb292: {                            
        _883 = (_890.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_884);               // scope 13 at src\keccak.rs:49:91: 49:91
        _891 = CheckedShr(_882, _883);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_891.1: bool), "attempt to shift right with overflow") -> bb293; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb293: {                            
        _881 = (_891.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_883);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_882);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_892);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_893);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_894);               // scope 13 at src\keccak.rs:100:36: 100:38
        _894 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _893 = _894 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_894);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_895);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_896);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_897);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_898);               // scope 13 at src\keccak.rs:49:13: 49:40
        _898 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _897 = _898 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_898);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_899);               // scope 13 at src\keccak.rs:54:93: 54:99
        _900 = CheckedAdd(const 5usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_900.1: bool), "attempt to add with overflow") -> bb294; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb294: {                            
        _899 = (_900.0: usize);          // scope 13 at src\keccak.rs:54:93: 54:99
        _896 = const std::ops::Index::index(_897, _899) -> bb295; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb295: {                            
        _895 = (*_896);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_899);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_897);               // scope 13 at src\keccak.rs:49:44: 49:44
        _892 = const std::ops::IndexMut::index_mut(_893, _895) -> bb296; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb296: {                            
        StorageDead(_895);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_893);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_892) = BitOr(_872, _881);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_881);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_872);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_892);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_896);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_885);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_875);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_901);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_902);               // scope 13 at src\keccak.rs:50:18: 50:19
        _902 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _903 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _904 = Lt(_902, _903);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_904, "index out of bounds: the len is {} but the index is {}", _903, _902) -> bb297; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb297: {                            
        _901 = _4[_902];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _901;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_901);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_905);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_906);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_907);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_908);               // scope 13 at src\keccak.rs:100:36: 100:38
        _908 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _907 = _908 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_908);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_909);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_910);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_911);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_912);               // scope 13 at src\keccak.rs:48:22: 48:49
        _912 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _911 = _912 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_912);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_913);               // scope 13 at src\keccak.rs:55:46: 55:52
        _914 = CheckedAdd(const 5usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_914.1: bool), "attempt to add with overflow") -> bb298; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb298: {                            
        _913 = (_914.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _910 = const std::ops::Index::index(_911, _913) -> bb299; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb299: {                            
        _909 = (*_910);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_913);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_911);               // scope 13 at src\keccak.rs:48:53: 48:53
        _906 = const std::ops::Index::index(_907, _909) -> bb300; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb300: {                            
        _905 = (*_906);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_909);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_907);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_915);               // scope 13 at src\keccak.rs:48:13: 48:14
        _915 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _916 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _917 = Lt(_915, _916);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_917, "index out of bounds: the len is {} but the index is {}", _916, _915) -> bb301; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb301: {                            
        _4[_915] = _905;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_905);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_906);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_910);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_918);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_919);               // scope 13 at src\keccak.rs:49:56: 55:43
        _919 = _3;                       // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_920);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_921);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_922);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_923);               // scope 13 at src\keccak.rs:49:60: 49:87
        _923 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _922 = _923 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_923);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_924);               // scope 13 at src\keccak.rs:55:46: 55:52
        _925 = CheckedAdd(const 5usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_925.1: bool), "attempt to add with overflow") -> bb302; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb302: {                            
        _924 = (_925.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _921 = const std::ops::Index::index(_922, _924) -> bb303; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb303: {                            
        _920 = (*_921);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_924);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_922);               // scope 13 at src\keccak.rs:49:91: 49:91
        _926 = CheckedShl(_919, _920);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_926.1: bool), "attempt to shift left with overflow") -> bb304; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb304: {                            
        _918 = (_926.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_920);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_919);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_927);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_928);               // scope 13 at src\keccak.rs:49:56: 55:43
        _928 = _3;                       // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_929);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_930);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_931);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_932);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_933);               // scope 13 at src\keccak.rs:49:60: 49:87
        _933 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _932 = _933 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_933);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_934);               // scope 13 at src\keccak.rs:55:46: 55:52
        _935 = CheckedAdd(const 5usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_935.1: bool), "attempt to add with overflow") -> bb305; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb305: {                            
        _934 = (_935.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _931 = const std::ops::Index::index(_932, _934) -> bb306; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb306: {                            
        _930 = (*_931);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_934);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_932);               // scope 13 at src\keccak.rs:49:91: 49:91
        _936 = CheckedSub(const 64i32, _930); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_936.1: bool), "attempt to subtract with overflow") -> bb307; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb307: {                            
        _929 = (_936.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_930);               // scope 13 at src\keccak.rs:49:91: 49:91
        _937 = CheckedShr(_928, _929);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_937.1: bool), "attempt to shift right with overflow") -> bb308; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb308: {                            
        _927 = (_937.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_929);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_928);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_938);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_939);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_940);               // scope 13 at src\keccak.rs:100:36: 100:38
        _940 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _939 = _940 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_940);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_941);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_942);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_943);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_944);               // scope 13 at src\keccak.rs:49:13: 49:40
        _944 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _943 = _944 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_944);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_945);               // scope 13 at src\keccak.rs:55:46: 55:52
        _946 = CheckedAdd(const 5usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_946.1: bool), "attempt to add with overflow") -> bb309; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb309: {                            
        _945 = (_946.0: usize);          // scope 13 at src\keccak.rs:55:46: 55:52
        _942 = const std::ops::Index::index(_943, _945) -> bb310; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb310: {                            
        _941 = (*_942);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_945);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_943);               // scope 13 at src\keccak.rs:49:44: 49:44
        _938 = const std::ops::IndexMut::index_mut(_939, _941) -> bb311; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb311: {                            
        StorageDead(_941);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_939);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_938) = BitOr(_918, _927);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_927);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_918);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_938);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_942);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_931);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_921);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_947);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_948);               // scope 13 at src\keccak.rs:50:18: 50:19
        _948 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _949 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _950 = Lt(_948, _949);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_950, "index out of bounds: the len is {} but the index is {}", _949, _948) -> bb312; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb312: {                            
        _947 = _4[_948];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _947;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_947);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_951);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_952);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_953);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_954);               // scope 13 at src\keccak.rs:100:36: 100:38
        _954 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _953 = _954 as &[u64] (Unsize);  // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_954);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_955);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_956);               // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_957);               // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_958);               // scope 13 at src\keccak.rs:48:22: 48:49
        _958 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _957 = _958 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_958);               // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_959);               // scope 13 at src\keccak.rs:53:46: 53:52
        _960 = CheckedAdd(const 10usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_960.1: bool), "attempt to add with overflow") -> bb313; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb313: {                            
        _959 = (_960.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _956 = const std::ops::Index::index(_957, _959) -> bb314; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb314: {                            
        _955 = (*_956);                  // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_959);               // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_957);               // scope 13 at src\keccak.rs:48:53: 48:53
        _952 = const std::ops::Index::index(_953, _955) -> bb315; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb315: {                            
        _951 = (*_952);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_955);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_953);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_961);               // scope 13 at src\keccak.rs:48:13: 48:14
        _961 = const 0usize;             // scope 13 at src\keccak.rs:48:13: 48:14
        _962 = Len(_4);                  // scope 13 at src\keccak.rs:48:9: 48:15
        _963 = Lt(_961, _962);           // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_963, "index out of bounds: the len is {} but the index is {}", _962, _961) -> bb316; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb316: {                            
        _4[_961] = _951;                 // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_951);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_952);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_956);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_964);               // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_965);               // scope 13 at src\keccak.rs:49:56: 53:43
        _965 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_966);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_967);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_968);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_969);               // scope 13 at src\keccak.rs:49:60: 49:87
        _969 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _968 = _969 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_969);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_970);               // scope 13 at src\keccak.rs:53:46: 53:52
        _971 = CheckedAdd(const 10usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_971.1: bool), "attempt to add with overflow") -> bb317; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb317: {                            
        _970 = (_971.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _967 = const std::ops::Index::index(_968, _970) -> bb318; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb318: {                            
        _966 = (*_967);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_970);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_968);               // scope 13 at src\keccak.rs:49:91: 49:91
        _972 = CheckedShl(_965, _966);   // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_972.1: bool), "attempt to shift left with overflow") -> bb319; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb319: {                            
        _964 = (_972.0: u64);            // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_966);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_965);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_973);               // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_974);               // scope 13 at src\keccak.rs:49:56: 53:43
        _974 = _3;                       // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_975);               // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_976);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_977);               // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_978);               // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_979);               // scope 13 at src\keccak.rs:49:60: 49:87
        _979 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _978 = _979 as &[i32] (Unsize);  // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_979);               // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_980);               // scope 13 at src\keccak.rs:53:46: 53:52
        _981 = CheckedAdd(const 10usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_981.1: bool), "attempt to add with overflow") -> bb320; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb320: {                            
        _980 = (_981.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _977 = const std::ops::Index::index(_978, _980) -> bb321; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb321: {                            
        _976 = (*_977);                  // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_980);               // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_978);               // scope 13 at src\keccak.rs:49:91: 49:91
        _982 = CheckedSub(const 64i32, _976); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_982.1: bool), "attempt to subtract with overflow") -> bb322; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb322: {                            
        _975 = (_982.0: i32);            // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_976);               // scope 13 at src\keccak.rs:49:91: 49:91
        _983 = CheckedShr(_974, _975);   // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_983.1: bool), "attempt to shift right with overflow") -> bb323; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb323: {                            
        _973 = (_983.0: u64);            // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_975);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_974);               // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_984);               // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_985);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_986);               // scope 13 at src\keccak.rs:100:36: 100:38
        _986 = _1;                       // scope 13 at src\keccak.rs:100:36: 100:38
        _985 = _986 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_986);               // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_987);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_988);               // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_989);               // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_990);               // scope 13 at src\keccak.rs:49:13: 49:40
        _990 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _989 = _990 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_990);               // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_991);               // scope 13 at src\keccak.rs:53:46: 53:52
        _992 = CheckedAdd(const 10usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_992.1: bool), "attempt to add with overflow") -> bb324; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb324: {                            
        _991 = (_992.0: usize);          // scope 13 at src\keccak.rs:53:46: 53:52
        _988 = const std::ops::Index::index(_989, _991) -> bb325; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb325: {                            
        _987 = (*_988);                  // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_991);               // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_989);               // scope 13 at src\keccak.rs:49:44: 49:44
        _984 = const std::ops::IndexMut::index_mut(_985, _987) -> bb326; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb326: {                            
        StorageDead(_987);               // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_985);               // scope 13 at src\keccak.rs:49:45: 49:45
        (*_984) = BitOr(_964, _973);     // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_973);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_964);               // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_984);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_988);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_977);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_967);               // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_993);               // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_994);               // scope 13 at src\keccak.rs:50:18: 50:19
        _994 = const 0usize;             // scope 13 at src\keccak.rs:50:18: 50:19
        _995 = Len(_4);                  // scope 13 at src\keccak.rs:50:14: 50:20
        _996 = Lt(_994, _995);           // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_996, "index out of bounds: the len is {} but the index is {}", _995, _994) -> bb327; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb327: {                            
        _993 = _4[_994];                 // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _993;                       // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_993);               // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_997);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_998);               // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_999);               // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1000);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1000 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _999 = _1000 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1000);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1001);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1002);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1003);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1004);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1004 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1003 = _1004 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1004);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1005);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1006 = CheckedAdd(const 10usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1006.1: bool), "attempt to add with overflow") -> bb328; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb328: {                            
        _1005 = (_1006.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1002 = const std::ops::Index::index(_1003, _1005) -> bb329; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb329: {                            
        _1001 = (*_1002);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1005);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1003);              // scope 13 at src\keccak.rs:48:53: 48:53
        _998 = const std::ops::Index::index(_999, _1001) -> bb330; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb330: {                            
        _997 = (*_998);                  // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1001);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_999);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1007);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1007 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1008 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1009 = Lt(_1007, _1008);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1009, "index out of bounds: the len is {} but the index is {}", _1008, _1007) -> bb331; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb331: {                            
        _4[_1007] = _997;                // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_997);               // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_998);               // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1002);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1010);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1011);              // scope 13 at src\keccak.rs:49:56: 53:90
        _1011 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_1012);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1013);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1014);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1015);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1015 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1014 = _1015 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1015);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1016);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1017 = CheckedAdd(const 10usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1017.1: bool), "attempt to add with overflow") -> bb332; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb332: {                            
        _1016 = (_1017.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1013 = const std::ops::Index::index(_1014, _1016) -> bb333; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb333: {                            
        _1012 = (*_1013);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1016);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1014);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1018 = CheckedShl(_1011, _1012); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1018.1: bool), "attempt to shift left with overflow") -> bb334; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb334: {                            
        _1010 = (_1018.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1012);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1011);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1019);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1020);              // scope 13 at src\keccak.rs:49:56: 53:90
        _1020 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_1021);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1022);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1023);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1024);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1025);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1025 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1024 = _1025 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1025);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1026);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1027 = CheckedAdd(const 10usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1027.1: bool), "attempt to add with overflow") -> bb335; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb335: {                            
        _1026 = (_1027.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1023 = const std::ops::Index::index(_1024, _1026) -> bb336; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb336: {                            
        _1022 = (*_1023);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1026);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1024);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1028 = CheckedSub(const 64i32, _1022); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1028.1: bool), "attempt to subtract with overflow") -> bb337; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb337: {                            
        _1021 = (_1028.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1022);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1029 = CheckedShr(_1020, _1021); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1029.1: bool), "attempt to shift right with overflow") -> bb338; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb338: {                            
        _1019 = (_1029.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1021);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1020);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1030);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1031);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1032);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1032 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1031 = _1032 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1032);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1033);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1034);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1035);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1036);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1036 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1035 = _1036 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1036);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1037);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1038 = CheckedAdd(const 10usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1038.1: bool), "attempt to add with overflow") -> bb339; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb339: {                            
        _1037 = (_1038.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1034 = const std::ops::Index::index(_1035, _1037) -> bb340; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb340: {                            
        _1033 = (*_1034);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1037);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1035);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1030 = const std::ops::IndexMut::index_mut(_1031, _1033) -> bb341; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb341: {                            
        StorageDead(_1033);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1031);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1030) = BitOr(_1010, _1019);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1019);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1010);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1030);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1034);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1023);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1013);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1039);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1040);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1040 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1041 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1042 = Lt(_1040, _1041);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1042, "index out of bounds: the len is {} but the index is {}", _1041, _1040) -> bb342; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb342: {                            
        _1039 = _4[_1040];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1039;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1039);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1043);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1044);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1045);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1046);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1046 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1045 = _1046 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1046);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1047);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1048);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1049);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1050);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1050 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1049 = _1050 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1050);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1051);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1052 = CheckedAdd(const 10usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1052.1: bool), "attempt to add with overflow") -> bb343; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb343: {                            
        _1051 = (_1052.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1048 = const std::ops::Index::index(_1049, _1051) -> bb344; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb344: {                            
        _1047 = (*_1048);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1051);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1049);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1044 = const std::ops::Index::index(_1045, _1047) -> bb345; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb345: {                            
        _1043 = (*_1044);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1047);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1045);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1053);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1053 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1054 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1055 = Lt(_1053, _1054);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1055, "index out of bounds: the len is {} but the index is {}", _1054, _1053) -> bb346; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb346: {                            
        _4[_1053] = _1043;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1043);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1044);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1048);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1056);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1057);              // scope 13 at src\keccak.rs:49:56: 54:43
        _1057 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_1058);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1059);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1060);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1061);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1061 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1060 = _1061 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1061);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1062);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1063 = CheckedAdd(const 10usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1063.1: bool), "attempt to add with overflow") -> bb347; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb347: {                            
        _1062 = (_1063.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1059 = const std::ops::Index::index(_1060, _1062) -> bb348; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb348: {                            
        _1058 = (*_1059);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1062);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1060);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1064 = CheckedShl(_1057, _1058); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1064.1: bool), "attempt to shift left with overflow") -> bb349; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb349: {                            
        _1056 = (_1064.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1058);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1057);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1065);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1066);              // scope 13 at src\keccak.rs:49:56: 54:43
        _1066 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_1067);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1068);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1069);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1070);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1071);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1071 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1070 = _1071 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1071);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1072);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1073 = CheckedAdd(const 10usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1073.1: bool), "attempt to add with overflow") -> bb350; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb350: {                            
        _1072 = (_1073.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1069 = const std::ops::Index::index(_1070, _1072) -> bb351; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb351: {                            
        _1068 = (*_1069);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1072);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1070);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1074 = CheckedSub(const 64i32, _1068); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1074.1: bool), "attempt to subtract with overflow") -> bb352; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb352: {                            
        _1067 = (_1074.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1068);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1075 = CheckedShr(_1066, _1067); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1075.1: bool), "attempt to shift right with overflow") -> bb353; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb353: {                            
        _1065 = (_1075.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1067);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1066);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1076);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1077);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1078);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1078 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1077 = _1078 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1078);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1079);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1080);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1081);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1082);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1082 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1081 = _1082 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1082);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1083);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1084 = CheckedAdd(const 10usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1084.1: bool), "attempt to add with overflow") -> bb354; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb354: {                            
        _1083 = (_1084.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1080 = const std::ops::Index::index(_1081, _1083) -> bb355; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb355: {                            
        _1079 = (*_1080);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1083);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1081);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1076 = const std::ops::IndexMut::index_mut(_1077, _1079) -> bb356; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb356: {                            
        StorageDead(_1079);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1077);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1076) = BitOr(_1056, _1065);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1065);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1056);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1076);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1080);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1069);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1059);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1085);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1086);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1086 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1087 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1088 = Lt(_1086, _1087);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1088, "index out of bounds: the len is {} but the index is {}", _1087, _1086) -> bb357; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb357: {                            
        _1085 = _4[_1086];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1085;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1085);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1089);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1090);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1091);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1092);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1092 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1091 = _1092 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1092);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1093);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1094);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1095);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1096);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1096 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1095 = _1096 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1096);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1097);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1098 = CheckedAdd(const 10usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1098.1: bool), "attempt to add with overflow") -> bb358; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb358: {                            
        _1097 = (_1098.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1094 = const std::ops::Index::index(_1095, _1097) -> bb359; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb359: {                            
        _1093 = (*_1094);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1097);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1095);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1090 = const std::ops::Index::index(_1091, _1093) -> bb360; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb360: {                            
        _1089 = (*_1090);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1093);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1091);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1099);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1099 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1100 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1101 = Lt(_1099, _1100);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1101, "index out of bounds: the len is {} but the index is {}", _1100, _1099) -> bb361; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb361: {                            
        _4[_1099] = _1089;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1089);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1090);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1094);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1102);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1103);              // scope 13 at src\keccak.rs:49:56: 54:90
        _1103 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_1104);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1105);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1106);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1107);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1107 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1106 = _1107 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1107);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1108);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1109 = CheckedAdd(const 10usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1109.1: bool), "attempt to add with overflow") -> bb362; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb362: {                            
        _1108 = (_1109.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1105 = const std::ops::Index::index(_1106, _1108) -> bb363; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb363: {                            
        _1104 = (*_1105);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1108);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1106);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1110 = CheckedShl(_1103, _1104); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1110.1: bool), "attempt to shift left with overflow") -> bb364; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb364: {                            
        _1102 = (_1110.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1104);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1103);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1111);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1112);              // scope 13 at src\keccak.rs:49:56: 54:90
        _1112 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_1113);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1114);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1115);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1116);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1117);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1117 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1116 = _1117 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1117);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1118);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1119 = CheckedAdd(const 10usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1119.1: bool), "attempt to add with overflow") -> bb365; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb365: {                            
        _1118 = (_1119.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1115 = const std::ops::Index::index(_1116, _1118) -> bb366; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb366: {                            
        _1114 = (*_1115);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1118);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1116);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1120 = CheckedSub(const 64i32, _1114); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1120.1: bool), "attempt to subtract with overflow") -> bb367; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb367: {                            
        _1113 = (_1120.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1114);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1121 = CheckedShr(_1112, _1113); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1121.1: bool), "attempt to shift right with overflow") -> bb368; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb368: {                            
        _1111 = (_1121.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1113);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1112);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1122);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1123);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1124);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1124 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1123 = _1124 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1124);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1125);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1126);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1127);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1128);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1128 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1127 = _1128 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1128);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1129);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1130 = CheckedAdd(const 10usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1130.1: bool), "attempt to add with overflow") -> bb369; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb369: {                            
        _1129 = (_1130.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1126 = const std::ops::Index::index(_1127, _1129) -> bb370; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb370: {                            
        _1125 = (*_1126);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1129);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1127);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1122 = const std::ops::IndexMut::index_mut(_1123, _1125) -> bb371; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb371: {                            
        StorageDead(_1125);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1123);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1122) = BitOr(_1102, _1111);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1111);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1102);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1122);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1126);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1115);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1105);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1131);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1132);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1132 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1133 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1134 = Lt(_1132, _1133);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1134, "index out of bounds: the len is {} but the index is {}", _1133, _1132) -> bb372; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb372: {                            
        _1131 = _4[_1132];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1131;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1131);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1135);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1136);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1137);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1138);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1138 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1137 = _1138 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1138);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1139);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1140);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1141);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1142);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1142 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1141 = _1142 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1142);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1143);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1144 = CheckedAdd(const 10usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1144.1: bool), "attempt to add with overflow") -> bb373; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb373: {                            
        _1143 = (_1144.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1140 = const std::ops::Index::index(_1141, _1143) -> bb374; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb374: {                            
        _1139 = (*_1140);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1143);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1141);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1136 = const std::ops::Index::index(_1137, _1139) -> bb375; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb375: {                            
        _1135 = (*_1136);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1139);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1137);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1145);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1145 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1146 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1147 = Lt(_1145, _1146);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1147, "index out of bounds: the len is {} but the index is {}", _1146, _1145) -> bb376; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb376: {                            
        _4[_1145] = _1135;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1135);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1136);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1140);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1148);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1149);              // scope 13 at src\keccak.rs:49:56: 55:43
        _1149 = _3;                      // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_1150);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1151);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1152);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1153);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1153 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1152 = _1153 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1153);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1154);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1155 = CheckedAdd(const 10usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1155.1: bool), "attempt to add with overflow") -> bb377; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb377: {                            
        _1154 = (_1155.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1151 = const std::ops::Index::index(_1152, _1154) -> bb378; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb378: {                            
        _1150 = (*_1151);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1154);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1152);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1156 = CheckedShl(_1149, _1150); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1156.1: bool), "attempt to shift left with overflow") -> bb379; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb379: {                            
        _1148 = (_1156.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1150);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1149);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1157);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1158);              // scope 13 at src\keccak.rs:49:56: 55:43
        _1158 = _3;                      // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_1159);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1160);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1161);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1162);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1163);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1163 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1162 = _1163 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1163);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1164);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1165 = CheckedAdd(const 10usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1165.1: bool), "attempt to add with overflow") -> bb380; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb380: {                            
        _1164 = (_1165.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1161 = const std::ops::Index::index(_1162, _1164) -> bb381; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb381: {                            
        _1160 = (*_1161);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1164);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1162);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1166 = CheckedSub(const 64i32, _1160); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1166.1: bool), "attempt to subtract with overflow") -> bb382; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb382: {                            
        _1159 = (_1166.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1160);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1167 = CheckedShr(_1158, _1159); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1167.1: bool), "attempt to shift right with overflow") -> bb383; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb383: {                            
        _1157 = (_1167.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1159);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1158);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1168);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1169);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1170);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1170 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1169 = _1170 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1170);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1171);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1172);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1173);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1174);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1174 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1173 = _1174 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1174);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1175);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1176 = CheckedAdd(const 10usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1176.1: bool), "attempt to add with overflow") -> bb384; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb384: {                            
        _1175 = (_1176.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1172 = const std::ops::Index::index(_1173, _1175) -> bb385; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb385: {                            
        _1171 = (*_1172);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1175);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1173);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1168 = const std::ops::IndexMut::index_mut(_1169, _1171) -> bb386; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb386: {                            
        StorageDead(_1171);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1169);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1168) = BitOr(_1148, _1157);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1157);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1148);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1168);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1172);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1161);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1151);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1177);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1178);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1178 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1179 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1180 = Lt(_1178, _1179);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1180, "index out of bounds: the len is {} but the index is {}", _1179, _1178) -> bb387; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb387: {                            
        _1177 = _4[_1178];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1177;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1177);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1181);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1182);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1183);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1184);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1184 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1183 = _1184 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1184);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1185);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1186);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1187);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1188);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1188 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1187 = _1188 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1188);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1189);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1190 = CheckedAdd(const 15usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1190.1: bool), "attempt to add with overflow") -> bb388; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb388: {                            
        _1189 = (_1190.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1186 = const std::ops::Index::index(_1187, _1189) -> bb389; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb389: {                            
        _1185 = (*_1186);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1189);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1187);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1182 = const std::ops::Index::index(_1183, _1185) -> bb390; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb390: {                            
        _1181 = (*_1182);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1185);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1183);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1191);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1191 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1192 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1193 = Lt(_1191, _1192);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1193, "index out of bounds: the len is {} but the index is {}", _1192, _1191) -> bb391; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb391: {                            
        _4[_1191] = _1181;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1181);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1182);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1186);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1194);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1195);              // scope 13 at src\keccak.rs:49:56: 53:43
        _1195 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_1196);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1197);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1198);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1199);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1199 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1198 = _1199 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1199);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1200);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1201 = CheckedAdd(const 15usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1201.1: bool), "attempt to add with overflow") -> bb392; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb392: {                            
        _1200 = (_1201.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1197 = const std::ops::Index::index(_1198, _1200) -> bb393; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb393: {                            
        _1196 = (*_1197);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1200);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1198);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1202 = CheckedShl(_1195, _1196); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1202.1: bool), "attempt to shift left with overflow") -> bb394; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb394: {                            
        _1194 = (_1202.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1196);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1195);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1203);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1204);              // scope 13 at src\keccak.rs:49:56: 53:43
        _1204 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_1205);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1206);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1207);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1208);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1209);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1209 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1208 = _1209 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1209);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1210);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1211 = CheckedAdd(const 15usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1211.1: bool), "attempt to add with overflow") -> bb395; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb395: {                            
        _1210 = (_1211.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1207 = const std::ops::Index::index(_1208, _1210) -> bb396; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb396: {                            
        _1206 = (*_1207);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1210);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1208);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1212 = CheckedSub(const 64i32, _1206); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1212.1: bool), "attempt to subtract with overflow") -> bb397; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb397: {                            
        _1205 = (_1212.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1206);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1213 = CheckedShr(_1204, _1205); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1213.1: bool), "attempt to shift right with overflow") -> bb398; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb398: {                            
        _1203 = (_1213.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1205);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1204);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1214);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1215);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1216);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1216 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1215 = _1216 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1216);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1217);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1218);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1219);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1220);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1220 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1219 = _1220 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1220);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1221);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1222 = CheckedAdd(const 15usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1222.1: bool), "attempt to add with overflow") -> bb399; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb399: {                            
        _1221 = (_1222.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1218 = const std::ops::Index::index(_1219, _1221) -> bb400; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb400: {                            
        _1217 = (*_1218);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1221);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1219);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1214 = const std::ops::IndexMut::index_mut(_1215, _1217) -> bb401; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb401: {                            
        StorageDead(_1217);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1215);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1214) = BitOr(_1194, _1203);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1203);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1194);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1214);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1218);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1207);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1197);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1223);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1224);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1224 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1225 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1226 = Lt(_1224, _1225);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1226, "index out of bounds: the len is {} but the index is {}", _1225, _1224) -> bb402; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb402: {                            
        _1223 = _4[_1224];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1223;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1223);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1227);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1228);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1229);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1230);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1230 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1229 = _1230 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1230);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1231);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1232);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1233);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1234);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1234 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1233 = _1234 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1234);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1235);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1236 = CheckedAdd(const 15usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1236.1: bool), "attempt to add with overflow") -> bb403; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb403: {                            
        _1235 = (_1236.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1232 = const std::ops::Index::index(_1233, _1235) -> bb404; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb404: {                            
        _1231 = (*_1232);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1235);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1233);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1228 = const std::ops::Index::index(_1229, _1231) -> bb405; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb405: {                            
        _1227 = (*_1228);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1231);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1229);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1237);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1237 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1238 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1239 = Lt(_1237, _1238);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1239, "index out of bounds: the len is {} but the index is {}", _1238, _1237) -> bb406; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb406: {                            
        _4[_1237] = _1227;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1227);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1228);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1232);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1240);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1241);              // scope 13 at src\keccak.rs:49:56: 53:90
        _1241 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_1242);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1243);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1244);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1245);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1245 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1244 = _1245 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1245);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1246);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1247 = CheckedAdd(const 15usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1247.1: bool), "attempt to add with overflow") -> bb407; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb407: {                            
        _1246 = (_1247.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1243 = const std::ops::Index::index(_1244, _1246) -> bb408; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb408: {                            
        _1242 = (*_1243);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1246);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1244);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1248 = CheckedShl(_1241, _1242); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1248.1: bool), "attempt to shift left with overflow") -> bb409; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb409: {                            
        _1240 = (_1248.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1242);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1241);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1249);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1250);              // scope 13 at src\keccak.rs:49:56: 53:90
        _1250 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_1251);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1252);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1253);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1254);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1255);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1255 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1254 = _1255 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1255);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1256);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1257 = CheckedAdd(const 15usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1257.1: bool), "attempt to add with overflow") -> bb410; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb410: {                            
        _1256 = (_1257.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1253 = const std::ops::Index::index(_1254, _1256) -> bb411; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb411: {                            
        _1252 = (*_1253);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1256);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1254);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1258 = CheckedSub(const 64i32, _1252); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1258.1: bool), "attempt to subtract with overflow") -> bb412; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb412: {                            
        _1251 = (_1258.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1252);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1259 = CheckedShr(_1250, _1251); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1259.1: bool), "attempt to shift right with overflow") -> bb413; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb413: {                            
        _1249 = (_1259.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1251);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1250);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1260);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1261);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1262);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1262 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1261 = _1262 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1262);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1263);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1264);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1265);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1266);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1266 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1265 = _1266 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1266);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1267);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1268 = CheckedAdd(const 15usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1268.1: bool), "attempt to add with overflow") -> bb414; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb414: {                            
        _1267 = (_1268.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1264 = const std::ops::Index::index(_1265, _1267) -> bb415; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb415: {                            
        _1263 = (*_1264);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1267);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1265);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1260 = const std::ops::IndexMut::index_mut(_1261, _1263) -> bb416; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb416: {                            
        StorageDead(_1263);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1261);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1260) = BitOr(_1240, _1249);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1249);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1240);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1260);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1264);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1253);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1243);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1269);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1270);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1270 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1271 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1272 = Lt(_1270, _1271);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1272, "index out of bounds: the len is {} but the index is {}", _1271, _1270) -> bb417; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb417: {                            
        _1269 = _4[_1270];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1269;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1269);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1273);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1274);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1275);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1276);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1276 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1275 = _1276 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1276);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1277);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1278);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1279);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1280);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1280 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1279 = _1280 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1280);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1281);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1282 = CheckedAdd(const 15usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1282.1: bool), "attempt to add with overflow") -> bb418; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb418: {                            
        _1281 = (_1282.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1278 = const std::ops::Index::index(_1279, _1281) -> bb419; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb419: {                            
        _1277 = (*_1278);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1281);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1279);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1274 = const std::ops::Index::index(_1275, _1277) -> bb420; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb420: {                            
        _1273 = (*_1274);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1277);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1275);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1283);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1283 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1284 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1285 = Lt(_1283, _1284);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1285, "index out of bounds: the len is {} but the index is {}", _1284, _1283) -> bb421; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb421: {                            
        _4[_1283] = _1273;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1273);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1274);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1278);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1286);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1287);              // scope 13 at src\keccak.rs:49:56: 54:43
        _1287 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_1288);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1289);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1290);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1291);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1291 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1290 = _1291 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1291);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1292);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1293 = CheckedAdd(const 15usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1293.1: bool), "attempt to add with overflow") -> bb422; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb422: {                            
        _1292 = (_1293.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1289 = const std::ops::Index::index(_1290, _1292) -> bb423; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb423: {                            
        _1288 = (*_1289);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1292);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1290);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1294 = CheckedShl(_1287, _1288); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1294.1: bool), "attempt to shift left with overflow") -> bb424; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb424: {                            
        _1286 = (_1294.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1288);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1287);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1295);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1296);              // scope 13 at src\keccak.rs:49:56: 54:43
        _1296 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_1297);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1298);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1299);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1300);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1301);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1301 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1300 = _1301 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1301);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1302);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1303 = CheckedAdd(const 15usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1303.1: bool), "attempt to add with overflow") -> bb425; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb425: {                            
        _1302 = (_1303.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1299 = const std::ops::Index::index(_1300, _1302) -> bb426; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb426: {                            
        _1298 = (*_1299);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1302);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1300);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1304 = CheckedSub(const 64i32, _1298); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1304.1: bool), "attempt to subtract with overflow") -> bb427; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb427: {                            
        _1297 = (_1304.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1298);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1305 = CheckedShr(_1296, _1297); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1305.1: bool), "attempt to shift right with overflow") -> bb428; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb428: {                            
        _1295 = (_1305.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1297);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1296);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1306);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1307);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1308);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1308 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1307 = _1308 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1308);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1309);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1310);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1311);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1312);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1312 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1311 = _1312 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1312);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1313);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1314 = CheckedAdd(const 15usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1314.1: bool), "attempt to add with overflow") -> bb429; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb429: {                            
        _1313 = (_1314.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1310 = const std::ops::Index::index(_1311, _1313) -> bb430; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb430: {                            
        _1309 = (*_1310);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1313);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1311);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1306 = const std::ops::IndexMut::index_mut(_1307, _1309) -> bb431; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb431: {                            
        StorageDead(_1309);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1307);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1306) = BitOr(_1286, _1295);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1295);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1286);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1306);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1310);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1299);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1289);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1315);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1316);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1316 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1317 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1318 = Lt(_1316, _1317);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1318, "index out of bounds: the len is {} but the index is {}", _1317, _1316) -> bb432; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb432: {                            
        _1315 = _4[_1316];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1315;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1315);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1319);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1320);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1321);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1322);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1322 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1321 = _1322 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1322);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1323);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1324);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1325);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1326);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1326 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1325 = _1326 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1326);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1327);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1328 = CheckedAdd(const 15usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1328.1: bool), "attempt to add with overflow") -> bb433; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb433: {                            
        _1327 = (_1328.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1324 = const std::ops::Index::index(_1325, _1327) -> bb434; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb434: {                            
        _1323 = (*_1324);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1327);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1325);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1320 = const std::ops::Index::index(_1321, _1323) -> bb435; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb435: {                            
        _1319 = (*_1320);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1323);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1321);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1329);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1329 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1330 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1331 = Lt(_1329, _1330);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1331, "index out of bounds: the len is {} but the index is {}", _1330, _1329) -> bb436; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb436: {                            
        _4[_1329] = _1319;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1319);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1320);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1324);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1332);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1333);              // scope 13 at src\keccak.rs:49:56: 54:90
        _1333 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_1334);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1335);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1336);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1337);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1337 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1336 = _1337 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1337);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1338);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1339 = CheckedAdd(const 15usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1339.1: bool), "attempt to add with overflow") -> bb437; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb437: {                            
        _1338 = (_1339.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1335 = const std::ops::Index::index(_1336, _1338) -> bb438; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb438: {                            
        _1334 = (*_1335);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1338);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1336);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1340 = CheckedShl(_1333, _1334); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1340.1: bool), "attempt to shift left with overflow") -> bb439; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb439: {                            
        _1332 = (_1340.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1334);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1333);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1341);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1342);              // scope 13 at src\keccak.rs:49:56: 54:90
        _1342 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_1343);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1344);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1345);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1346);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1347);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1347 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1346 = _1347 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1347);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1348);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1349 = CheckedAdd(const 15usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1349.1: bool), "attempt to add with overflow") -> bb440; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb440: {                            
        _1348 = (_1349.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1345 = const std::ops::Index::index(_1346, _1348) -> bb441; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb441: {                            
        _1344 = (*_1345);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1348);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1346);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1350 = CheckedSub(const 64i32, _1344); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1350.1: bool), "attempt to subtract with overflow") -> bb442; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb442: {                            
        _1343 = (_1350.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1344);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1351 = CheckedShr(_1342, _1343); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1351.1: bool), "attempt to shift right with overflow") -> bb443; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb443: {                            
        _1341 = (_1351.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1343);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1342);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1352);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1353);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1354);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1354 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1353 = _1354 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1354);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1355);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1356);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1357);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1358);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1358 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1357 = _1358 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1358);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1359);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1360 = CheckedAdd(const 15usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1360.1: bool), "attempt to add with overflow") -> bb444; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb444: {                            
        _1359 = (_1360.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1356 = const std::ops::Index::index(_1357, _1359) -> bb445; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb445: {                            
        _1355 = (*_1356);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1359);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1357);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1352 = const std::ops::IndexMut::index_mut(_1353, _1355) -> bb446; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb446: {                            
        StorageDead(_1355);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1353);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1352) = BitOr(_1332, _1341);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1341);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1332);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1352);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1356);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1345);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1335);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1361);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1362);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1362 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1363 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1364 = Lt(_1362, _1363);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1364, "index out of bounds: the len is {} but the index is {}", _1363, _1362) -> bb447; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb447: {                            
        _1361 = _4[_1362];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1361;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1361);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1365);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1366);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1367);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1368);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1368 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1367 = _1368 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1368);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1369);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1370);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1371);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1372);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1372 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1371 = _1372 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1372);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1373);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1374 = CheckedAdd(const 15usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1374.1: bool), "attempt to add with overflow") -> bb448; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb448: {                            
        _1373 = (_1374.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1370 = const std::ops::Index::index(_1371, _1373) -> bb449; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb449: {                            
        _1369 = (*_1370);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1373);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1371);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1366 = const std::ops::Index::index(_1367, _1369) -> bb450; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb450: {                            
        _1365 = (*_1366);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1369);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1367);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1375);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1375 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1376 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1377 = Lt(_1375, _1376);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1377, "index out of bounds: the len is {} but the index is {}", _1376, _1375) -> bb451; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb451: {                            
        _4[_1375] = _1365;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1365);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1366);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1370);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1378);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1379);              // scope 13 at src\keccak.rs:49:56: 55:43
        _1379 = _3;                      // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_1380);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1381);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1382);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1383);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1383 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1382 = _1383 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1383);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1384);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1385 = CheckedAdd(const 15usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1385.1: bool), "attempt to add with overflow") -> bb452; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb452: {                            
        _1384 = (_1385.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1381 = const std::ops::Index::index(_1382, _1384) -> bb453; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb453: {                            
        _1380 = (*_1381);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1384);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1382);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1386 = CheckedShl(_1379, _1380); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1386.1: bool), "attempt to shift left with overflow") -> bb454; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb454: {                            
        _1378 = (_1386.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1380);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1379);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1387);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1388);              // scope 13 at src\keccak.rs:49:56: 55:43
        _1388 = _3;                      // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_1389);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1390);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1391);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1392);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1393);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1393 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1392 = _1393 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1393);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1394);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1395 = CheckedAdd(const 15usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1395.1: bool), "attempt to add with overflow") -> bb455; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb455: {                            
        _1394 = (_1395.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1391 = const std::ops::Index::index(_1392, _1394) -> bb456; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb456: {                            
        _1390 = (*_1391);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1394);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1392);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1396 = CheckedSub(const 64i32, _1390); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1396.1: bool), "attempt to subtract with overflow") -> bb457; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb457: {                            
        _1389 = (_1396.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1390);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1397 = CheckedShr(_1388, _1389); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1397.1: bool), "attempt to shift right with overflow") -> bb458; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb458: {                            
        _1387 = (_1397.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1389);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1388);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1398);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1399);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1400);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1400 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1399 = _1400 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1400);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1401);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1402);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1403);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1404);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1404 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1403 = _1404 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1404);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1405);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1406 = CheckedAdd(const 15usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1406.1: bool), "attempt to add with overflow") -> bb459; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb459: {                            
        _1405 = (_1406.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1402 = const std::ops::Index::index(_1403, _1405) -> bb460; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb460: {                            
        _1401 = (*_1402);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1405);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1403);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1398 = const std::ops::IndexMut::index_mut(_1399, _1401) -> bb461; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb461: {                            
        StorageDead(_1401);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1399);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1398) = BitOr(_1378, _1387);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1387);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1378);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1398);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1402);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1391);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1381);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1407);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1408);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1408 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1409 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1410 = Lt(_1408, _1409);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1410, "index out of bounds: the len is {} but the index is {}", _1409, _1408) -> bb462; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb462: {                            
        _1407 = _4[_1408];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1407;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1407);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1411);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1412);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1413);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1414);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1414 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1413 = _1414 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1414);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1415);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1416);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1417);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1418);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1418 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1417 = _1418 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1418);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1419);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1420 = CheckedAdd(const 20usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1420.1: bool), "attempt to add with overflow") -> bb463; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb463: {                            
        _1419 = (_1420.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1416 = const std::ops::Index::index(_1417, _1419) -> bb464; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb464: {                            
        _1415 = (*_1416);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1419);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1417);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1412 = const std::ops::Index::index(_1413, _1415) -> bb465; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb465: {                            
        _1411 = (*_1412);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1415);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1413);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1421);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1421 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1422 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1423 = Lt(_1421, _1422);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1423, "index out of bounds: the len is {} but the index is {}", _1422, _1421) -> bb466; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb466: {                            
        _4[_1421] = _1411;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1411);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1412);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1416);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1424);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1425);              // scope 13 at src\keccak.rs:49:56: 53:43
        _1425 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_1426);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1427);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1428);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1429);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1429 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1428 = _1429 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1429);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1430);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1431 = CheckedAdd(const 20usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1431.1: bool), "attempt to add with overflow") -> bb467; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb467: {                            
        _1430 = (_1431.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1427 = const std::ops::Index::index(_1428, _1430) -> bb468; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb468: {                            
        _1426 = (*_1427);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1430);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1428);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1432 = CheckedShl(_1425, _1426); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1432.1: bool), "attempt to shift left with overflow") -> bb469; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb469: {                            
        _1424 = (_1432.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1426);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1425);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1433);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1434);              // scope 13 at src\keccak.rs:49:56: 53:43
        _1434 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:43
        StorageLive(_1435);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1436);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1437);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1438);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1439);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1439 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1438 = _1439 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1439);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1440);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1441 = CheckedAdd(const 20usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1441.1: bool), "attempt to add with overflow") -> bb470; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb470: {                            
        _1440 = (_1441.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1437 = const std::ops::Index::index(_1438, _1440) -> bb471; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb471: {                            
        _1436 = (*_1437);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1440);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1438);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1442 = CheckedSub(const 64i32, _1436); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1442.1: bool), "attempt to subtract with overflow") -> bb472; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb472: {                            
        _1435 = (_1442.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1436);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1443 = CheckedShr(_1434, _1435); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1443.1: bool), "attempt to shift right with overflow") -> bb473; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb473: {                            
        _1433 = (_1443.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1435);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1434);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1444);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1445);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1446);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1446 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1445 = _1446 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1446);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1447);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1448);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1449);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1450);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1450 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1449 = _1450 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1450);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1451);              // scope 13 at src\keccak.rs:53:46: 53:52
        _1452 = CheckedAdd(const 20usize, const 0usize); // scope 13 at src\keccak.rs:53:46: 53:52
        assert(!(_1452.1: bool), "attempt to add with overflow") -> bb474; // scope 13 at src\keccak.rs:53:46: 53:52
    }

    bb474: {                            
        _1451 = (_1452.0: usize);        // scope 13 at src\keccak.rs:53:46: 53:52
        _1448 = const std::ops::Index::index(_1449, _1451) -> bb475; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb475: {                            
        _1447 = (*_1448);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1451);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1449);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1444 = const std::ops::IndexMut::index_mut(_1445, _1447) -> bb476; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb476: {                            
        StorageDead(_1447);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1445);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1444) = BitOr(_1424, _1433);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1433);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1424);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1444);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1448);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1437);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1427);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1453);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1454);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1454 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1455 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1456 = Lt(_1454, _1455);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1456, "index out of bounds: the len is {} but the index is {}", _1455, _1454) -> bb477; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb477: {                            
        _1453 = _4[_1454];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1453;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1453);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1457);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1458);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1459);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1460);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1460 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1459 = _1460 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1460);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1461);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1462);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1463);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1464);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1464 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1463 = _1464 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1464);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1465);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1466 = CheckedAdd(const 20usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1466.1: bool), "attempt to add with overflow") -> bb478; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb478: {                            
        _1465 = (_1466.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1462 = const std::ops::Index::index(_1463, _1465) -> bb479; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb479: {                            
        _1461 = (*_1462);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1465);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1463);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1458 = const std::ops::Index::index(_1459, _1461) -> bb480; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb480: {                            
        _1457 = (*_1458);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1461);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1459);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1467);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1467 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1468 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1469 = Lt(_1467, _1468);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1469, "index out of bounds: the len is {} but the index is {}", _1468, _1467) -> bb481; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb481: {                            
        _4[_1467] = _1457;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1457);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1458);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1462);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1470);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1471);              // scope 13 at src\keccak.rs:49:56: 53:90
        _1471 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_1472);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1473);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1474);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1475);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1475 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1474 = _1475 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1475);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1476);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1477 = CheckedAdd(const 20usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1477.1: bool), "attempt to add with overflow") -> bb482; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb482: {                            
        _1476 = (_1477.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1473 = const std::ops::Index::index(_1474, _1476) -> bb483; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb483: {                            
        _1472 = (*_1473);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1476);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1474);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1478 = CheckedShl(_1471, _1472); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1478.1: bool), "attempt to shift left with overflow") -> bb484; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb484: {                            
        _1470 = (_1478.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1472);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1471);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1479);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1480);              // scope 13 at src\keccak.rs:49:56: 53:90
        _1480 = _3;                      // scope 13 at src\keccak.rs:49:56: 53:90
        StorageLive(_1481);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1482);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1483);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1484);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1485);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1485 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1484 = _1485 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1485);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1486);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1487 = CheckedAdd(const 20usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1487.1: bool), "attempt to add with overflow") -> bb485; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb485: {                            
        _1486 = (_1487.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1483 = const std::ops::Index::index(_1484, _1486) -> bb486; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb486: {                            
        _1482 = (*_1483);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1486);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1484);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1488 = CheckedSub(const 64i32, _1482); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1488.1: bool), "attempt to subtract with overflow") -> bb487; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb487: {                            
        _1481 = (_1488.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1482);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1489 = CheckedShr(_1480, _1481); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1489.1: bool), "attempt to shift right with overflow") -> bb488; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb488: {                            
        _1479 = (_1489.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1481);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1480);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1490);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1491);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1492);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1492 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1491 = _1492 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1492);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1493);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1494);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1495);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1496);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1496 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1495 = _1496 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1496);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1497);              // scope 13 at src\keccak.rs:53:93: 53:99
        _1498 = CheckedAdd(const 20usize, const 1usize); // scope 13 at src\keccak.rs:53:93: 53:99
        assert(!(_1498.1: bool), "attempt to add with overflow") -> bb489; // scope 13 at src\keccak.rs:53:93: 53:99
    }

    bb489: {                            
        _1497 = (_1498.0: usize);        // scope 13 at src\keccak.rs:53:93: 53:99
        _1494 = const std::ops::Index::index(_1495, _1497) -> bb490; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb490: {                            
        _1493 = (*_1494);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1497);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1495);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1490 = const std::ops::IndexMut::index_mut(_1491, _1493) -> bb491; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb491: {                            
        StorageDead(_1493);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1491);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1490) = BitOr(_1470, _1479);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1479);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1470);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1490);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1494);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1483);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1473);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1499);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1500);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1500 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1501 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1502 = Lt(_1500, _1501);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1502, "index out of bounds: the len is {} but the index is {}", _1501, _1500) -> bb492; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb492: {                            
        _1499 = _4[_1500];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1499;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1499);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1503);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1504);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1505);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1506);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1506 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1505 = _1506 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1506);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1507);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1508);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1509);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1510);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1510 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1509 = _1510 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1510);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1511);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1512 = CheckedAdd(const 20usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1512.1: bool), "attempt to add with overflow") -> bb493; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb493: {                            
        _1511 = (_1512.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1508 = const std::ops::Index::index(_1509, _1511) -> bb494; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb494: {                            
        _1507 = (*_1508);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1511);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1509);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1504 = const std::ops::Index::index(_1505, _1507) -> bb495; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb495: {                            
        _1503 = (*_1504);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1507);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1505);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1513);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1513 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1514 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1515 = Lt(_1513, _1514);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1515, "index out of bounds: the len is {} but the index is {}", _1514, _1513) -> bb496; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb496: {                            
        _4[_1513] = _1503;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1503);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1504);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1508);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1516);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1517);              // scope 13 at src\keccak.rs:49:56: 54:43
        _1517 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_1518);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1519);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1520);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1521);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1521 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1520 = _1521 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1521);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1522);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1523 = CheckedAdd(const 20usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1523.1: bool), "attempt to add with overflow") -> bb497; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb497: {                            
        _1522 = (_1523.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1519 = const std::ops::Index::index(_1520, _1522) -> bb498; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb498: {                            
        _1518 = (*_1519);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1522);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1520);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1524 = CheckedShl(_1517, _1518); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1524.1: bool), "attempt to shift left with overflow") -> bb499; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb499: {                            
        _1516 = (_1524.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1518);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1517);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1525);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1526);              // scope 13 at src\keccak.rs:49:56: 54:43
        _1526 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:43
        StorageLive(_1527);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1528);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1529);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1530);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1531);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1531 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1530 = _1531 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1531);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1532);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1533 = CheckedAdd(const 20usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1533.1: bool), "attempt to add with overflow") -> bb500; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb500: {                            
        _1532 = (_1533.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1529 = const std::ops::Index::index(_1530, _1532) -> bb501; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb501: {                            
        _1528 = (*_1529);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1532);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1530);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1534 = CheckedSub(const 64i32, _1528); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1534.1: bool), "attempt to subtract with overflow") -> bb502; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb502: {                            
        _1527 = (_1534.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1528);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1535 = CheckedShr(_1526, _1527); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1535.1: bool), "attempt to shift right with overflow") -> bb503; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb503: {                            
        _1525 = (_1535.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1527);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1526);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1536);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1537);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1538);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1538 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1537 = _1538 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1538);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1539);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1540);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1541);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1542);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1542 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1541 = _1542 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1542);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1543);              // scope 13 at src\keccak.rs:54:46: 54:52
        _1544 = CheckedAdd(const 20usize, const 2usize); // scope 13 at src\keccak.rs:54:46: 54:52
        assert(!(_1544.1: bool), "attempt to add with overflow") -> bb504; // scope 13 at src\keccak.rs:54:46: 54:52
    }

    bb504: {                            
        _1543 = (_1544.0: usize);        // scope 13 at src\keccak.rs:54:46: 54:52
        _1540 = const std::ops::Index::index(_1541, _1543) -> bb505; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb505: {                            
        _1539 = (*_1540);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1543);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1541);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1536 = const std::ops::IndexMut::index_mut(_1537, _1539) -> bb506; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb506: {                            
        StorageDead(_1539);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1537);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1536) = BitOr(_1516, _1525);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1525);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1516);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1536);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1540);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1529);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1519);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1545);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1546);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1546 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1547 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1548 = Lt(_1546, _1547);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1548, "index out of bounds: the len is {} but the index is {}", _1547, _1546) -> bb507; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb507: {                            
        _1545 = _4[_1546];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1545;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1545);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1549);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1550);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1551);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1552);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1552 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1551 = _1552 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1552);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1553);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1554);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1555);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1556);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1556 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1555 = _1556 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1556);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1557);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1558 = CheckedAdd(const 20usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1558.1: bool), "attempt to add with overflow") -> bb508; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb508: {                            
        _1557 = (_1558.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1554 = const std::ops::Index::index(_1555, _1557) -> bb509; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb509: {                            
        _1553 = (*_1554);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1557);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1555);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1550 = const std::ops::Index::index(_1551, _1553) -> bb510; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb510: {                            
        _1549 = (*_1550);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1553);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1551);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1559);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1559 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1560 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1561 = Lt(_1559, _1560);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1561, "index out of bounds: the len is {} but the index is {}", _1560, _1559) -> bb511; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb511: {                            
        _4[_1559] = _1549;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1549);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1550);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1554);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1562);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1563);              // scope 13 at src\keccak.rs:49:56: 54:90
        _1563 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_1564);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1565);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1566);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1567);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1567 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1566 = _1567 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1567);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1568);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1569 = CheckedAdd(const 20usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1569.1: bool), "attempt to add with overflow") -> bb512; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb512: {                            
        _1568 = (_1569.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1565 = const std::ops::Index::index(_1566, _1568) -> bb513; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb513: {                            
        _1564 = (*_1565);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1568);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1566);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1570 = CheckedShl(_1563, _1564); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1570.1: bool), "attempt to shift left with overflow") -> bb514; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb514: {                            
        _1562 = (_1570.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1564);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1563);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1571);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1572);              // scope 13 at src\keccak.rs:49:56: 54:90
        _1572 = _3;                      // scope 13 at src\keccak.rs:49:56: 54:90
        StorageLive(_1573);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1574);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1575);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1576);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1577);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1577 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1576 = _1577 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1577);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1578);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1579 = CheckedAdd(const 20usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1579.1: bool), "attempt to add with overflow") -> bb515; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb515: {                            
        _1578 = (_1579.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1575 = const std::ops::Index::index(_1576, _1578) -> bb516; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb516: {                            
        _1574 = (*_1575);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1578);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1576);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1580 = CheckedSub(const 64i32, _1574); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1580.1: bool), "attempt to subtract with overflow") -> bb517; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb517: {                            
        _1573 = (_1580.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1574);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1581 = CheckedShr(_1572, _1573); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1581.1: bool), "attempt to shift right with overflow") -> bb518; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb518: {                            
        _1571 = (_1581.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1573);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1572);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1582);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1583);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1584);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1584 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1583 = _1584 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1584);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1585);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1586);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1587);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1588);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1588 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1587 = _1588 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1588);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1589);              // scope 13 at src\keccak.rs:54:93: 54:99
        _1590 = CheckedAdd(const 20usize, const 3usize); // scope 13 at src\keccak.rs:54:93: 54:99
        assert(!(_1590.1: bool), "attempt to add with overflow") -> bb519; // scope 13 at src\keccak.rs:54:93: 54:99
    }

    bb519: {                            
        _1589 = (_1590.0: usize);        // scope 13 at src\keccak.rs:54:93: 54:99
        _1586 = const std::ops::Index::index(_1587, _1589) -> bb520; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb520: {                            
        _1585 = (*_1586);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1589);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1587);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1582 = const std::ops::IndexMut::index_mut(_1583, _1585) -> bb521; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb521: {                            
        StorageDead(_1585);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1583);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1582) = BitOr(_1562, _1571);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1571);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1562);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1582);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1586);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1575);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1565);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1591);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1592);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1592 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1593 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1594 = Lt(_1592, _1593);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1594, "index out of bounds: the len is {} but the index is {}", _1593, _1592) -> bb522; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb522: {                            
        _1591 = _4[_1592];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1591;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1591);              // scope 13 at src\keccak.rs:50:20: 50:20
        StorageLive(_1595);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1596);              // scope 13 at src\keccak.rs:48:18: 48:54
        StorageLive(_1597);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1598);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1598 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1597 = _1598 as &[u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1598);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1599);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1600);              // scope 13 at src\keccak.rs:48:22: 48:53
        StorageLive(_1601);              // scope 13 at src\keccak.rs:48:22: 48:49
        StorageLive(_1602);              // scope 13 at src\keccak.rs:48:22: 48:49
        _1602 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:48:22: 48:49
        _1601 = _1602 as &[usize] (Unsize); // scope 13 at src\keccak.rs:48:22: 48:49
        StorageDead(_1602);              // scope 13 at src\keccak.rs:48:49: 48:49
        StorageLive(_1603);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1604 = CheckedAdd(const 20usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1604.1: bool), "attempt to add with overflow") -> bb523; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb523: {                            
        _1603 = (_1604.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1600 = const std::ops::Index::index(_1601, _1603) -> bb524; // scope 13 at src\keccak.rs:48:22: 48:53
    }

    bb524: {                            
        _1599 = (*_1600);                // scope 13 at src\keccak.rs:48:22: 48:53
        StorageDead(_1603);              // scope 13 at src\keccak.rs:48:53: 48:53
        StorageDead(_1601);              // scope 13 at src\keccak.rs:48:53: 48:53
        _1596 = const std::ops::Index::index(_1597, _1599) -> bb525; // scope 13 at src\keccak.rs:48:18: 48:54
    }

    bb525: {                            
        _1595 = (*_1596);                // scope 13 at src\keccak.rs:48:18: 48:54
        StorageDead(_1599);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1597);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageLive(_1605);              // scope 13 at src\keccak.rs:48:13: 48:14
        _1605 = const 0usize;            // scope 13 at src\keccak.rs:48:13: 48:14
        _1606 = Len(_4);                 // scope 13 at src\keccak.rs:48:9: 48:15
        _1607 = Lt(_1605, _1606);        // scope 13 at src\keccak.rs:48:9: 48:15
        assert(_1607, "index out of bounds: the len is {} but the index is {}", _1606, _1605) -> bb526; // scope 13 at src\keccak.rs:48:9: 48:15
    }

    bb526: {                            
        _4[_1605] = _1595;               // scope 13 at src\keccak.rs:48:9: 48:54
        StorageDead(_1595);              // scope 13 at src\keccak.rs:48:54: 48:54
        StorageDead(_1596);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageDead(_1600);              // scope 13 at src\keccak.rs:48:55: 48:55
        StorageLive(_1608);              // scope 13 at src\keccak.rs:27:30: 49:91
        StorageLive(_1609);              // scope 13 at src\keccak.rs:49:56: 55:43
        _1609 = _3;                      // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_1610);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1611);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1612);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1613);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1613 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1612 = _1613 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1613);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1614);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1615 = CheckedAdd(const 20usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1615.1: bool), "attempt to add with overflow") -> bb527; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb527: {                            
        _1614 = (_1615.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1611 = const std::ops::Index::index(_1612, _1614) -> bb528; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb528: {                            
        _1610 = (*_1611);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1614);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1612);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1616 = CheckedShl(_1609, _1610); // scope 13 at src\keccak.rs:27:30: 49:91
        assert(!(_1616.1: bool), "attempt to shift left with overflow") -> bb529; // scope 13 at src\keccak.rs:27:30: 49:91
    }

    bb529: {                            
        _1608 = (_1616.0: u64);          // scope 13 at src\keccak.rs:27:30: 49:91
        StorageDead(_1610);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1609);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageLive(_1617);              // scope 13 at src\keccak.rs:27:42: 27:59
        StorageLive(_1618);              // scope 13 at src\keccak.rs:49:56: 55:43
        _1618 = _3;                      // scope 13 at src\keccak.rs:49:56: 55:43
        StorageLive(_1619);              // scope 13 at src\keccak.rs:27:50: 49:91
        StorageLive(_1620);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1621);              // scope 13 at src\keccak.rs:49:60: 49:91
        StorageLive(_1622);              // scope 13 at src\keccak.rs:49:60: 49:87
        StorageLive(_1623);              // scope 13 at src\keccak.rs:49:60: 49:87
        _1623 = &(keccak::KECCAK_ROTC: [i32; 24]); // scope 13 at src\keccak.rs:49:60: 49:87
        _1622 = _1623 as &[i32] (Unsize); // scope 13 at src\keccak.rs:49:60: 49:87
        StorageDead(_1623);              // scope 13 at src\keccak.rs:49:87: 49:87
        StorageLive(_1624);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1625 = CheckedAdd(const 20usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1625.1: bool), "attempt to add with overflow") -> bb530; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb530: {                            
        _1624 = (_1625.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1621 = const std::ops::Index::index(_1622, _1624) -> bb531; // scope 13 at src\keccak.rs:49:60: 49:91
    }

    bb531: {                            
        _1620 = (*_1621);                // scope 13 at src\keccak.rs:49:60: 49:91
        StorageDead(_1624);              // scope 13 at src\keccak.rs:49:91: 49:91
        StorageDead(_1622);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1626 = CheckedSub(const 64i32, _1620); // scope 13 at src\keccak.rs:27:50: 49:91
        assert(!(_1626.1: bool), "attempt to subtract with overflow") -> bb532; // scope 13 at src\keccak.rs:27:50: 49:91
    }

    bb532: {                            
        _1619 = (_1626.0: i32);          // scope 13 at src\keccak.rs:27:50: 49:91
        StorageDead(_1620);              // scope 13 at src\keccak.rs:49:91: 49:91
        _1627 = CheckedShr(_1618, _1619); // scope 13 at src\keccak.rs:27:42: 27:59
        assert(!(_1627.1: bool), "attempt to shift right with overflow") -> bb533; // scope 13 at src\keccak.rs:27:42: 27:59
    }

    bb533: {                            
        _1617 = (_1627.0: u64);          // scope 13 at src\keccak.rs:27:42: 27:59
        StorageDead(_1619);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageDead(_1618);              // scope 13 at src\keccak.rs:27:59: 27:59
        StorageLive(_1628);              // scope 13 at src\keccak.rs:49:9: 49:45
        StorageLive(_1629);              // scope 13 at src\keccak.rs:100:36: 100:38
        StorageLive(_1630);              // scope 13 at src\keccak.rs:100:36: 100:38
        _1630 = _1;                      // scope 13 at src\keccak.rs:100:36: 100:38
        _1629 = _1630 as &mut [u64] (Unsize); // scope 13 at src\keccak.rs:100:36: 100:38
        StorageDead(_1630);              // scope 13 at src\keccak.rs:100:38: 100:38
        StorageLive(_1631);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1632);              // scope 13 at src\keccak.rs:49:13: 49:44
        StorageLive(_1633);              // scope 13 at src\keccak.rs:49:13: 49:40
        StorageLive(_1634);              // scope 13 at src\keccak.rs:49:13: 49:40
        _1634 = &(keccak::KECCAK_PILN: [usize; 24]); // scope 13 at src\keccak.rs:49:13: 49:40
        _1633 = _1634 as &[usize] (Unsize); // scope 13 at src\keccak.rs:49:13: 49:40
        StorageDead(_1634);              // scope 13 at src\keccak.rs:49:40: 49:40
        StorageLive(_1635);              // scope 13 at src\keccak.rs:55:46: 55:52
        _1636 = CheckedAdd(const 20usize, const 4usize); // scope 13 at src\keccak.rs:55:46: 55:52
        assert(!(_1636.1: bool), "attempt to add with overflow") -> bb534; // scope 13 at src\keccak.rs:55:46: 55:52
    }

    bb534: {                            
        _1635 = (_1636.0: usize);        // scope 13 at src\keccak.rs:55:46: 55:52
        _1632 = const std::ops::Index::index(_1633, _1635) -> bb535; // scope 13 at src\keccak.rs:49:13: 49:44
    }

    bb535: {                            
        _1631 = (*_1632);                // scope 13 at src\keccak.rs:49:13: 49:44
        StorageDead(_1635);              // scope 13 at src\keccak.rs:49:44: 49:44
        StorageDead(_1633);              // scope 13 at src\keccak.rs:49:44: 49:44
        _1628 = const std::ops::IndexMut::index_mut(_1629, _1631) -> bb536; // scope 13 at src\keccak.rs:49:9: 49:45
    }

    bb536: {                            
        StorageDead(_1631);              // scope 13 at src\keccak.rs:49:45: 49:45
        StorageDead(_1629);              // scope 13 at src\keccak.rs:49:45: 49:45
        (*_1628) = BitOr(_1608, _1617);  // scope 13 at src\keccak.rs:49:9: 49:92
        StorageDead(_1617);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1608);              // scope 13 at src\keccak.rs:49:92: 49:92
        StorageDead(_1628);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1632);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1621);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageDead(_1611);              // scope 13 at src\keccak.rs:49:93: 49:93
        StorageLive(_1637);              // scope 13 at src\keccak.rs:50:14: 50:20
        StorageLive(_1638);              // scope 13 at src\keccak.rs:50:18: 50:19
        _1638 = const 0usize;            // scope 13 at src\keccak.rs:50:18: 50:19
        _1639 = Len(_4);                 // scope 13 at src\keccak.rs:50:14: 50:20
        _1640 = Lt(_1638, _1639);        // scope 13 at src\keccak.rs:50:14: 50:20
        assert(_1640, "index out of bounds: the len is {} but the index is {}", _1639, _1638) -> bb537; // scope 13 at src\keccak.rs:50:14: 50:20
    }

    bb537: {                            
        _1637 = _4[_1638];               // scope 13 at src\keccak.rs:50:14: 50:20
        _3 = _1637;                      // scope 13 at src\keccak.rs:50:9: 50:20
        StorageDead(_1637);              // scope 13 at src\keccak.rs:50:20: 50:20
        _490 = ();                       // scope 13 at src\keccak.rs:99:38: 101:10
        StorageLive(_1641);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1642);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1643);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1644);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1644 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1643 = _1644 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1644);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1645);              // scope 11 at src\keccak.rs:63:23: 69:34
        _1646 = CheckedAdd(const 0usize, const 0usize); // scope 11 at src\keccak.rs:63:23: 69:34
        assert(!(_1646.1: bool), "attempt to add with overflow") -> bb538; // scope 11 at src\keccak.rs:63:23: 69:34
    }

    bb538: {                            
        _1645 = (_1646.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:34
        _1642 = const std::ops::Index::index(_1643, _1645) -> bb539; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb539: {                            
        _1641 = (*_1642);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1645);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1643);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1647);              // scope 11 at src\keccak.rs:69:33: 69:34
        _1647 = const 0usize;            // scope 11 at src\keccak.rs:69:33: 69:34
        _1648 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1649 = Lt(_1647, _1648);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1649, "index out of bounds: the len is {} but the index is {}", _1648, _1647) -> bb540; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb540: {                            
        _4[_1647] = _1641;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1641);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1642);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1650);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1651);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1652);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1653);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1653 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1652 = _1653 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1653);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1654);              // scope 11 at src\keccak.rs:63:23: 69:79
        _1655 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:63:23: 69:79
        assert(!(_1655.1: bool), "attempt to add with overflow") -> bb541; // scope 11 at src\keccak.rs:63:23: 69:79
    }

    bb541: {                            
        _1654 = (_1655.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:79
        _1651 = const std::ops::Index::index(_1652, _1654) -> bb542; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb542: {                            
        _1650 = (*_1651);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1654);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1652);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1656);              // scope 11 at src\keccak.rs:69:78: 69:79
        _1656 = const 1usize;            // scope 11 at src\keccak.rs:69:78: 69:79
        _1657 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1658 = Lt(_1656, _1657);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1658, "index out of bounds: the len is {} but the index is {}", _1657, _1656) -> bb543; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb543: {                            
        _4[_1656] = _1650;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1650);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1651);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1659);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1660);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1661);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1662);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1662 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1661 = _1662 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1662);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1663);              // scope 11 at src\keccak.rs:63:23: 70:34
        _1664 = CheckedAdd(const 0usize, const 2usize); // scope 11 at src\keccak.rs:63:23: 70:34
        assert(!(_1664.1: bool), "attempt to add with overflow") -> bb544; // scope 11 at src\keccak.rs:63:23: 70:34
    }

    bb544: {                            
        _1663 = (_1664.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:34
        _1660 = const std::ops::Index::index(_1661, _1663) -> bb545; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb545: {                            
        _1659 = (*_1660);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1663);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1661);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1665);              // scope 11 at src\keccak.rs:70:33: 70:34
        _1665 = const 2usize;            // scope 11 at src\keccak.rs:70:33: 70:34
        _1666 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1667 = Lt(_1665, _1666);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1667, "index out of bounds: the len is {} but the index is {}", _1666, _1665) -> bb546; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb546: {                            
        _4[_1665] = _1659;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1659);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1660);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1668);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1669);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1670);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1671);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1671 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1670 = _1671 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1671);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1672);              // scope 11 at src\keccak.rs:63:23: 70:79
        _1673 = CheckedAdd(const 0usize, const 3usize); // scope 11 at src\keccak.rs:63:23: 70:79
        assert(!(_1673.1: bool), "attempt to add with overflow") -> bb547; // scope 11 at src\keccak.rs:63:23: 70:79
    }

    bb547: {                            
        _1672 = (_1673.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:79
        _1669 = const std::ops::Index::index(_1670, _1672) -> bb548; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb548: {                            
        _1668 = (*_1669);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1672);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1670);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1674);              // scope 11 at src\keccak.rs:70:78: 70:79
        _1674 = const 3usize;            // scope 11 at src\keccak.rs:70:78: 70:79
        _1675 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1676 = Lt(_1674, _1675);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1676, "index out of bounds: the len is {} but the index is {}", _1675, _1674) -> bb549; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb549: {                            
        _4[_1674] = _1668;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1668);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1669);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1677);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1678);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1679);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1680);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1680 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1679 = _1680 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1680);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1681);              // scope 11 at src\keccak.rs:63:23: 71:34
        _1682 = CheckedAdd(const 0usize, const 4usize); // scope 11 at src\keccak.rs:63:23: 71:34
        assert(!(_1682.1: bool), "attempt to add with overflow") -> bb550; // scope 11 at src\keccak.rs:63:23: 71:34
    }

    bb550: {                            
        _1681 = (_1682.0: usize);        // scope 11 at src\keccak.rs:63:23: 71:34
        _1678 = const std::ops::Index::index(_1679, _1681) -> bb551; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb551: {                            
        _1677 = (*_1678);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1681);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1679);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1683);              // scope 11 at src\keccak.rs:71:33: 71:34
        _1683 = const 4usize;            // scope 11 at src\keccak.rs:71:33: 71:34
        _1684 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1685 = Lt(_1683, _1684);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1685, "index out of bounds: the len is {} but the index is {}", _1684, _1683) -> bb552; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb552: {                            
        _4[_1683] = _1677;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1677);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1678);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1686);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1687);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1688);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1689);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1690);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1691);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1691 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1690 = _1691 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1691);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1692);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1693);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1694 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1694.1: bool), "attempt to add with overflow") -> bb553; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb553: {                            
        _1693 = (_1694.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1695 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1695, "attempt to calculate the remainder with a divisor of zero") -> bb554; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb554: {                            
        _1692 = Rem(_1693, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1693);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1689 = const std::ops::Index::index(_1690, _1692) -> bb555; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb555: {                            
        _1688 = (*_1689);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1692);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1690);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1687 = Not(_1688);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1688);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1696);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1697);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1698);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1699);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1699 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1698 = _1699 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1699);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1700);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1701);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1702 = CheckedAdd(const 0usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1702.1: bool), "attempt to add with overflow") -> bb556; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb556: {                            
        _1701 = (_1702.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1703 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1703, "attempt to calculate the remainder with a divisor of zero") -> bb557; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb557: {                            
        _1700 = Rem(_1701, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1701);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1697 = const std::ops::Index::index(_1698, _1700) -> bb558; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb558: {                            
        _1696 = (*_1697);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1700);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1698);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1686 = BitAnd(_1687, _1696);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1696);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1687);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1704);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1705);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1706);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1706 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1705 = _1706 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1706);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1707);              // scope 11 at src\keccak.rs:66:13: 71:79
        _1708 = CheckedAdd(const 0usize, const 0usize); // scope 11 at src\keccak.rs:66:13: 71:79
        assert(!(_1708.1: bool), "attempt to add with overflow") -> bb559; // scope 11 at src\keccak.rs:66:13: 71:79
    }

    bb559: {                            
        _1707 = (_1708.0: usize);        // scope 11 at src\keccak.rs:66:13: 71:79
        _1704 = const std::ops::IndexMut::index_mut(_1705, _1707) -> bb560; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb560: {                            
        StorageDead(_1707);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1705);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1704) = BitXor((*_1704), _1686); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1686);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1704);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1697);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1689);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1709);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1710);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1711);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1712);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1713);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1714);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1714 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1713 = _1714 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1714);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1715);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1716);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1717 = CheckedAdd(const 1usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1717.1: bool), "attempt to add with overflow") -> bb561; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb561: {                            
        _1716 = (_1717.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1718 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1718, "attempt to calculate the remainder with a divisor of zero") -> bb562; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb562: {                            
        _1715 = Rem(_1716, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1716);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1712 = const std::ops::Index::index(_1713, _1715) -> bb563; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb563: {                            
        _1711 = (*_1712);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1715);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1713);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1710 = Not(_1711);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1711);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1719);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1720);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1721);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1722);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1722 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1721 = _1722 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1722);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1723);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1724);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1725 = CheckedAdd(const 1usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1725.1: bool), "attempt to add with overflow") -> bb564; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb564: {                            
        _1724 = (_1725.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1726 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1726, "attempt to calculate the remainder with a divisor of zero") -> bb565; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb565: {                            
        _1723 = Rem(_1724, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1724);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1720 = const std::ops::Index::index(_1721, _1723) -> bb566; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb566: {                            
        _1719 = (*_1720);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1723);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1721);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1709 = BitAnd(_1710, _1719);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1719);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1710);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1727);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1728);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1729);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1729 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1728 = _1729 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1729);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1730);              // scope 11 at src\keccak.rs:66:13: 72:34
        _1731 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:66:13: 72:34
        assert(!(_1731.1: bool), "attempt to add with overflow") -> bb567; // scope 11 at src\keccak.rs:66:13: 72:34
    }

    bb567: {                            
        _1730 = (_1731.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:34
        _1727 = const std::ops::IndexMut::index_mut(_1728, _1730) -> bb568; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb568: {                            
        StorageDead(_1730);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1728);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1727) = BitXor((*_1727), _1709); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1709);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1727);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1720);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1712);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1732);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1733);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1734);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1735);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1736);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1737);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1737 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1736 = _1737 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1737);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1738);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1739);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1740 = CheckedAdd(const 2usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1740.1: bool), "attempt to add with overflow") -> bb569; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb569: {                            
        _1739 = (_1740.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1741 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1741, "attempt to calculate the remainder with a divisor of zero") -> bb570; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb570: {                            
        _1738 = Rem(_1739, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1739);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1735 = const std::ops::Index::index(_1736, _1738) -> bb571; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb571: {                            
        _1734 = (*_1735);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1738);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1736);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1733 = Not(_1734);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1734);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1742);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1743);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1744);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1745);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1745 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1744 = _1745 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1745);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1746);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1747);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1748 = CheckedAdd(const 2usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1748.1: bool), "attempt to add with overflow") -> bb572; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb572: {                            
        _1747 = (_1748.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1749 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1749, "attempt to calculate the remainder with a divisor of zero") -> bb573; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb573: {                            
        _1746 = Rem(_1747, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1747);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1743 = const std::ops::Index::index(_1744, _1746) -> bb574; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb574: {                            
        _1742 = (*_1743);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1746);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1744);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1732 = BitAnd(_1733, _1742);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1742);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1733);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1750);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1751);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1752);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1752 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1751 = _1752 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1752);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1753);              // scope 11 at src\keccak.rs:66:13: 72:79
        _1754 = CheckedAdd(const 0usize, const 2usize); // scope 11 at src\keccak.rs:66:13: 72:79
        assert(!(_1754.1: bool), "attempt to add with overflow") -> bb575; // scope 11 at src\keccak.rs:66:13: 72:79
    }

    bb575: {                            
        _1753 = (_1754.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:79
        _1750 = const std::ops::IndexMut::index_mut(_1751, _1753) -> bb576; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb576: {                            
        StorageDead(_1753);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1751);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1750) = BitXor((*_1750), _1732); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1732);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1750);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1743);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1735);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1755);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1756);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1757);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1758);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1759);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1760);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1760 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1759 = _1760 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1760);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1761);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1762);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1763 = CheckedAdd(const 3usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1763.1: bool), "attempt to add with overflow") -> bb577; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb577: {                            
        _1762 = (_1763.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1764 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1764, "attempt to calculate the remainder with a divisor of zero") -> bb578; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb578: {                            
        _1761 = Rem(_1762, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1762);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1758 = const std::ops::Index::index(_1759, _1761) -> bb579; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb579: {                            
        _1757 = (*_1758);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1761);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1759);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1756 = Not(_1757);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1757);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1765);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1766);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1767);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1768);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1768 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1767 = _1768 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1768);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1769);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1770);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1771 = CheckedAdd(const 3usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1771.1: bool), "attempt to add with overflow") -> bb580; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb580: {                            
        _1770 = (_1771.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1772 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1772, "attempt to calculate the remainder with a divisor of zero") -> bb581; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb581: {                            
        _1769 = Rem(_1770, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1770);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1766 = const std::ops::Index::index(_1767, _1769) -> bb582; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb582: {                            
        _1765 = (*_1766);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1769);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1767);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1755 = BitAnd(_1756, _1765);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1765);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1756);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1773);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1774);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1775);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1775 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1774 = _1775 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1775);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1776);              // scope 11 at src\keccak.rs:66:13: 73:34
        _1777 = CheckedAdd(const 0usize, const 3usize); // scope 11 at src\keccak.rs:66:13: 73:34
        assert(!(_1777.1: bool), "attempt to add with overflow") -> bb583; // scope 11 at src\keccak.rs:66:13: 73:34
    }

    bb583: {                            
        _1776 = (_1777.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:34
        _1773 = const std::ops::IndexMut::index_mut(_1774, _1776) -> bb584; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb584: {                            
        StorageDead(_1776);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1774);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1773) = BitXor((*_1773), _1755); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1755);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1773);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1766);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1758);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1778);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1779);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1780);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1781);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1782);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1783);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1783 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1782 = _1783 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1783);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1784);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1785);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1786 = CheckedAdd(const 4usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1786.1: bool), "attempt to add with overflow") -> bb585; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb585: {                            
        _1785 = (_1786.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1787 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1787, "attempt to calculate the remainder with a divisor of zero") -> bb586; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb586: {                            
        _1784 = Rem(_1785, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1785);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1781 = const std::ops::Index::index(_1782, _1784) -> bb587; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb587: {                            
        _1780 = (*_1781);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1784);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1782);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1779 = Not(_1780);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1780);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1788);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1789);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1790);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1791);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1791 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1790 = _1791 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1791);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1792);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1793);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1794 = CheckedAdd(const 4usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1794.1: bool), "attempt to add with overflow") -> bb588; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb588: {                            
        _1793 = (_1794.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1795 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1795, "attempt to calculate the remainder with a divisor of zero") -> bb589; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb589: {                            
        _1792 = Rem(_1793, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1793);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1789 = const std::ops::Index::index(_1790, _1792) -> bb590; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb590: {                            
        _1788 = (*_1789);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1792);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1790);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1778 = BitAnd(_1779, _1788);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1788);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1779);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1796);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1797);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1798);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1798 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1797 = _1798 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1798);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1799);              // scope 11 at src\keccak.rs:66:13: 73:79
        _1800 = CheckedAdd(const 0usize, const 4usize); // scope 11 at src\keccak.rs:66:13: 73:79
        assert(!(_1800.1: bool), "attempt to add with overflow") -> bb591; // scope 11 at src\keccak.rs:66:13: 73:79
    }

    bb591: {                            
        _1799 = (_1800.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:79
        _1796 = const std::ops::IndexMut::index_mut(_1797, _1799) -> bb592; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb592: {                            
        StorageDead(_1799);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1797);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1796) = BitXor((*_1796), _1778); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1778);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1796);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1789);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1781);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1801);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1802);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1803);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1804);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1804 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1803 = _1804 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1804);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1805);              // scope 11 at src\keccak.rs:63:23: 69:34
        _1806 = CheckedAdd(const 5usize, const 0usize); // scope 11 at src\keccak.rs:63:23: 69:34
        assert(!(_1806.1: bool), "attempt to add with overflow") -> bb593; // scope 11 at src\keccak.rs:63:23: 69:34
    }

    bb593: {                            
        _1805 = (_1806.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:34
        _1802 = const std::ops::Index::index(_1803, _1805) -> bb594; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb594: {                            
        _1801 = (*_1802);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1805);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1803);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1807);              // scope 11 at src\keccak.rs:69:33: 69:34
        _1807 = const 0usize;            // scope 11 at src\keccak.rs:69:33: 69:34
        _1808 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1809 = Lt(_1807, _1808);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1809, "index out of bounds: the len is {} but the index is {}", _1808, _1807) -> bb595; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb595: {                            
        _4[_1807] = _1801;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1801);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1802);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1810);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1811);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1812);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1813);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1813 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1812 = _1813 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1813);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1814);              // scope 11 at src\keccak.rs:63:23: 69:79
        _1815 = CheckedAdd(const 5usize, const 1usize); // scope 11 at src\keccak.rs:63:23: 69:79
        assert(!(_1815.1: bool), "attempt to add with overflow") -> bb596; // scope 11 at src\keccak.rs:63:23: 69:79
    }

    bb596: {                            
        _1814 = (_1815.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:79
        _1811 = const std::ops::Index::index(_1812, _1814) -> bb597; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb597: {                            
        _1810 = (*_1811);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1814);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1812);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1816);              // scope 11 at src\keccak.rs:69:78: 69:79
        _1816 = const 1usize;            // scope 11 at src\keccak.rs:69:78: 69:79
        _1817 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1818 = Lt(_1816, _1817);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1818, "index out of bounds: the len is {} but the index is {}", _1817, _1816) -> bb598; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb598: {                            
        _4[_1816] = _1810;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1810);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1811);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1819);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1820);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1821);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1822);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1822 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1821 = _1822 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1822);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1823);              // scope 11 at src\keccak.rs:63:23: 70:34
        _1824 = CheckedAdd(const 5usize, const 2usize); // scope 11 at src\keccak.rs:63:23: 70:34
        assert(!(_1824.1: bool), "attempt to add with overflow") -> bb599; // scope 11 at src\keccak.rs:63:23: 70:34
    }

    bb599: {                            
        _1823 = (_1824.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:34
        _1820 = const std::ops::Index::index(_1821, _1823) -> bb600; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb600: {                            
        _1819 = (*_1820);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1823);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1821);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1825);              // scope 11 at src\keccak.rs:70:33: 70:34
        _1825 = const 2usize;            // scope 11 at src\keccak.rs:70:33: 70:34
        _1826 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1827 = Lt(_1825, _1826);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1827, "index out of bounds: the len is {} but the index is {}", _1826, _1825) -> bb601; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb601: {                            
        _4[_1825] = _1819;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1819);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1820);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1828);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1829);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1830);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1831);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1831 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1830 = _1831 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1831);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1832);              // scope 11 at src\keccak.rs:63:23: 70:79
        _1833 = CheckedAdd(const 5usize, const 3usize); // scope 11 at src\keccak.rs:63:23: 70:79
        assert(!(_1833.1: bool), "attempt to add with overflow") -> bb602; // scope 11 at src\keccak.rs:63:23: 70:79
    }

    bb602: {                            
        _1832 = (_1833.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:79
        _1829 = const std::ops::Index::index(_1830, _1832) -> bb603; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb603: {                            
        _1828 = (*_1829);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1832);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1830);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1834);              // scope 11 at src\keccak.rs:70:78: 70:79
        _1834 = const 3usize;            // scope 11 at src\keccak.rs:70:78: 70:79
        _1835 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1836 = Lt(_1834, _1835);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1836, "index out of bounds: the len is {} but the index is {}", _1835, _1834) -> bb604; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb604: {                            
        _4[_1834] = _1828;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1828);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1829);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1837);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1838);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1839);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1840);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1840 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1839 = _1840 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1840);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1841);              // scope 11 at src\keccak.rs:63:23: 71:34
        _1842 = CheckedAdd(const 5usize, const 4usize); // scope 11 at src\keccak.rs:63:23: 71:34
        assert(!(_1842.1: bool), "attempt to add with overflow") -> bb605; // scope 11 at src\keccak.rs:63:23: 71:34
    }

    bb605: {                            
        _1841 = (_1842.0: usize);        // scope 11 at src\keccak.rs:63:23: 71:34
        _1838 = const std::ops::Index::index(_1839, _1841) -> bb606; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb606: {                            
        _1837 = (*_1838);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1841);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1839);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1843);              // scope 11 at src\keccak.rs:71:33: 71:34
        _1843 = const 4usize;            // scope 11 at src\keccak.rs:71:33: 71:34
        _1844 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1845 = Lt(_1843, _1844);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1845, "index out of bounds: the len is {} but the index is {}", _1844, _1843) -> bb607; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb607: {                            
        _4[_1843] = _1837;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1837);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1838);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1846);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1847);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1848);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1849);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1850);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1851);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1851 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1850 = _1851 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1851);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1852);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1853);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1854 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1854.1: bool), "attempt to add with overflow") -> bb608; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb608: {                            
        _1853 = (_1854.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1855 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1855, "attempt to calculate the remainder with a divisor of zero") -> bb609; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb609: {                            
        _1852 = Rem(_1853, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1853);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1849 = const std::ops::Index::index(_1850, _1852) -> bb610; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb610: {                            
        _1848 = (*_1849);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1852);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1850);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1847 = Not(_1848);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1848);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1856);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1857);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1858);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1859);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1859 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1858 = _1859 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1859);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1860);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1861);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1862 = CheckedAdd(const 0usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1862.1: bool), "attempt to add with overflow") -> bb611; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb611: {                            
        _1861 = (_1862.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1863 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1863, "attempt to calculate the remainder with a divisor of zero") -> bb612; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb612: {                            
        _1860 = Rem(_1861, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1861);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1857 = const std::ops::Index::index(_1858, _1860) -> bb613; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb613: {                            
        _1856 = (*_1857);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1860);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1858);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1846 = BitAnd(_1847, _1856);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1856);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1847);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1864);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1865);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1866);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1866 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1865 = _1866 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1866);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1867);              // scope 11 at src\keccak.rs:66:13: 71:79
        _1868 = CheckedAdd(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:13: 71:79
        assert(!(_1868.1: bool), "attempt to add with overflow") -> bb614; // scope 11 at src\keccak.rs:66:13: 71:79
    }

    bb614: {                            
        _1867 = (_1868.0: usize);        // scope 11 at src\keccak.rs:66:13: 71:79
        _1864 = const std::ops::IndexMut::index_mut(_1865, _1867) -> bb615; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb615: {                            
        StorageDead(_1867);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1865);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1864) = BitXor((*_1864), _1846); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1846);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1864);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1857);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1849);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1869);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1870);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1871);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1872);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1873);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1874);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1874 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1873 = _1874 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1874);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1875);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1876);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1877 = CheckedAdd(const 1usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1877.1: bool), "attempt to add with overflow") -> bb616; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb616: {                            
        _1876 = (_1877.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1878 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1878, "attempt to calculate the remainder with a divisor of zero") -> bb617; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb617: {                            
        _1875 = Rem(_1876, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1876);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1872 = const std::ops::Index::index(_1873, _1875) -> bb618; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb618: {                            
        _1871 = (*_1872);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1875);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1873);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1870 = Not(_1871);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1871);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1879);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1880);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1881);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1882);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1882 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1881 = _1882 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1882);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1883);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1884);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1885 = CheckedAdd(const 1usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1885.1: bool), "attempt to add with overflow") -> bb619; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb619: {                            
        _1884 = (_1885.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1886 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1886, "attempt to calculate the remainder with a divisor of zero") -> bb620; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb620: {                            
        _1883 = Rem(_1884, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1884);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1880 = const std::ops::Index::index(_1881, _1883) -> bb621; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb621: {                            
        _1879 = (*_1880);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1883);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1881);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1869 = BitAnd(_1870, _1879);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1879);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1870);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1887);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1888);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1889);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1889 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1888 = _1889 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1889);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1890);              // scope 11 at src\keccak.rs:66:13: 72:34
        _1891 = CheckedAdd(const 5usize, const 1usize); // scope 11 at src\keccak.rs:66:13: 72:34
        assert(!(_1891.1: bool), "attempt to add with overflow") -> bb622; // scope 11 at src\keccak.rs:66:13: 72:34
    }

    bb622: {                            
        _1890 = (_1891.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:34
        _1887 = const std::ops::IndexMut::index_mut(_1888, _1890) -> bb623; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb623: {                            
        StorageDead(_1890);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1888);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1887) = BitXor((*_1887), _1869); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1869);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1887);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1880);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1872);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1892);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1893);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1894);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1895);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1896);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1897);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1897 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1896 = _1897 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1897);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1898);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1899);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1900 = CheckedAdd(const 2usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1900.1: bool), "attempt to add with overflow") -> bb624; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb624: {                            
        _1899 = (_1900.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1901 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1901, "attempt to calculate the remainder with a divisor of zero") -> bb625; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb625: {                            
        _1898 = Rem(_1899, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1899);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1895 = const std::ops::Index::index(_1896, _1898) -> bb626; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb626: {                            
        _1894 = (*_1895);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1898);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1896);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1893 = Not(_1894);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1894);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1902);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1903);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1904);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1905);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1905 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1904 = _1905 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1905);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1906);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1907);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1908 = CheckedAdd(const 2usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1908.1: bool), "attempt to add with overflow") -> bb627; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb627: {                            
        _1907 = (_1908.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1909 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1909, "attempt to calculate the remainder with a divisor of zero") -> bb628; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb628: {                            
        _1906 = Rem(_1907, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1907);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1903 = const std::ops::Index::index(_1904, _1906) -> bb629; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb629: {                            
        _1902 = (*_1903);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1906);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1904);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1892 = BitAnd(_1893, _1902);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1902);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1893);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1910);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1911);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1912);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1912 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1911 = _1912 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1912);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1913);              // scope 11 at src\keccak.rs:66:13: 72:79
        _1914 = CheckedAdd(const 5usize, const 2usize); // scope 11 at src\keccak.rs:66:13: 72:79
        assert(!(_1914.1: bool), "attempt to add with overflow") -> bb630; // scope 11 at src\keccak.rs:66:13: 72:79
    }

    bb630: {                            
        _1913 = (_1914.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:79
        _1910 = const std::ops::IndexMut::index_mut(_1911, _1913) -> bb631; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb631: {                            
        StorageDead(_1913);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1911);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1910) = BitXor((*_1910), _1892); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1892);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1910);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1903);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1895);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1915);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1916);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1917);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1918);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1919);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1920);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1920 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1919 = _1920 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1920);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1921);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1922);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1923 = CheckedAdd(const 3usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1923.1: bool), "attempt to add with overflow") -> bb632; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb632: {                            
        _1922 = (_1923.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1924 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1924, "attempt to calculate the remainder with a divisor of zero") -> bb633; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb633: {                            
        _1921 = Rem(_1922, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1922);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1918 = const std::ops::Index::index(_1919, _1921) -> bb634; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb634: {                            
        _1917 = (*_1918);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1921);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1919);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1916 = Not(_1917);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1917);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1925);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1926);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1927);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1928);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1928 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1927 = _1928 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1928);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1929);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1930);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1931 = CheckedAdd(const 3usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1931.1: bool), "attempt to add with overflow") -> bb635; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb635: {                            
        _1930 = (_1931.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1932 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1932, "attempt to calculate the remainder with a divisor of zero") -> bb636; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb636: {                            
        _1929 = Rem(_1930, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1930);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1926 = const std::ops::Index::index(_1927, _1929) -> bb637; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb637: {                            
        _1925 = (*_1926);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1929);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1927);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1915 = BitAnd(_1916, _1925);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1925);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1916);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1933);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1934);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1935);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1935 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1934 = _1935 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1935);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1936);              // scope 11 at src\keccak.rs:66:13: 73:34
        _1937 = CheckedAdd(const 5usize, const 3usize); // scope 11 at src\keccak.rs:66:13: 73:34
        assert(!(_1937.1: bool), "attempt to add with overflow") -> bb638; // scope 11 at src\keccak.rs:66:13: 73:34
    }

    bb638: {                            
        _1936 = (_1937.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:34
        _1933 = const std::ops::IndexMut::index_mut(_1934, _1936) -> bb639; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb639: {                            
        StorageDead(_1936);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1934);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1933) = BitXor((*_1933), _1915); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1915);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1933);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1926);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1918);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1938);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_1939);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_1940);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1941);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_1942);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1943);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1943 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1942 = _1943 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1943);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1944);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_1945);              // scope 11 at src\keccak.rs:66:31: 66:39
        _1946 = CheckedAdd(const 4usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_1946.1: bool), "attempt to add with overflow") -> bb640; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb640: {                            
        _1945 = (_1946.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _1947 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_1947, "attempt to calculate the remainder with a divisor of zero") -> bb641; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb641: {                            
        _1944 = Rem(_1945, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_1945);              // scope 11 at src\keccak.rs:66:43: 66:43
        _1941 = const std::ops::Index::index(_1942, _1944) -> bb642; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb642: {                            
        _1940 = (*_1941);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_1944);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_1942);              // scope 11 at src\keccak.rs:66:44: 66:44
        _1939 = Not(_1940);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_1940);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_1948);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1949);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_1950);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_1951);              // scope 11 at src\keccak.rs:103:29: 103:31
        _1951 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _1950 = _1951 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_1951);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_1952);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_1953);              // scope 11 at src\keccak.rs:66:52: 66:60
        _1954 = CheckedAdd(const 4usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_1954.1: bool), "attempt to add with overflow") -> bb643; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb643: {                            
        _1953 = (_1954.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _1955 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_1955, "attempt to calculate the remainder with a divisor of zero") -> bb644; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb644: {                            
        _1952 = Rem(_1953, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_1953);              // scope 11 at src\keccak.rs:66:64: 66:64
        _1949 = const std::ops::Index::index(_1950, _1952) -> bb645; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb645: {                            
        _1948 = (*_1949);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_1952);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1950);              // scope 11 at src\keccak.rs:66:65: 66:65
        _1938 = BitAnd(_1939, _1948);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_1948);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1939);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_1956);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_1957);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1958);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1958 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1957 = _1958 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1958);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1959);              // scope 11 at src\keccak.rs:66:13: 73:79
        _1960 = CheckedAdd(const 5usize, const 4usize); // scope 11 at src\keccak.rs:66:13: 73:79
        assert(!(_1960.1: bool), "attempt to add with overflow") -> bb646; // scope 11 at src\keccak.rs:66:13: 73:79
    }

    bb646: {                            
        _1959 = (_1960.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:79
        _1956 = const std::ops::IndexMut::index_mut(_1957, _1959) -> bb647; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb647: {                            
        StorageDead(_1959);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_1957);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_1956) = BitXor((*_1956), _1938); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_1938);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_1956);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1949);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_1941);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_1961);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1962);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1963);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1964);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1964 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1963 = _1964 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1964);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1965);              // scope 11 at src\keccak.rs:63:23: 69:34
        _1966 = CheckedAdd(const 10usize, const 0usize); // scope 11 at src\keccak.rs:63:23: 69:34
        assert(!(_1966.1: bool), "attempt to add with overflow") -> bb648; // scope 11 at src\keccak.rs:63:23: 69:34
    }

    bb648: {                            
        _1965 = (_1966.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:34
        _1962 = const std::ops::Index::index(_1963, _1965) -> bb649; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb649: {                            
        _1961 = (*_1962);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1965);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1963);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1967);              // scope 11 at src\keccak.rs:69:33: 69:34
        _1967 = const 0usize;            // scope 11 at src\keccak.rs:69:33: 69:34
        _1968 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1969 = Lt(_1967, _1968);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1969, "index out of bounds: the len is {} but the index is {}", _1968, _1967) -> bb650; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb650: {                            
        _4[_1967] = _1961;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1961);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1962);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1970);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1971);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1972);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1973);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1973 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1972 = _1973 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1973);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1974);              // scope 11 at src\keccak.rs:63:23: 69:79
        _1975 = CheckedAdd(const 10usize, const 1usize); // scope 11 at src\keccak.rs:63:23: 69:79
        assert(!(_1975.1: bool), "attempt to add with overflow") -> bb651; // scope 11 at src\keccak.rs:63:23: 69:79
    }

    bb651: {                            
        _1974 = (_1975.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:79
        _1971 = const std::ops::Index::index(_1972, _1974) -> bb652; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb652: {                            
        _1970 = (*_1971);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1974);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1972);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1976);              // scope 11 at src\keccak.rs:69:78: 69:79
        _1976 = const 1usize;            // scope 11 at src\keccak.rs:69:78: 69:79
        _1977 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1978 = Lt(_1976, _1977);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1978, "index out of bounds: the len is {} but the index is {}", _1977, _1976) -> bb653; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb653: {                            
        _4[_1976] = _1970;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1970);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1971);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1979);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1980);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1981);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1982);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1982 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1981 = _1982 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1982);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1983);              // scope 11 at src\keccak.rs:63:23: 70:34
        _1984 = CheckedAdd(const 10usize, const 2usize); // scope 11 at src\keccak.rs:63:23: 70:34
        assert(!(_1984.1: bool), "attempt to add with overflow") -> bb654; // scope 11 at src\keccak.rs:63:23: 70:34
    }

    bb654: {                            
        _1983 = (_1984.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:34
        _1980 = const std::ops::Index::index(_1981, _1983) -> bb655; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb655: {                            
        _1979 = (*_1980);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1983);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1981);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1985);              // scope 11 at src\keccak.rs:70:33: 70:34
        _1985 = const 2usize;            // scope 11 at src\keccak.rs:70:33: 70:34
        _1986 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1987 = Lt(_1985, _1986);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1987, "index out of bounds: the len is {} but the index is {}", _1986, _1985) -> bb656; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb656: {                            
        _4[_1985] = _1979;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1979);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1980);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1988);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1989);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1990);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_1991);              // scope 11 at src\keccak.rs:103:38: 103:40
        _1991 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1990 = _1991 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_1991);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_1992);              // scope 11 at src\keccak.rs:63:23: 70:79
        _1993 = CheckedAdd(const 10usize, const 3usize); // scope 11 at src\keccak.rs:63:23: 70:79
        assert(!(_1993.1: bool), "attempt to add with overflow") -> bb657; // scope 11 at src\keccak.rs:63:23: 70:79
    }

    bb657: {                            
        _1992 = (_1993.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:79
        _1989 = const std::ops::Index::index(_1990, _1992) -> bb658; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb658: {                            
        _1988 = (*_1989);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_1992);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1990);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_1994);              // scope 11 at src\keccak.rs:70:78: 70:79
        _1994 = const 3usize;            // scope 11 at src\keccak.rs:70:78: 70:79
        _1995 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _1996 = Lt(_1994, _1995);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_1996, "index out of bounds: the len is {} but the index is {}", _1995, _1994) -> bb659; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb659: {                            
        _4[_1994] = _1988;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1988);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1989);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_1997);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1998);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_1999);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2000);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2000 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _1999 = _2000 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2000);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2001);              // scope 11 at src\keccak.rs:63:23: 71:34
        _2002 = CheckedAdd(const 10usize, const 4usize); // scope 11 at src\keccak.rs:63:23: 71:34
        assert(!(_2002.1: bool), "attempt to add with overflow") -> bb660; // scope 11 at src\keccak.rs:63:23: 71:34
    }

    bb660: {                            
        _2001 = (_2002.0: usize);        // scope 11 at src\keccak.rs:63:23: 71:34
        _1998 = const std::ops::Index::index(_1999, _2001) -> bb661; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb661: {                            
        _1997 = (*_1998);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2001);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1999);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2003);              // scope 11 at src\keccak.rs:71:33: 71:34
        _2003 = const 4usize;            // scope 11 at src\keccak.rs:71:33: 71:34
        _2004 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2005 = Lt(_2003, _2004);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2005, "index out of bounds: the len is {} but the index is {}", _2004, _2003) -> bb662; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb662: {                            
        _4[_2003] = _1997;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_1997);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_1998);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2006);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2007);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2008);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2009);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2010);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2011);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2011 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2010 = _2011 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2011);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2012);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2013);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2014 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2014.1: bool), "attempt to add with overflow") -> bb663; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb663: {                            
        _2013 = (_2014.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2015 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2015, "attempt to calculate the remainder with a divisor of zero") -> bb664; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb664: {                            
        _2012 = Rem(_2013, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2013);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2009 = const std::ops::Index::index(_2010, _2012) -> bb665; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb665: {                            
        _2008 = (*_2009);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2012);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2010);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2007 = Not(_2008);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2008);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2016);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2017);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2018);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2019);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2019 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2018 = _2019 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2019);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2020);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2021);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2022 = CheckedAdd(const 0usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2022.1: bool), "attempt to add with overflow") -> bb666; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb666: {                            
        _2021 = (_2022.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2023 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2023, "attempt to calculate the remainder with a divisor of zero") -> bb667; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb667: {                            
        _2020 = Rem(_2021, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2021);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2017 = const std::ops::Index::index(_2018, _2020) -> bb668; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb668: {                            
        _2016 = (*_2017);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2020);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2018);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2006 = BitAnd(_2007, _2016);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2016);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2007);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2024);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2025);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2026);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2026 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2025 = _2026 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2026);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2027);              // scope 11 at src\keccak.rs:66:13: 71:79
        _2028 = CheckedAdd(const 10usize, const 0usize); // scope 11 at src\keccak.rs:66:13: 71:79
        assert(!(_2028.1: bool), "attempt to add with overflow") -> bb669; // scope 11 at src\keccak.rs:66:13: 71:79
    }

    bb669: {                            
        _2027 = (_2028.0: usize);        // scope 11 at src\keccak.rs:66:13: 71:79
        _2024 = const std::ops::IndexMut::index_mut(_2025, _2027) -> bb670; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb670: {                            
        StorageDead(_2027);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2025);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2024) = BitXor((*_2024), _2006); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2006);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2024);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2017);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2009);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2029);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2030);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2031);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2032);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2033);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2034);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2034 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2033 = _2034 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2034);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2035);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2036);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2037 = CheckedAdd(const 1usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2037.1: bool), "attempt to add with overflow") -> bb671; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb671: {                            
        _2036 = (_2037.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2038 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2038, "attempt to calculate the remainder with a divisor of zero") -> bb672; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb672: {                            
        _2035 = Rem(_2036, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2036);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2032 = const std::ops::Index::index(_2033, _2035) -> bb673; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb673: {                            
        _2031 = (*_2032);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2035);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2033);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2030 = Not(_2031);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2031);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2039);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2040);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2041);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2042);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2042 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2041 = _2042 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2042);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2043);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2044);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2045 = CheckedAdd(const 1usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2045.1: bool), "attempt to add with overflow") -> bb674; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb674: {                            
        _2044 = (_2045.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2046 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2046, "attempt to calculate the remainder with a divisor of zero") -> bb675; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb675: {                            
        _2043 = Rem(_2044, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2044);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2040 = const std::ops::Index::index(_2041, _2043) -> bb676; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb676: {                            
        _2039 = (*_2040);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2043);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2041);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2029 = BitAnd(_2030, _2039);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2039);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2030);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2047);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2048);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2049);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2049 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2048 = _2049 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2049);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2050);              // scope 11 at src\keccak.rs:66:13: 72:34
        _2051 = CheckedAdd(const 10usize, const 1usize); // scope 11 at src\keccak.rs:66:13: 72:34
        assert(!(_2051.1: bool), "attempt to add with overflow") -> bb677; // scope 11 at src\keccak.rs:66:13: 72:34
    }

    bb677: {                            
        _2050 = (_2051.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:34
        _2047 = const std::ops::IndexMut::index_mut(_2048, _2050) -> bb678; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb678: {                            
        StorageDead(_2050);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2048);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2047) = BitXor((*_2047), _2029); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2029);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2047);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2040);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2032);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2052);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2053);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2054);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2055);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2056);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2057);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2057 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2056 = _2057 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2057);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2058);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2059);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2060 = CheckedAdd(const 2usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2060.1: bool), "attempt to add with overflow") -> bb679; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb679: {                            
        _2059 = (_2060.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2061 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2061, "attempt to calculate the remainder with a divisor of zero") -> bb680; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb680: {                            
        _2058 = Rem(_2059, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2059);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2055 = const std::ops::Index::index(_2056, _2058) -> bb681; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb681: {                            
        _2054 = (*_2055);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2058);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2056);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2053 = Not(_2054);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2054);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2062);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2063);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2064);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2065);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2065 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2064 = _2065 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2065);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2066);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2067);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2068 = CheckedAdd(const 2usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2068.1: bool), "attempt to add with overflow") -> bb682; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb682: {                            
        _2067 = (_2068.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2069 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2069, "attempt to calculate the remainder with a divisor of zero") -> bb683; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb683: {                            
        _2066 = Rem(_2067, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2067);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2063 = const std::ops::Index::index(_2064, _2066) -> bb684; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb684: {                            
        _2062 = (*_2063);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2066);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2064);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2052 = BitAnd(_2053, _2062);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2062);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2053);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2070);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2071);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2072);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2072 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2071 = _2072 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2072);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2073);              // scope 11 at src\keccak.rs:66:13: 72:79
        _2074 = CheckedAdd(const 10usize, const 2usize); // scope 11 at src\keccak.rs:66:13: 72:79
        assert(!(_2074.1: bool), "attempt to add with overflow") -> bb685; // scope 11 at src\keccak.rs:66:13: 72:79
    }

    bb685: {                            
        _2073 = (_2074.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:79
        _2070 = const std::ops::IndexMut::index_mut(_2071, _2073) -> bb686; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb686: {                            
        StorageDead(_2073);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2071);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2070) = BitXor((*_2070), _2052); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2052);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2070);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2063);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2055);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2075);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2076);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2077);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2078);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2079);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2080);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2080 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2079 = _2080 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2080);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2081);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2082);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2083 = CheckedAdd(const 3usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2083.1: bool), "attempt to add with overflow") -> bb687; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb687: {                            
        _2082 = (_2083.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2084 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2084, "attempt to calculate the remainder with a divisor of zero") -> bb688; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb688: {                            
        _2081 = Rem(_2082, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2082);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2078 = const std::ops::Index::index(_2079, _2081) -> bb689; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb689: {                            
        _2077 = (*_2078);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2081);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2079);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2076 = Not(_2077);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2077);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2085);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2086);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2087);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2088);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2088 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2087 = _2088 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2088);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2089);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2090);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2091 = CheckedAdd(const 3usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2091.1: bool), "attempt to add with overflow") -> bb690; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb690: {                            
        _2090 = (_2091.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2092 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2092, "attempt to calculate the remainder with a divisor of zero") -> bb691; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb691: {                            
        _2089 = Rem(_2090, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2090);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2086 = const std::ops::Index::index(_2087, _2089) -> bb692; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb692: {                            
        _2085 = (*_2086);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2089);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2087);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2075 = BitAnd(_2076, _2085);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2085);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2076);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2093);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2094);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2095);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2095 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2094 = _2095 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2095);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2096);              // scope 11 at src\keccak.rs:66:13: 73:34
        _2097 = CheckedAdd(const 10usize, const 3usize); // scope 11 at src\keccak.rs:66:13: 73:34
        assert(!(_2097.1: bool), "attempt to add with overflow") -> bb693; // scope 11 at src\keccak.rs:66:13: 73:34
    }

    bb693: {                            
        _2096 = (_2097.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:34
        _2093 = const std::ops::IndexMut::index_mut(_2094, _2096) -> bb694; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb694: {                            
        StorageDead(_2096);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2094);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2093) = BitXor((*_2093), _2075); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2075);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2093);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2086);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2078);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2098);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2099);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2100);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2101);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2102);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2103);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2103 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2102 = _2103 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2103);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2104);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2105);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2106 = CheckedAdd(const 4usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2106.1: bool), "attempt to add with overflow") -> bb695; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb695: {                            
        _2105 = (_2106.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2107 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2107, "attempt to calculate the remainder with a divisor of zero") -> bb696; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb696: {                            
        _2104 = Rem(_2105, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2105);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2101 = const std::ops::Index::index(_2102, _2104) -> bb697; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb697: {                            
        _2100 = (*_2101);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2104);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2102);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2099 = Not(_2100);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2100);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2108);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2109);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2110);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2111);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2111 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2110 = _2111 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2111);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2112);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2113);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2114 = CheckedAdd(const 4usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2114.1: bool), "attempt to add with overflow") -> bb698; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb698: {                            
        _2113 = (_2114.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2115 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2115, "attempt to calculate the remainder with a divisor of zero") -> bb699; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb699: {                            
        _2112 = Rem(_2113, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2113);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2109 = const std::ops::Index::index(_2110, _2112) -> bb700; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb700: {                            
        _2108 = (*_2109);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2112);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2110);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2098 = BitAnd(_2099, _2108);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2108);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2099);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2116);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2117);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2118);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2118 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2117 = _2118 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2118);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2119);              // scope 11 at src\keccak.rs:66:13: 73:79
        _2120 = CheckedAdd(const 10usize, const 4usize); // scope 11 at src\keccak.rs:66:13: 73:79
        assert(!(_2120.1: bool), "attempt to add with overflow") -> bb701; // scope 11 at src\keccak.rs:66:13: 73:79
    }

    bb701: {                            
        _2119 = (_2120.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:79
        _2116 = const std::ops::IndexMut::index_mut(_2117, _2119) -> bb702; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb702: {                            
        StorageDead(_2119);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2117);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2116) = BitXor((*_2116), _2098); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2098);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2116);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2109);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2101);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2121);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2122);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2123);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2124);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2124 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2123 = _2124 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2124);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2125);              // scope 11 at src\keccak.rs:63:23: 69:34
        _2126 = CheckedAdd(const 15usize, const 0usize); // scope 11 at src\keccak.rs:63:23: 69:34
        assert(!(_2126.1: bool), "attempt to add with overflow") -> bb703; // scope 11 at src\keccak.rs:63:23: 69:34
    }

    bb703: {                            
        _2125 = (_2126.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:34
        _2122 = const std::ops::Index::index(_2123, _2125) -> bb704; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb704: {                            
        _2121 = (*_2122);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2125);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2123);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2127);              // scope 11 at src\keccak.rs:69:33: 69:34
        _2127 = const 0usize;            // scope 11 at src\keccak.rs:69:33: 69:34
        _2128 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2129 = Lt(_2127, _2128);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2129, "index out of bounds: the len is {} but the index is {}", _2128, _2127) -> bb705; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb705: {                            
        _4[_2127] = _2121;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2121);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2122);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2130);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2131);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2132);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2133);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2133 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2132 = _2133 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2133);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2134);              // scope 11 at src\keccak.rs:63:23: 69:79
        _2135 = CheckedAdd(const 15usize, const 1usize); // scope 11 at src\keccak.rs:63:23: 69:79
        assert(!(_2135.1: bool), "attempt to add with overflow") -> bb706; // scope 11 at src\keccak.rs:63:23: 69:79
    }

    bb706: {                            
        _2134 = (_2135.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:79
        _2131 = const std::ops::Index::index(_2132, _2134) -> bb707; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb707: {                            
        _2130 = (*_2131);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2134);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2132);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2136);              // scope 11 at src\keccak.rs:69:78: 69:79
        _2136 = const 1usize;            // scope 11 at src\keccak.rs:69:78: 69:79
        _2137 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2138 = Lt(_2136, _2137);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2138, "index out of bounds: the len is {} but the index is {}", _2137, _2136) -> bb708; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb708: {                            
        _4[_2136] = _2130;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2130);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2131);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2139);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2140);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2141);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2142);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2142 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2141 = _2142 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2142);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2143);              // scope 11 at src\keccak.rs:63:23: 70:34
        _2144 = CheckedAdd(const 15usize, const 2usize); // scope 11 at src\keccak.rs:63:23: 70:34
        assert(!(_2144.1: bool), "attempt to add with overflow") -> bb709; // scope 11 at src\keccak.rs:63:23: 70:34
    }

    bb709: {                            
        _2143 = (_2144.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:34
        _2140 = const std::ops::Index::index(_2141, _2143) -> bb710; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb710: {                            
        _2139 = (*_2140);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2143);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2141);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2145);              // scope 11 at src\keccak.rs:70:33: 70:34
        _2145 = const 2usize;            // scope 11 at src\keccak.rs:70:33: 70:34
        _2146 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2147 = Lt(_2145, _2146);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2147, "index out of bounds: the len is {} but the index is {}", _2146, _2145) -> bb711; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb711: {                            
        _4[_2145] = _2139;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2139);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2140);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2148);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2149);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2150);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2151);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2151 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2150 = _2151 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2151);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2152);              // scope 11 at src\keccak.rs:63:23: 70:79
        _2153 = CheckedAdd(const 15usize, const 3usize); // scope 11 at src\keccak.rs:63:23: 70:79
        assert(!(_2153.1: bool), "attempt to add with overflow") -> bb712; // scope 11 at src\keccak.rs:63:23: 70:79
    }

    bb712: {                            
        _2152 = (_2153.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:79
        _2149 = const std::ops::Index::index(_2150, _2152) -> bb713; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb713: {                            
        _2148 = (*_2149);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2152);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2150);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2154);              // scope 11 at src\keccak.rs:70:78: 70:79
        _2154 = const 3usize;            // scope 11 at src\keccak.rs:70:78: 70:79
        _2155 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2156 = Lt(_2154, _2155);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2156, "index out of bounds: the len is {} but the index is {}", _2155, _2154) -> bb714; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb714: {                            
        _4[_2154] = _2148;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2148);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2149);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2157);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2158);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2159);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2160);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2160 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2159 = _2160 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2160);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2161);              // scope 11 at src\keccak.rs:63:23: 71:34
        _2162 = CheckedAdd(const 15usize, const 4usize); // scope 11 at src\keccak.rs:63:23: 71:34
        assert(!(_2162.1: bool), "attempt to add with overflow") -> bb715; // scope 11 at src\keccak.rs:63:23: 71:34
    }

    bb715: {                            
        _2161 = (_2162.0: usize);        // scope 11 at src\keccak.rs:63:23: 71:34
        _2158 = const std::ops::Index::index(_2159, _2161) -> bb716; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb716: {                            
        _2157 = (*_2158);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2161);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2159);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2163);              // scope 11 at src\keccak.rs:71:33: 71:34
        _2163 = const 4usize;            // scope 11 at src\keccak.rs:71:33: 71:34
        _2164 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2165 = Lt(_2163, _2164);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2165, "index out of bounds: the len is {} but the index is {}", _2164, _2163) -> bb717; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb717: {                            
        _4[_2163] = _2157;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2157);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2158);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2166);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2167);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2168);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2169);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2170);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2171);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2171 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2170 = _2171 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2171);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2172);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2173);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2174 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2174.1: bool), "attempt to add with overflow") -> bb718; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb718: {                            
        _2173 = (_2174.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2175 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2175, "attempt to calculate the remainder with a divisor of zero") -> bb719; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb719: {                            
        _2172 = Rem(_2173, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2173);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2169 = const std::ops::Index::index(_2170, _2172) -> bb720; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb720: {                            
        _2168 = (*_2169);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2172);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2170);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2167 = Not(_2168);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2168);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2176);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2177);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2178);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2179);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2179 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2178 = _2179 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2179);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2180);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2181);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2182 = CheckedAdd(const 0usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2182.1: bool), "attempt to add with overflow") -> bb721; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb721: {                            
        _2181 = (_2182.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2183 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2183, "attempt to calculate the remainder with a divisor of zero") -> bb722; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb722: {                            
        _2180 = Rem(_2181, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2181);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2177 = const std::ops::Index::index(_2178, _2180) -> bb723; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb723: {                            
        _2176 = (*_2177);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2180);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2178);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2166 = BitAnd(_2167, _2176);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2176);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2167);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2184);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2185);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2186);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2186 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2185 = _2186 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2186);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2187);              // scope 11 at src\keccak.rs:66:13: 71:79
        _2188 = CheckedAdd(const 15usize, const 0usize); // scope 11 at src\keccak.rs:66:13: 71:79
        assert(!(_2188.1: bool), "attempt to add with overflow") -> bb724; // scope 11 at src\keccak.rs:66:13: 71:79
    }

    bb724: {                            
        _2187 = (_2188.0: usize);        // scope 11 at src\keccak.rs:66:13: 71:79
        _2184 = const std::ops::IndexMut::index_mut(_2185, _2187) -> bb725; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb725: {                            
        StorageDead(_2187);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2185);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2184) = BitXor((*_2184), _2166); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2166);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2184);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2177);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2169);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2189);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2190);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2191);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2192);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2193);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2194);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2194 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2193 = _2194 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2194);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2195);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2196);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2197 = CheckedAdd(const 1usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2197.1: bool), "attempt to add with overflow") -> bb726; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb726: {                            
        _2196 = (_2197.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2198 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2198, "attempt to calculate the remainder with a divisor of zero") -> bb727; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb727: {                            
        _2195 = Rem(_2196, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2196);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2192 = const std::ops::Index::index(_2193, _2195) -> bb728; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb728: {                            
        _2191 = (*_2192);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2195);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2193);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2190 = Not(_2191);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2191);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2199);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2200);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2201);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2202);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2202 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2201 = _2202 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2202);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2203);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2204);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2205 = CheckedAdd(const 1usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2205.1: bool), "attempt to add with overflow") -> bb729; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb729: {                            
        _2204 = (_2205.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2206 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2206, "attempt to calculate the remainder with a divisor of zero") -> bb730; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb730: {                            
        _2203 = Rem(_2204, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2204);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2200 = const std::ops::Index::index(_2201, _2203) -> bb731; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb731: {                            
        _2199 = (*_2200);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2203);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2201);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2189 = BitAnd(_2190, _2199);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2199);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2190);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2207);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2208);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2209);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2209 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2208 = _2209 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2209);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2210);              // scope 11 at src\keccak.rs:66:13: 72:34
        _2211 = CheckedAdd(const 15usize, const 1usize); // scope 11 at src\keccak.rs:66:13: 72:34
        assert(!(_2211.1: bool), "attempt to add with overflow") -> bb732; // scope 11 at src\keccak.rs:66:13: 72:34
    }

    bb732: {                            
        _2210 = (_2211.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:34
        _2207 = const std::ops::IndexMut::index_mut(_2208, _2210) -> bb733; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb733: {                            
        StorageDead(_2210);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2208);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2207) = BitXor((*_2207), _2189); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2189);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2207);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2200);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2192);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2212);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2213);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2214);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2215);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2216);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2217);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2217 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2216 = _2217 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2217);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2218);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2219);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2220 = CheckedAdd(const 2usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2220.1: bool), "attempt to add with overflow") -> bb734; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb734: {                            
        _2219 = (_2220.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2221 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2221, "attempt to calculate the remainder with a divisor of zero") -> bb735; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb735: {                            
        _2218 = Rem(_2219, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2219);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2215 = const std::ops::Index::index(_2216, _2218) -> bb736; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb736: {                            
        _2214 = (*_2215);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2218);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2216);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2213 = Not(_2214);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2214);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2222);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2223);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2224);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2225);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2225 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2224 = _2225 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2225);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2226);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2227);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2228 = CheckedAdd(const 2usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2228.1: bool), "attempt to add with overflow") -> bb737; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb737: {                            
        _2227 = (_2228.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2229 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2229, "attempt to calculate the remainder with a divisor of zero") -> bb738; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb738: {                            
        _2226 = Rem(_2227, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2227);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2223 = const std::ops::Index::index(_2224, _2226) -> bb739; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb739: {                            
        _2222 = (*_2223);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2226);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2224);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2212 = BitAnd(_2213, _2222);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2222);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2213);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2230);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2231);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2232);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2232 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2231 = _2232 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2232);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2233);              // scope 11 at src\keccak.rs:66:13: 72:79
        _2234 = CheckedAdd(const 15usize, const 2usize); // scope 11 at src\keccak.rs:66:13: 72:79
        assert(!(_2234.1: bool), "attempt to add with overflow") -> bb740; // scope 11 at src\keccak.rs:66:13: 72:79
    }

    bb740: {                            
        _2233 = (_2234.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:79
        _2230 = const std::ops::IndexMut::index_mut(_2231, _2233) -> bb741; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb741: {                            
        StorageDead(_2233);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2231);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2230) = BitXor((*_2230), _2212); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2212);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2230);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2223);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2215);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2235);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2236);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2237);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2238);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2239);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2240);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2240 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2239 = _2240 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2240);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2241);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2242);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2243 = CheckedAdd(const 3usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2243.1: bool), "attempt to add with overflow") -> bb742; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb742: {                            
        _2242 = (_2243.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2244 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2244, "attempt to calculate the remainder with a divisor of zero") -> bb743; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb743: {                            
        _2241 = Rem(_2242, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2242);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2238 = const std::ops::Index::index(_2239, _2241) -> bb744; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb744: {                            
        _2237 = (*_2238);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2241);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2239);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2236 = Not(_2237);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2237);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2245);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2246);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2247);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2248);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2248 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2247 = _2248 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2248);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2249);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2250);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2251 = CheckedAdd(const 3usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2251.1: bool), "attempt to add with overflow") -> bb745; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb745: {                            
        _2250 = (_2251.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2252 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2252, "attempt to calculate the remainder with a divisor of zero") -> bb746; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb746: {                            
        _2249 = Rem(_2250, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2250);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2246 = const std::ops::Index::index(_2247, _2249) -> bb747; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb747: {                            
        _2245 = (*_2246);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2249);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2247);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2235 = BitAnd(_2236, _2245);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2245);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2236);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2253);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2254);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2255);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2255 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2254 = _2255 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2255);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2256);              // scope 11 at src\keccak.rs:66:13: 73:34
        _2257 = CheckedAdd(const 15usize, const 3usize); // scope 11 at src\keccak.rs:66:13: 73:34
        assert(!(_2257.1: bool), "attempt to add with overflow") -> bb748; // scope 11 at src\keccak.rs:66:13: 73:34
    }

    bb748: {                            
        _2256 = (_2257.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:34
        _2253 = const std::ops::IndexMut::index_mut(_2254, _2256) -> bb749; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb749: {                            
        StorageDead(_2256);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2254);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2253) = BitXor((*_2253), _2235); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2235);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2253);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2246);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2238);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2258);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2259);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2260);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2261);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2262);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2263);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2263 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2262 = _2263 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2263);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2264);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2265);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2266 = CheckedAdd(const 4usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2266.1: bool), "attempt to add with overflow") -> bb750; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb750: {                            
        _2265 = (_2266.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2267 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2267, "attempt to calculate the remainder with a divisor of zero") -> bb751; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb751: {                            
        _2264 = Rem(_2265, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2265);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2261 = const std::ops::Index::index(_2262, _2264) -> bb752; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb752: {                            
        _2260 = (*_2261);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2264);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2262);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2259 = Not(_2260);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2260);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2268);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2269);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2270);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2271);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2271 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2270 = _2271 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2271);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2272);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2273);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2274 = CheckedAdd(const 4usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2274.1: bool), "attempt to add with overflow") -> bb753; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb753: {                            
        _2273 = (_2274.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2275 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2275, "attempt to calculate the remainder with a divisor of zero") -> bb754; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb754: {                            
        _2272 = Rem(_2273, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2273);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2269 = const std::ops::Index::index(_2270, _2272) -> bb755; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb755: {                            
        _2268 = (*_2269);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2272);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2270);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2258 = BitAnd(_2259, _2268);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2268);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2259);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2276);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2277);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2278);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2278 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2277 = _2278 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2278);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2279);              // scope 11 at src\keccak.rs:66:13: 73:79
        _2280 = CheckedAdd(const 15usize, const 4usize); // scope 11 at src\keccak.rs:66:13: 73:79
        assert(!(_2280.1: bool), "attempt to add with overflow") -> bb756; // scope 11 at src\keccak.rs:66:13: 73:79
    }

    bb756: {                            
        _2279 = (_2280.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:79
        _2276 = const std::ops::IndexMut::index_mut(_2277, _2279) -> bb757; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb757: {                            
        StorageDead(_2279);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2277);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2276) = BitXor((*_2276), _2258); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2258);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2276);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2269);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2261);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2281);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2282);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2283);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2284);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2284 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2283 = _2284 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2284);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2285);              // scope 11 at src\keccak.rs:63:23: 69:34
        _2286 = CheckedAdd(const 20usize, const 0usize); // scope 11 at src\keccak.rs:63:23: 69:34
        assert(!(_2286.1: bool), "attempt to add with overflow") -> bb758; // scope 11 at src\keccak.rs:63:23: 69:34
    }

    bb758: {                            
        _2285 = (_2286.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:34
        _2282 = const std::ops::Index::index(_2283, _2285) -> bb759; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb759: {                            
        _2281 = (*_2282);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2285);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2283);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2287);              // scope 11 at src\keccak.rs:69:33: 69:34
        _2287 = const 0usize;            // scope 11 at src\keccak.rs:69:33: 69:34
        _2288 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2289 = Lt(_2287, _2288);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2289, "index out of bounds: the len is {} but the index is {}", _2288, _2287) -> bb760; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb760: {                            
        _4[_2287] = _2281;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2281);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2282);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2290);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2291);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2292);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2293);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2293 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2292 = _2293 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2293);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2294);              // scope 11 at src\keccak.rs:63:23: 69:79
        _2295 = CheckedAdd(const 20usize, const 1usize); // scope 11 at src\keccak.rs:63:23: 69:79
        assert(!(_2295.1: bool), "attempt to add with overflow") -> bb761; // scope 11 at src\keccak.rs:63:23: 69:79
    }

    bb761: {                            
        _2294 = (_2295.0: usize);        // scope 11 at src\keccak.rs:63:23: 69:79
        _2291 = const std::ops::Index::index(_2292, _2294) -> bb762; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb762: {                            
        _2290 = (*_2291);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2294);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2292);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2296);              // scope 11 at src\keccak.rs:69:78: 69:79
        _2296 = const 1usize;            // scope 11 at src\keccak.rs:69:78: 69:79
        _2297 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2298 = Lt(_2296, _2297);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2298, "index out of bounds: the len is {} but the index is {}", _2297, _2296) -> bb763; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb763: {                            
        _4[_2296] = _2290;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2290);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2291);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2299);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2300);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2301);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2302);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2302 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2301 = _2302 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2302);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2303);              // scope 11 at src\keccak.rs:63:23: 70:34
        _2304 = CheckedAdd(const 20usize, const 2usize); // scope 11 at src\keccak.rs:63:23: 70:34
        assert(!(_2304.1: bool), "attempt to add with overflow") -> bb764; // scope 11 at src\keccak.rs:63:23: 70:34
    }

    bb764: {                            
        _2303 = (_2304.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:34
        _2300 = const std::ops::Index::index(_2301, _2303) -> bb765; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb765: {                            
        _2299 = (*_2300);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2303);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2301);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2305);              // scope 11 at src\keccak.rs:70:33: 70:34
        _2305 = const 2usize;            // scope 11 at src\keccak.rs:70:33: 70:34
        _2306 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2307 = Lt(_2305, _2306);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2307, "index out of bounds: the len is {} but the index is {}", _2306, _2305) -> bb766; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb766: {                            
        _4[_2305] = _2299;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2299);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2300);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2308);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2309);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2310);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2311);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2311 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2310 = _2311 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2311);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2312);              // scope 11 at src\keccak.rs:63:23: 70:79
        _2313 = CheckedAdd(const 20usize, const 3usize); // scope 11 at src\keccak.rs:63:23: 70:79
        assert(!(_2313.1: bool), "attempt to add with overflow") -> bb767; // scope 11 at src\keccak.rs:63:23: 70:79
    }

    bb767: {                            
        _2312 = (_2313.0: usize);        // scope 11 at src\keccak.rs:63:23: 70:79
        _2309 = const std::ops::Index::index(_2310, _2312) -> bb768; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb768: {                            
        _2308 = (*_2309);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2312);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2310);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2314);              // scope 11 at src\keccak.rs:70:78: 70:79
        _2314 = const 3usize;            // scope 11 at src\keccak.rs:70:78: 70:79
        _2315 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2316 = Lt(_2314, _2315);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2316, "index out of bounds: the len is {} but the index is {}", _2315, _2314) -> bb769; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb769: {                            
        _4[_2314] = _2308;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2308);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2309);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2317);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2318);              // scope 11 at src\keccak.rs:63:19: 63:31
        StorageLive(_2319);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2320);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2320 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2319 = _2320 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2320);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2321);              // scope 11 at src\keccak.rs:63:23: 71:34
        _2322 = CheckedAdd(const 20usize, const 4usize); // scope 11 at src\keccak.rs:63:23: 71:34
        assert(!(_2322.1: bool), "attempt to add with overflow") -> bb770; // scope 11 at src\keccak.rs:63:23: 71:34
    }

    bb770: {                            
        _2321 = (_2322.0: usize);        // scope 11 at src\keccak.rs:63:23: 71:34
        _2318 = const std::ops::Index::index(_2319, _2321) -> bb771; // scope 11 at src\keccak.rs:63:19: 63:31
    }

    bb771: {                            
        _2317 = (*_2318);                // scope 11 at src\keccak.rs:63:19: 63:31
        StorageDead(_2321);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2319);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageLive(_2323);              // scope 11 at src\keccak.rs:71:33: 71:34
        _2323 = const 4usize;            // scope 11 at src\keccak.rs:71:33: 71:34
        _2324 = Len(_4);                 // scope 11 at src\keccak.rs:63:9: 63:16
        _2325 = Lt(_2323, _2324);        // scope 11 at src\keccak.rs:63:9: 63:16
        assert(_2325, "index out of bounds: the len is {} but the index is {}", _2324, _2323) -> bb772; // scope 11 at src\keccak.rs:63:9: 63:16
    }

    bb772: {                            
        _4[_2323] = _2317;               // scope 11 at src\keccak.rs:63:9: 63:31
        StorageDead(_2317);              // scope 11 at src\keccak.rs:63:31: 63:31
        StorageDead(_2318);              // scope 11 at src\keccak.rs:63:32: 63:32
        StorageLive(_2326);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2327);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2328);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2329);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2330);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2331);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2331 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2330 = _2331 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2331);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2332);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2333);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2334 = CheckedAdd(const 0usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2334.1: bool), "attempt to add with overflow") -> bb773; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb773: {                            
        _2333 = (_2334.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2335 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2335, "attempt to calculate the remainder with a divisor of zero") -> bb774; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb774: {                            
        _2332 = Rem(_2333, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2333);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2329 = const std::ops::Index::index(_2330, _2332) -> bb775; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb775: {                            
        _2328 = (*_2329);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2332);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2330);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2327 = Not(_2328);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2328);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2336);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2337);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2338);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2339);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2339 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2338 = _2339 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2339);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2340);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2341);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2342 = CheckedAdd(const 0usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2342.1: bool), "attempt to add with overflow") -> bb776; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb776: {                            
        _2341 = (_2342.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2343 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2343, "attempt to calculate the remainder with a divisor of zero") -> bb777; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb777: {                            
        _2340 = Rem(_2341, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2341);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2337 = const std::ops::Index::index(_2338, _2340) -> bb778; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb778: {                            
        _2336 = (*_2337);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2340);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2338);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2326 = BitAnd(_2327, _2336);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2336);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2327);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2344);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2345);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2346);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2346 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2345 = _2346 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2346);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2347);              // scope 11 at src\keccak.rs:66:13: 71:79
        _2348 = CheckedAdd(const 20usize, const 0usize); // scope 11 at src\keccak.rs:66:13: 71:79
        assert(!(_2348.1: bool), "attempt to add with overflow") -> bb779; // scope 11 at src\keccak.rs:66:13: 71:79
    }

    bb779: {                            
        _2347 = (_2348.0: usize);        // scope 11 at src\keccak.rs:66:13: 71:79
        _2344 = const std::ops::IndexMut::index_mut(_2345, _2347) -> bb780; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb780: {                            
        StorageDead(_2347);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2345);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2344) = BitXor((*_2344), _2326); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2326);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2344);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2337);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2329);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2349);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2350);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2351);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2352);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2353);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2354);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2354 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2353 = _2354 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2354);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2355);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2356);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2357 = CheckedAdd(const 1usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2357.1: bool), "attempt to add with overflow") -> bb781; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb781: {                            
        _2356 = (_2357.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2358 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2358, "attempt to calculate the remainder with a divisor of zero") -> bb782; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb782: {                            
        _2355 = Rem(_2356, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2356);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2352 = const std::ops::Index::index(_2353, _2355) -> bb783; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb783: {                            
        _2351 = (*_2352);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2355);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2353);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2350 = Not(_2351);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2351);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2359);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2360);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2361);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2362);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2362 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2361 = _2362 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2362);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2363);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2364);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2365 = CheckedAdd(const 1usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2365.1: bool), "attempt to add with overflow") -> bb784; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb784: {                            
        _2364 = (_2365.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2366 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2366, "attempt to calculate the remainder with a divisor of zero") -> bb785; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb785: {                            
        _2363 = Rem(_2364, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2364);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2360 = const std::ops::Index::index(_2361, _2363) -> bb786; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb786: {                            
        _2359 = (*_2360);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2363);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2361);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2349 = BitAnd(_2350, _2359);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2359);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2350);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2367);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2368);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2369);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2369 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2368 = _2369 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2369);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2370);              // scope 11 at src\keccak.rs:66:13: 72:34
        _2371 = CheckedAdd(const 20usize, const 1usize); // scope 11 at src\keccak.rs:66:13: 72:34
        assert(!(_2371.1: bool), "attempt to add with overflow") -> bb787; // scope 11 at src\keccak.rs:66:13: 72:34
    }

    bb787: {                            
        _2370 = (_2371.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:34
        _2367 = const std::ops::IndexMut::index_mut(_2368, _2370) -> bb788; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb788: {                            
        StorageDead(_2370);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2368);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2367) = BitXor((*_2367), _2349); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2349);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2367);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2360);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2352);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2372);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2373);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2374);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2375);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2376);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2377);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2377 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2376 = _2377 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2377);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2378);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2379);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2380 = CheckedAdd(const 2usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2380.1: bool), "attempt to add with overflow") -> bb789; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb789: {                            
        _2379 = (_2380.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2381 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2381, "attempt to calculate the remainder with a divisor of zero") -> bb790; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb790: {                            
        _2378 = Rem(_2379, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2379);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2375 = const std::ops::Index::index(_2376, _2378) -> bb791; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb791: {                            
        _2374 = (*_2375);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2378);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2376);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2373 = Not(_2374);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2374);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2382);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2383);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2384);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2385);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2385 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2384 = _2385 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2385);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2386);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2387);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2388 = CheckedAdd(const 2usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2388.1: bool), "attempt to add with overflow") -> bb792; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb792: {                            
        _2387 = (_2388.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2389 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2389, "attempt to calculate the remainder with a divisor of zero") -> bb793; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb793: {                            
        _2386 = Rem(_2387, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2387);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2383 = const std::ops::Index::index(_2384, _2386) -> bb794; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb794: {                            
        _2382 = (*_2383);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2386);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2384);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2372 = BitAnd(_2373, _2382);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2382);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2373);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2390);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2391);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2392);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2392 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2391 = _2392 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2392);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2393);              // scope 11 at src\keccak.rs:66:13: 72:79
        _2394 = CheckedAdd(const 20usize, const 2usize); // scope 11 at src\keccak.rs:66:13: 72:79
        assert(!(_2394.1: bool), "attempt to add with overflow") -> bb795; // scope 11 at src\keccak.rs:66:13: 72:79
    }

    bb795: {                            
        _2393 = (_2394.0: usize);        // scope 11 at src\keccak.rs:66:13: 72:79
        _2390 = const std::ops::IndexMut::index_mut(_2391, _2393) -> bb796; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb796: {                            
        StorageDead(_2393);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2391);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2390) = BitXor((*_2390), _2372); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2372);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2390);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2383);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2375);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2395);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2396);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2397);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2398);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2399);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2400);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2400 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2399 = _2400 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2400);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2401);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2402);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2403 = CheckedAdd(const 3usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2403.1: bool), "attempt to add with overflow") -> bb797; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb797: {                            
        _2402 = (_2403.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2404 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2404, "attempt to calculate the remainder with a divisor of zero") -> bb798; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb798: {                            
        _2401 = Rem(_2402, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2402);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2398 = const std::ops::Index::index(_2399, _2401) -> bb799; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb799: {                            
        _2397 = (*_2398);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2401);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2399);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2396 = Not(_2397);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2397);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2405);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2406);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2407);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2408);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2408 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2407 = _2408 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2408);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2409);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2410);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2411 = CheckedAdd(const 3usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2411.1: bool), "attempt to add with overflow") -> bb800; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb800: {                            
        _2410 = (_2411.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2412 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2412, "attempt to calculate the remainder with a divisor of zero") -> bb801; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb801: {                            
        _2409 = Rem(_2410, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2410);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2406 = const std::ops::Index::index(_2407, _2409) -> bb802; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb802: {                            
        _2405 = (*_2406);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2409);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2407);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2395 = BitAnd(_2396, _2405);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2405);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2396);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2413);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2414);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2415);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2415 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2414 = _2415 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2415);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2416);              // scope 11 at src\keccak.rs:66:13: 73:34
        _2417 = CheckedAdd(const 20usize, const 3usize); // scope 11 at src\keccak.rs:66:13: 73:34
        assert(!(_2417.1: bool), "attempt to add with overflow") -> bb803; // scope 11 at src\keccak.rs:66:13: 73:34
    }

    bb803: {                            
        _2416 = (_2417.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:34
        _2413 = const std::ops::IndexMut::index_mut(_2414, _2416) -> bb804; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb804: {                            
        StorageDead(_2416);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2414);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2413) = BitXor((*_2413), _2395); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2395);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2413);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2406);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2398);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2418);              // scope 11 at src\keccak.rs:66:25: 66:65
        StorageLive(_2419);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageLive(_2420);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2421);              // scope 11 at src\keccak.rs:66:27: 66:44
        StorageLive(_2422);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2423);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2423 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2422 = _2423 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2423);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2424);              // scope 11 at src\keccak.rs:66:31: 66:43
        StorageLive(_2425);              // scope 11 at src\keccak.rs:66:31: 66:39
        _2426 = CheckedAdd(const 4usize, const 1usize); // scope 11 at src\keccak.rs:66:31: 66:39
        assert(!(_2426.1: bool), "attempt to add with overflow") -> bb805; // scope 11 at src\keccak.rs:66:31: 66:39
    }

    bb805: {                            
        _2425 = (_2426.0: usize);        // scope 11 at src\keccak.rs:66:31: 66:39
        _2427 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:31: 66:43
        assert(!_2427, "attempt to calculate the remainder with a divisor of zero") -> bb806; // scope 11 at src\keccak.rs:66:31: 66:43
    }

    bb806: {                            
        _2424 = Rem(_2425, const 5usize); // scope 11 at src\keccak.rs:66:31: 66:43
        StorageDead(_2425);              // scope 11 at src\keccak.rs:66:43: 66:43
        _2421 = const std::ops::Index::index(_2422, _2424) -> bb807; // scope 11 at src\keccak.rs:66:27: 66:44
    }

    bb807: {                            
        _2420 = (*_2421);                // scope 11 at src\keccak.rs:66:27: 66:44
        StorageDead(_2424);              // scope 11 at src\keccak.rs:66:44: 66:44
        StorageDead(_2422);              // scope 11 at src\keccak.rs:66:44: 66:44
        _2419 = Not(_2420);              // scope 11 at src\keccak.rs:66:25: 66:45
        StorageDead(_2420);              // scope 11 at src\keccak.rs:66:45: 66:45
        StorageLive(_2428);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2429);              // scope 11 at src\keccak.rs:66:48: 66:65
        StorageLive(_2430);              // scope 11 at src\keccak.rs:103:29: 103:31
        StorageLive(_2431);              // scope 11 at src\keccak.rs:103:29: 103:31
        _2431 = &_4;                     // scope 11 at src\keccak.rs:103:29: 103:31
        _2430 = _2431 as &[u64] (Unsize); // scope 11 at src\keccak.rs:103:29: 103:31
        StorageDead(_2431);              // scope 11 at src\keccak.rs:103:31: 103:31
        StorageLive(_2432);              // scope 11 at src\keccak.rs:66:52: 66:64
        StorageLive(_2433);              // scope 11 at src\keccak.rs:66:52: 66:60
        _2434 = CheckedAdd(const 4usize, const 2usize); // scope 11 at src\keccak.rs:66:52: 66:60
        assert(!(_2434.1: bool), "attempt to add with overflow") -> bb808; // scope 11 at src\keccak.rs:66:52: 66:60
    }

    bb808: {                            
        _2433 = (_2434.0: usize);        // scope 11 at src\keccak.rs:66:52: 66:60
        _2435 = Eq(const 5usize, const 0usize); // scope 11 at src\keccak.rs:66:52: 66:64
        assert(!_2435, "attempt to calculate the remainder with a divisor of zero") -> bb809; // scope 11 at src\keccak.rs:66:52: 66:64
    }

    bb809: {                            
        _2432 = Rem(_2433, const 5usize); // scope 11 at src\keccak.rs:66:52: 66:64
        StorageDead(_2433);              // scope 11 at src\keccak.rs:66:64: 66:64
        _2429 = const std::ops::Index::index(_2430, _2432) -> bb810; // scope 11 at src\keccak.rs:66:48: 66:65
    }

    bb810: {                            
        _2428 = (*_2429);                // scope 11 at src\keccak.rs:66:48: 66:65
        StorageDead(_2432);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2430);              // scope 11 at src\keccak.rs:66:65: 66:65
        _2418 = BitAnd(_2419, _2428);    // scope 11 at src\keccak.rs:66:25: 66:65
        StorageDead(_2428);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2419);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageLive(_2436);              // scope 11 at src\keccak.rs:66:9: 66:21
        StorageLive(_2437);              // scope 11 at src\keccak.rs:103:38: 103:40
        StorageLive(_2438);              // scope 11 at src\keccak.rs:103:38: 103:40
        _2438 = _1;                      // scope 11 at src\keccak.rs:103:38: 103:40
        _2437 = _2438 as &mut [u64] (Unsize); // scope 11 at src\keccak.rs:103:38: 103:40
        StorageDead(_2438);              // scope 11 at src\keccak.rs:103:40: 103:40
        StorageLive(_2439);              // scope 11 at src\keccak.rs:66:13: 73:79
        _2440 = CheckedAdd(const 20usize, const 4usize); // scope 11 at src\keccak.rs:66:13: 73:79
        assert(!(_2440.1: bool), "attempt to add with overflow") -> bb811; // scope 11 at src\keccak.rs:66:13: 73:79
    }

    bb811: {                            
        _2439 = (_2440.0: usize);        // scope 11 at src\keccak.rs:66:13: 73:79
        _2436 = const std::ops::IndexMut::index_mut(_2437, _2439) -> bb812; // scope 11 at src\keccak.rs:66:9: 66:21
    }

    bb812: {                            
        StorageDead(_2439);              // scope 11 at src\keccak.rs:66:21: 66:21
        StorageDead(_2437);              // scope 11 at src\keccak.rs:66:21: 66:21
        (*_2436) = BitXor((*_2436), _2418); // scope 11 at src\keccak.rs:66:9: 66:65
        StorageDead(_2418);              // scope 11 at src\keccak.rs:66:65: 66:65
        StorageDead(_2436);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2429);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageDead(_2421);              // scope 11 at src\keccak.rs:66:66: 66:66
        StorageLive(_2441);              // scope 11 at src\keccak.rs:105:18: 105:36
        StorageLive(_2442);              // scope 11 at src\keccak.rs:105:30: 105:35
        _2442 = _18;                     // scope 11 at src\keccak.rs:105:30: 105:35
        _2443 = Len((keccak::KECCAK_RNDC: [u64; 24])); // scope 11 at src\keccak.rs:105:18: 105:36
        _2444 = Lt(_2442, _2443);        // scope 11 at src\keccak.rs:105:18: 105:36
        assert(_2444, "index out of bounds: the len is {} but the index is {}", _2443, _2442) -> bb813; // scope 11 at src\keccak.rs:105:18: 105:36
    }

    bb813: {                            
        _2441 = (keccak::KECCAK_RNDC: [u64; 24])[_2442]; // scope 11 at src\keccak.rs:105:18: 105:36
        StorageLive(_2445);              // scope 11 at src\keccak.rs:105:12: 105:13
        _2445 = const 0usize;            // scope 11 at src\keccak.rs:105:12: 105:13
        _2446 = Len((*_1));              // scope 11 at src\keccak.rs:105:9: 105:14
        _2447 = Lt(_2445, _2446);        // scope 11 at src\keccak.rs:105:9: 105:14
        assert(_2447, "index out of bounds: the len is {} but the index is {}", _2446, _2445) -> bb814; // scope 11 at src\keccak.rs:105:9: 105:14
    }

    bb814: {                            
        (*_1)[_2445] = BitXor((*_1)[_2445], _2441); // scope 11 at src\keccak.rs:105:9: 105:36
        StorageDead(_2441);              // scope 11 at src\keccak.rs:105:36: 105:36
        _20 = ();                        // scope 11 at src\keccak.rs:89:28: 106:6
        _10 = ();                        // scope 7 at src\keccak.rs:89:5: 106:6
        StorageDead(_18);                // scope 8 at src\keccak.rs:106:6: 106:6
        StorageDead(_11);                // scope 7 at src\keccak.rs:106:6: 106:6
        goto -> bb2;                     // scope 7 at src\keccak.rs:89:5: 106:6
    }
}

const keccak::keccak::{{initializer}}: usize = {
    let mut _0: usize;                   // return pointer

    bb0: {                              
        _0 = const 144usize;             // scope 0 at src\keccak.rs:113:26: 113:29
        return;                          // scope 0 at src\keccak.rs:113:26: 113:29
    }
}

fn cryptonight::<impl at src\cryptonight.rs:42:10: 42:15>::clone(_1: &cryptonight::SlowHashStateInner) -> cryptonight::SlowHashStateInner {
    let mut _0: cryptonight::SlowHashStateInner; // return pointer
    let mut _2: cryptonight::SlowHashStateInner;

    bb0: {                              
        StorageLive(_2);                 // scope 0 at src\cryptonight.rs:42:10: 42:15
        _2 = (*_1);                      // scope 0 at src\cryptonight.rs:42:10: 42:15
        _0 = _2;                         // scope 0 at src\cryptonight.rs:42:10: 42:15
        StorageDead(_2);                 // scope 0 at src\cryptonight.rs:42:15: 42:15
        return;                          // scope 0 at src\cryptonight.rs:42:15: 42:15
    }
}
